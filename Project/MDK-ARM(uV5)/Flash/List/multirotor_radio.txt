; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\multirotor_radio.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\multirotor_radio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Driver\STMFLASH -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Driver\Modules_hmc5883 -I..\..\User\Driver\Modules_mpu6050 -I..\..\User\Driver\Modules_ms5611 -I..\..\User\Driver\Modules_oled -I..\..\User\Driver\Modules_ultrasonic -I..\..\User\Function\Heigh -I"C:\Users\Administrator\Desktop\机器人课飞控\机器人课无人机原始程序 - 副本\Project\MDK-ARM(uV5)\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\multirotor_radio.crf ..\..\User\Function\MultiRotor_radio\MultiRotor_radio.c]
                          THUMB

                          AREA ||i.Float2Byte||, CODE, READONLY, ALIGN=1

                  Float2Byte PROC
;;;80     //beg:指定从数组第几个元素开始写入
;;;81     void Float2Byte(float *target,unsigned char *buf,unsigned char beg)
000000  b530              PUSH     {r4,r5,lr}
;;;82     {
;;;83         unsigned char *point;
;;;84         point = (unsigned char*)target;	  //得到float的地址
000002  4603              MOV      r3,r0
;;;85         buf[beg]   = point[0];
000004  781c              LDRB     r4,[r3,#0]
000006  548c              STRB     r4,[r1,r2]
;;;86         buf[beg+1] = point[1];
000008  785d              LDRB     r5,[r3,#1]
00000a  1c54              ADDS     r4,r2,#1
00000c  550d              STRB     r5,[r1,r4]
;;;87         buf[beg+2] = point[2];
00000e  789d              LDRB     r5,[r3,#2]
000010  1c94              ADDS     r4,r2,#2
000012  550d              STRB     r5,[r1,r4]
;;;88         buf[beg+3] = point[3];
000014  78dd              LDRB     r5,[r3,#3]
000016  1cd4              ADDS     r4,r2,#3
000018  550d              STRB     r5,[r1,r4]
;;;89     }
00001a  bd30              POP      {r4,r5,pc}
;;;90     
                          ENDP


                          AREA ||i.HT_GCS_Link||, CODE, READONLY, ALIGN=2

                  HT_GCS_Link PROC
;;;461    
;;;462    void HT_GCS_Link(void)
000000  b510              PUSH     {r4,lr}
;;;463    {
;;;464      u8 senddataflag;
;;;465    	
;;;466    	switch(sw) //循环发送各模块数据
000002  4818              LDR      r0,|L2.100|
000004  6800              LDR      r0,[r0,#0]  ; sw
000006  2801              CMP      r0,#1
000008  d006              BEQ      |L2.24|
00000a  2802              CMP      r0,#2
00000c  d00a              BEQ      |L2.36|
00000e  2803              CMP      r0,#3
000010  d00e              BEQ      |L2.48|
000012  2807              CMP      r0,#7
000014  d116              BNE      |L2.68|
000016  e011              B        |L2.60|
                  |L2.24|
;;;467    	{
;;;468    
;;;469    			case 1: F = HtoEs_RC_Data_Generate();       senddataflag=1;break;  //测试RC通道，返回需发送字节数		 
000018  f7fffffe          BL       HtoEs_RC_Data_Generate
00001c  4912              LDR      r1,|L2.104|
00001e  6008              STR      r0,[r1,#0]  ; F
000020  2401              MOVS     r4,#1
000022  e010              B        |L2.70|
                  |L2.36|
;;;470          case 2: F = HtoEs_Attitude_Data_Generate(); senddataflag=1;break;  //测试姿态,返回需发送字节数	
000024  f7fffffe          BL       HtoEs_Attitude_Data_Generate
000028  490f              LDR      r1,|L2.104|
00002a  6008              STR      r0,[r1,#0]  ; F
00002c  2401              MOVS     r4,#1
00002e  e00a              B        |L2.70|
                  |L2.48|
;;;471    		  case 3: F = HtoEs_HUD_Data_Generate();      senddataflag=1;break;  //测试HUD显示，返回需发送字节数
000030  f7fffffe          BL       HtoEs_HUD_Data_Generate
000034  490c              LDR      r1,|L2.104|
000036  6008              STR      r0,[r1,#0]  ; F
000038  2401              MOVS     r4,#1
00003a  e004              B        |L2.70|
                  |L2.60|
;;;472    		  //case 4: F = HtoEs_MOTO_Data_Generate();     senddataflag=1;break;  //测试电机显示，返回需发送字节数
;;;473          //case 3: if(fg ==10 ) {F = HtoEs_PID_Data_Generate(); senddataflag=1;}
;;;474    //										if(fg<10 && fg >0){
;;;475    //											fg--; 
;;;476    //											F = HtoEs_PID_Data_Generate();       //测试PID参数，返回需发送字节数
;;;477    //											senddataflag=1;
;;;478    //										}break;
;;;479    			//case 4:F = HtoEs_Chart_Data_Generate(); senddataflag=1; break;  //测试独立通道,返回需发送字节数										
;;;480          //case 5: F = HtoEs_GPS_Data_Generate(); 		  break;     //测试GPS,返回需发送字节数
;;;481          //case 6: F = HtoEs_Senosrs_Data_Generate();  break;  //测试传感器标定，返回需发送字节数					
;;;482    			case 7: sw = 0; break;
00003c  2000              MOVS     r0,#0
00003e  4909              LDR      r1,|L2.100|
000040  6008              STR      r0,[r1,#0]  ; sw
000042  e000              B        |L2.70|
                  |L2.68|
;;;483    		  default: break;
000044  bf00              NOP      
                  |L2.70|
000046  bf00              NOP                            ;469
;;;484    	}
;;;485     
;;;486    	if(senddataflag==1){
000048  2c01              CMP      r4,#1
00004a  d105              BNE      |L2.88|
;;;487    		senddataflag=0;
00004c  2400              MOVS     r4,#0
;;;488    		//usb_SendDataToHost(&HtoEs_OutPut_Buffer[0], F);//USB虚拟串口发送数据，不需要时关了它	
;;;489    		Usart1_Send(&HtoEs_OutPut_Buffer[0] ,F);
00004e  4806              LDR      r0,|L2.104|
000050  7801              LDRB     r1,[r0,#0]  ; F
000052  4806              LDR      r0,|L2.108|
000054  f7fffffe          BL       Usart1_Send
                  |L2.88|
;;;490    	}
;;;491    	sw++;
000058  4802              LDR      r0,|L2.100|
00005a  6800              LDR      r0,[r0,#0]  ; sw
00005c  1c40              ADDS     r0,r0,#1
00005e  4901              LDR      r1,|L2.100|
000060  6008              STR      r0,[r1,#0]  ; sw
;;;492    }
000062  bd10              POP      {r4,pc}
;;;493    
                          ENDP

                  |L2.100|
                          DCD      ||sw||
                  |L2.104|
                          DCD      F
                  |L2.108|
                          DCD      HtoEs_OutPut_Buffer

                          AREA ||i.HtoEs_Attitude_Data_Generate||, CODE, READONLY, ALIGN=2

                  HtoEs_Attitude_Data_Generate PROC
;;;195    //生成姿态数据帧
;;;196    unsigned char HtoEs_Attitude_Data_Generate(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;197    {
;;;198    	  unsigned char i,Count=0;
000002  2400              MOVS     r4,#0
;;;199    	  vs16 _temp;
;;;200    	
;;;201    	  HtoEs_OutPut_Buffer[Count++] = 0xFE; //起始帧
000004  22fe              MOVS     r2,#0xfe
000006  4621              MOV      r1,r4
000008  1c64              ADDS     r4,r4,#1
00000a  4843              LDR      r0,|L3.280|
00000c  5442              STRB     r2,[r0,r1]
;;;202    	  HtoEs_OutPut_Buffer[Count++] = 0x0C; //帧长度
00000e  220c              MOVS     r2,#0xc
000010  4621              MOV      r1,r4
000012  1c64              ADDS     r4,r4,#1
000014  5442              STRB     r2,[r0,r1]
;;;203    		HtoEs_OutPut_Buffer[Count++] = 0x01; //功能码
000016  2201              MOVS     r2,#1
000018  4621              MOV      r1,r4
00001a  1c64              ADDS     r4,r4,#1
00001c  5442              STRB     r2,[r0,r1]
;;;204    
;;;205    		_temp = (int)(AngE.Roll*100);
00001e  493f              LDR      r1,|L3.284|
000020  6848              LDR      r0,[r1,#4]  ; AngE
000022  493f              LDR      r1,|L3.288|
000024  f7fffffe          BL       __aeabi_fmul
000028  4606              MOV      r6,r0
00002a  f7fffffe          BL       __aeabi_f2iz
00002e  b200              SXTH     r0,r0
000030  9000              STR      r0,[sp,#0]
;;;206    		HtoEs_OutPut_Buffer[Count++]=BYTE1(_temp);
000032  f89d2001          LDRB     r2,[sp,#1]
000036  4621              MOV      r1,r4
000038  1c64              ADDS     r4,r4,#1
00003a  4837              LDR      r0,|L3.280|
00003c  5442              STRB     r2,[r0,r1]
;;;207    		HtoEs_OutPut_Buffer[Count++]=BYTE0(_temp);
00003e  f89d2000          LDRB     r2,[sp,#0]
000042  4621              MOV      r1,r4
000044  1c64              ADDS     r4,r4,#1
000046  5442              STRB     r2,[r0,r1]
;;;208    		
;;;209    		_temp = (int)(-AngE.Pitch*100);
000048  4834              LDR      r0,|L3.284|
00004a  6800              LDR      r0,[r0,#0]  ; AngE
00004c  f0804700          EOR      r7,r0,#0x80000000
000050  4933              LDR      r1,|L3.288|
000052  4638              MOV      r0,r7
000054  f7fffffe          BL       __aeabi_fmul
000058  4606              MOV      r6,r0
00005a  f7fffffe          BL       __aeabi_f2iz
00005e  b200              SXTH     r0,r0
000060  9000              STR      r0,[sp,#0]
;;;210    		HtoEs_OutPut_Buffer[Count++]=BYTE1(_temp);
000062  f89d2001          LDRB     r2,[sp,#1]
000066  4621              MOV      r1,r4
000068  1c64              ADDS     r4,r4,#1
00006a  482b              LDR      r0,|L3.280|
00006c  5442              STRB     r2,[r0,r1]
;;;211    		HtoEs_OutPut_Buffer[Count++]=BYTE0(_temp);
00006e  f89d2000          LDRB     r2,[sp,#0]
000072  4621              MOV      r1,r4
000074  1c64              ADDS     r4,r4,#1
000076  5442              STRB     r2,[r0,r1]
;;;212    		
;;;213    		_temp = (int)(AngE.Yaw*100);
000078  4928              LDR      r1,|L3.284|
00007a  6888              LDR      r0,[r1,#8]  ; AngE
00007c  4928              LDR      r1,|L3.288|
00007e  f7fffffe          BL       __aeabi_fmul
000082  4606              MOV      r6,r0
000084  f7fffffe          BL       __aeabi_f2iz
000088  b200              SXTH     r0,r0
00008a  9000              STR      r0,[sp,#0]
;;;214    		HtoEs_OutPut_Buffer[Count++]=BYTE1(_temp);
00008c  f89d2001          LDRB     r2,[sp,#1]
000090  4620              MOV      r0,r4
000092  1c61              ADDS     r1,r4,#1
000094  b2cc              UXTB     r4,r1
000096  4920              LDR      r1,|L3.280|
000098  540a              STRB     r2,[r1,r0]
;;;215    		HtoEs_OutPut_Buffer[Count++]=BYTE0(_temp);
00009a  f89d2000          LDRB     r2,[sp,#0]
00009e  4620              MOV      r0,r4
0000a0  1c61              ADDS     r1,r4,#1
0000a2  b2cc              UXTB     r4,r1
0000a4  491c              LDR      r1,|L3.280|
0000a6  540a              STRB     r2,[r1,r0]
;;;216    		
;;;217    		_temp = (int)(ultra_dis_lpf/10*100);
0000a8  491e              LDR      r1,|L3.292|
0000aa  481f              LDR      r0,|L3.296|
0000ac  6800              LDR      r0,[r0,#0]  ; ultra_dis_lpf
0000ae  f7fffffe          BL       __aeabi_fdiv
0000b2  4607              MOV      r7,r0
0000b4  491a              LDR      r1,|L3.288|
0000b6  f7fffffe          BL       __aeabi_fmul
0000ba  4606              MOV      r6,r0
0000bc  f7fffffe          BL       __aeabi_f2iz
0000c0  b200              SXTH     r0,r0
0000c2  9000              STR      r0,[sp,#0]
;;;218    		HtoEs_OutPut_Buffer[Count++]=BYTE1(_temp);
0000c4  f89d2001          LDRB     r2,[sp,#1]
0000c8  4620              MOV      r0,r4
0000ca  1c61              ADDS     r1,r4,#1
0000cc  b2cc              UXTB     r4,r1
0000ce  4912              LDR      r1,|L3.280|
0000d0  540a              STRB     r2,[r1,r0]
;;;219    		HtoEs_OutPut_Buffer[Count++]=BYTE0(_temp);
0000d2  f89d2000          LDRB     r2,[sp,#0]
0000d6  4621              MOV      r1,r4
0000d8  1c60              ADDS     r0,r4,#1
0000da  b2c4              UXTB     r4,r0
0000dc  480e              LDR      r0,|L3.280|
0000de  5442              STRB     r2,[r0,r1]
;;;220    	  
;;;221    	//============================================================================	
;;;222    		
;;;223    		CHK_SUM =0; 
0000e0  2000              MOVS     r0,#0
0000e2  4912              LDR      r1,|L3.300|
0000e4  6008              STR      r0,[r1,#0]  ; CHK_SUM
;;;224    	
;;;225    	  for(i = 0 ; i < Count; i++)  //计算和
0000e6  2500              MOVS     r5,#0
0000e8  e008              B        |L3.252|
                  |L3.234|
;;;226    			CHK_SUM += HtoEs_OutPut_Buffer[i];
0000ea  480b              LDR      r0,|L3.280|
0000ec  5d40              LDRB     r0,[r0,r5]
0000ee  490f              LDR      r1,|L3.300|
0000f0  6809              LDR      r1,[r1,#0]  ; CHK_SUM
0000f2  4408              ADD      r0,r0,r1
0000f4  490d              LDR      r1,|L3.300|
0000f6  6008              STR      r0,[r1,#0]  ; CHK_SUM
0000f8  1c68              ADDS     r0,r5,#1              ;225
0000fa  b2c5              UXTB     r5,r0                 ;225
                  |L3.252|
0000fc  42a5              CMP      r5,r4                 ;225
0000fe  dbf4              BLT      |L3.234|
;;;227    		
;;;228    		HtoEs_OutPut_Buffer[Count++] = CHK_SUM % 2; //计算校验值
000100  480a              LDR      r0,|L3.300|
000102  7800              LDRB     r0,[r0,#0]  ; CHK_SUM
000104  f0000201          AND      r2,r0,#1
000108  4620              MOV      r0,r4
00010a  1c61              ADDS     r1,r4,#1
00010c  b2cc              UXTB     r4,r1
00010e  4902              LDR      r1,|L3.280|
000110  540a              STRB     r2,[r1,r0]
;;;229    		
;;;230    	  return Count; 
000112  4620              MOV      r0,r4
;;;231    }
000114  bdf8              POP      {r3-r7,pc}
;;;232    
                          ENDP

000116  0000              DCW      0x0000
                  |L3.280|
                          DCD      HtoEs_OutPut_Buffer
                  |L3.284|
                          DCD      AngE
                  |L3.288|
                          DCD      0x42c80000
                  |L3.292|
                          DCD      0x41200000
                  |L3.296|
                          DCD      ultra_dis_lpf
                  |L3.300|
                          DCD      CHK_SUM

                          AREA ||i.HtoEs_Chart_Data_Generate||, CODE, READONLY, ALIGN=2

                  HtoEs_Chart_Data_Generate PROC
;;;91     //生成独立通道数据帧
;;;92     unsigned char HtoEs_Chart_Data_Generate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;93     {
;;;94     	  unsigned char i;
;;;95     	
;;;96     	  HtoEs_OutPut_Buffer[0] = 0x3F; //帧长度 63字节
000002  203f              MOVS     r0,#0x3f
000004  496b              LDR      r1,|L4.436|
000006  7008              STRB     r0,[r1,#0]
;;;97     		HtoEs_OutPut_Buffer[1] = 0x01; //功能码
000008  2001              MOVS     r0,#1
00000a  7048              STRB     r0,[r1,#1]
;;;98     		
;;;99     	  CH1_data = (float)sensor.acc.origin.x/100;
00000c  496a              LDR      r1,|L4.440|
00000e  f9b10000          LDRSH    r0,[r1,#0]  ; sensor
000012  f7fffffe          BL       __aeabi_i2f
000016  4605              MOV      r5,r0
000018  4968              LDR      r1,|L4.444|
00001a  f7fffffe          BL       __aeabi_fdiv
00001e  4968              LDR      r1,|L4.448|
000020  6008              STR      r0,[r1,#0]  ; CH1_data
;;;100    	  CH2_data = (float)sensor.acc.origin.y/100;
000022  4965              LDR      r1,|L4.440|
000024  f9b10002          LDRSH    r0,[r1,#2]  ; sensor
000028  f7fffffe          BL       __aeabi_i2f
00002c  4605              MOV      r5,r0
00002e  4963              LDR      r1,|L4.444|
000030  f7fffffe          BL       __aeabi_fdiv
000034  4963              LDR      r1,|L4.452|
000036  6008              STR      r0,[r1,#0]  ; CH2_data
;;;101    	  CH3_data = (float)sensor.acc.origin.z/100;
000038  495f              LDR      r1,|L4.440|
00003a  f9b10004          LDRSH    r0,[r1,#4]  ; sensor
00003e  f7fffffe          BL       __aeabi_i2f
000042  4605              MOV      r5,r0
000044  495d              LDR      r1,|L4.444|
000046  f7fffffe          BL       __aeabi_fdiv
00004a  495f              LDR      r1,|L4.456|
00004c  6008              STR      r0,[r1,#0]  ; CH3_data
;;;102    	  CH4_data = (float)sensor.gyro.origin.x;
00004e  495a              LDR      r1,|L4.440|
000050  f9b10034          LDRSH    r0,[r1,#0x34]  ; sensor
000054  f7fffffe          BL       __aeabi_i2f
000058  495c              LDR      r1,|L4.460|
00005a  6008              STR      r0,[r1,#0]  ; CH4_data
;;;103    	  CH5_data = (float)sensor.gyro.origin.y;
00005c  4956              LDR      r1,|L4.440|
00005e  f9b10036          LDRSH    r0,[r1,#0x36]
000062  f7fffffe          BL       __aeabi_i2f
000066  495a              LDR      r1,|L4.464|
000068  6008              STR      r0,[r1,#0]  ; CH5_data
;;;104    	  CH6_data = (float)sensor.gyro.origin.z;
00006a  4953              LDR      r1,|L4.440|
00006c  f9b10038          LDRSH    r0,[r1,#0x38]
000070  f7fffffe          BL       __aeabi_i2f
000074  4957              LDR      r1,|L4.468|
000076  6008              STR      r0,[r1,#0]  ; CH6_data
;;;105    	  CH7_data = (float)Moto_duty[0];//
000078  4957              LDR      r1,|L4.472|
00007a  f9b10000          LDRSH    r0,[r1,#0]  ; Moto_duty
00007e  f7fffffe          BL       __aeabi_i2f
000082  4956              LDR      r1,|L4.476|
000084  6008              STR      r0,[r1,#0]  ; CH7_data
;;;106    	  CH8_data = (float)Moto_duty[1];//
000086  4954              LDR      r1,|L4.472|
000088  f9b10002          LDRSH    r0,[r1,#2]  ; Moto_duty
00008c  f7fffffe          BL       __aeabi_i2f
000090  4953              LDR      r1,|L4.480|
000092  6008              STR      r0,[r1,#0]  ; CH8_data
;;;107    	  CH9_data = (float)Moto_duty[2];//
000094  4950              LDR      r1,|L4.472|
000096  f9b10004          LDRSH    r0,[r1,#4]  ; Moto_duty
00009a  f7fffffe          BL       __aeabi_i2f
00009e  4951              LDR      r1,|L4.484|
0000a0  6008              STR      r0,[r1,#0]  ; CH9_data
;;;108    	  CH10_data = (float)Moto_duty[3];//
0000a2  494d              LDR      r1,|L4.472|
0000a4  f9b10006          LDRSH    r0,[r1,#6]  ; Moto_duty
0000a8  f7fffffe          BL       __aeabi_i2f
0000ac  494e              LDR      r1,|L4.488|
0000ae  6008              STR      r0,[r1,#0]  ; CH10_data
;;;109    	  CH11_data = (float)magdata[0];//
0000b0  494e              LDR      r1,|L4.492|
0000b2  f9b10000          LDRSH    r0,[r1,#0]  ; magdata
0000b6  f7fffffe          BL       __aeabi_i2f
0000ba  494d              LDR      r1,|L4.496|
0000bc  6008              STR      r0,[r1,#0]  ; CH11_data
;;;110    	  CH12_data = (float)magdata[1];//
0000be  494b              LDR      r1,|L4.492|
0000c0  f9b10002          LDRSH    r0,[r1,#2]  ; magdata
0000c4  f7fffffe          BL       __aeabi_i2f
0000c8  494a              LDR      r1,|L4.500|
0000ca  6008              STR      r0,[r1,#0]  ; CH12_data
;;;111    		CH13_data = (float)magdata[2];
0000cc  4947              LDR      r1,|L4.492|
0000ce  f9b10004          LDRSH    r0,[r1,#4]  ; magdata
0000d2  f7fffffe          BL       __aeabi_i2f
0000d6  4948              LDR      r1,|L4.504|
0000d8  6008              STR      r0,[r1,#0]  ; CH13_data
;;;112    		CH14_data = (float)baro_height;//
0000da  4848              LDR      r0,|L4.508|
0000dc  6800              LDR      r0,[r0,#0]  ; baro_height
0000de  4948              LDR      r1,|L4.512|
0000e0  6008              STR      r0,[r1,#0]  ; CH14_data
;;;113    		CH15_data = (float)ultra_dis_lpf;//
0000e2  4848              LDR      r0,|L4.516|
0000e4  6800              LDR      r0,[r0,#0]  ; ultra_dis_lpf
0000e6  4948              LDR      r1,|L4.520|
0000e8  6008              STR      r0,[r1,#0]  ; CH15_data
;;;114    	
;;;115    		Float2Byte(&CH1_data ,HtoEs_OutPut_Buffer,2);
0000ea  2202              MOVS     r2,#2
0000ec  4931              LDR      r1,|L4.436|
0000ee  4834              LDR      r0,|L4.448|
0000f0  f7fffffe          BL       Float2Byte
;;;116    		Float2Byte(&CH2_data ,HtoEs_OutPut_Buffer,6);
0000f4  2206              MOVS     r2,#6
0000f6  492f              LDR      r1,|L4.436|
0000f8  4832              LDR      r0,|L4.452|
0000fa  f7fffffe          BL       Float2Byte
;;;117    		Float2Byte(&CH3_data ,HtoEs_OutPut_Buffer,10);
0000fe  220a              MOVS     r2,#0xa
000100  492c              LDR      r1,|L4.436|
000102  4831              LDR      r0,|L4.456|
000104  f7fffffe          BL       Float2Byte
;;;118    		Float2Byte(&CH4_data ,HtoEs_OutPut_Buffer,14);
000108  220e              MOVS     r2,#0xe
00010a  492a              LDR      r1,|L4.436|
00010c  482f              LDR      r0,|L4.460|
00010e  f7fffffe          BL       Float2Byte
;;;119    		Float2Byte(&CH5_data ,HtoEs_OutPut_Buffer,18);
000112  2212              MOVS     r2,#0x12
000114  4927              LDR      r1,|L4.436|
000116  482e              LDR      r0,|L4.464|
000118  f7fffffe          BL       Float2Byte
;;;120    		Float2Byte(&CH6_data ,HtoEs_OutPut_Buffer,22);
00011c  2216              MOVS     r2,#0x16
00011e  4925              LDR      r1,|L4.436|
000120  482c              LDR      r0,|L4.468|
000122  f7fffffe          BL       Float2Byte
;;;121    		Float2Byte(&CH7_data ,HtoEs_OutPut_Buffer,26);
000126  221a              MOVS     r2,#0x1a
000128  4922              LDR      r1,|L4.436|
00012a  482c              LDR      r0,|L4.476|
00012c  f7fffffe          BL       Float2Byte
;;;122    		Float2Byte(&CH8_data ,HtoEs_OutPut_Buffer,30);
000130  221e              MOVS     r2,#0x1e
000132  4920              LDR      r1,|L4.436|
000134  482a              LDR      r0,|L4.480|
000136  f7fffffe          BL       Float2Byte
;;;123    		Float2Byte(&CH9_data ,HtoEs_OutPut_Buffer,34);
00013a  2222              MOVS     r2,#0x22
00013c  491d              LDR      r1,|L4.436|
00013e  4829              LDR      r0,|L4.484|
000140  f7fffffe          BL       Float2Byte
;;;124    		Float2Byte(&CH10_data,HtoEs_OutPut_Buffer,38);
000144  2226              MOVS     r2,#0x26
000146  491b              LDR      r1,|L4.436|
000148  4827              LDR      r0,|L4.488|
00014a  f7fffffe          BL       Float2Byte
;;;125    		Float2Byte(&CH11_data,HtoEs_OutPut_Buffer,42);
00014e  222a              MOVS     r2,#0x2a
000150  4918              LDR      r1,|L4.436|
000152  4827              LDR      r0,|L4.496|
000154  f7fffffe          BL       Float2Byte
;;;126    		Float2Byte(&CH12_data,HtoEs_OutPut_Buffer,46);
000158  222e              MOVS     r2,#0x2e
00015a  4916              LDR      r1,|L4.436|
00015c  4825              LDR      r0,|L4.500|
00015e  f7fffffe          BL       Float2Byte
;;;127    		Float2Byte(&CH13_data,HtoEs_OutPut_Buffer,50);
000162  2232              MOVS     r2,#0x32
000164  4913              LDR      r1,|L4.436|
000166  4824              LDR      r0,|L4.504|
000168  f7fffffe          BL       Float2Byte
;;;128    		Float2Byte(&CH14_data,HtoEs_OutPut_Buffer,54);
00016c  2236              MOVS     r2,#0x36
00016e  4911              LDR      r1,|L4.436|
000170  4823              LDR      r0,|L4.512|
000172  f7fffffe          BL       Float2Byte
;;;129    		Float2Byte(&CH15_data,HtoEs_OutPut_Buffer,58);
000176  223a              MOVS     r2,#0x3a
000178  490e              LDR      r1,|L4.436|
00017a  4823              LDR      r0,|L4.520|
00017c  f7fffffe          BL       Float2Byte
;;;130    		
;;;131    		CHK_SUM =0; 
000180  2000              MOVS     r0,#0
000182  4922              LDR      r1,|L4.524|
000184  6008              STR      r0,[r1,#0]  ; CHK_SUM
;;;132    	
;;;133    	  for(i = 0 ; i < 62; i++)  //计算和
000186  2400              MOVS     r4,#0
000188  e008              B        |L4.412|
                  |L4.394|
;;;134    			CHK_SUM += HtoEs_OutPut_Buffer[i];
00018a  480a              LDR      r0,|L4.436|
00018c  5d00              LDRB     r0,[r0,r4]
00018e  491f              LDR      r1,|L4.524|
000190  6809              LDR      r1,[r1,#0]  ; CHK_SUM
000192  4408              ADD      r0,r0,r1
000194  491d              LDR      r1,|L4.524|
000196  6008              STR      r0,[r1,#0]  ; CHK_SUM
000198  1c60              ADDS     r0,r4,#1              ;133
00019a  b2c4              UXTB     r4,r0                 ;133
                  |L4.412|
00019c  2c3e              CMP      r4,#0x3e              ;133
00019e  dbf4              BLT      |L4.394|
;;;135    		
;;;136    		HtoEs_OutPut_Buffer[62] = CHK_SUM % 2; //计算校验值
0001a0  481a              LDR      r0,|L4.524|
0001a2  7800              LDRB     r0,[r0,#0]  ; CHK_SUM
0001a4  f0000001          AND      r0,r0,#1
0001a8  4902              LDR      r1,|L4.436|
0001aa  f881003e          STRB     r0,[r1,#0x3e]
;;;137     
;;;138    	  return 63; 
0001ae  203f              MOVS     r0,#0x3f
;;;139    }
0001b0  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP

0001b2  0000              DCW      0x0000
                  |L4.436|
                          DCD      HtoEs_OutPut_Buffer
                  |L4.440|
                          DCD      sensor
                  |L4.444|
                          DCD      0x42c80000
                  |L4.448|
                          DCD      CH1_data
                  |L4.452|
                          DCD      CH2_data
                  |L4.456|
                          DCD      CH3_data
                  |L4.460|
                          DCD      CH4_data
                  |L4.464|
                          DCD      CH5_data
                  |L4.468|
                          DCD      CH6_data
                  |L4.472|
                          DCD      Moto_duty
                  |L4.476|
                          DCD      CH7_data
                  |L4.480|
                          DCD      CH8_data
                  |L4.484|
                          DCD      CH9_data
                  |L4.488|
                          DCD      CH10_data
                  |L4.492|
                          DCD      magdata
                  |L4.496|
                          DCD      CH11_data
                  |L4.500|
                          DCD      CH12_data
                  |L4.504|
                          DCD      CH13_data
                  |L4.508|
                          DCD      baro_height
                  |L4.512|
                          DCD      CH14_data
                  |L4.516|
                          DCD      ultra_dis_lpf
                  |L4.520|
                          DCD      CH15_data
                  |L4.524|
                          DCD      CHK_SUM

                          AREA ||i.HtoEs_GPS_Data_Generate||, CODE, READONLY, ALIGN=2

                  HtoEs_GPS_Data_Generate PROC
;;;141    //生成GPS数据帧
;;;142    unsigned char HtoEs_GPS_Data_Generate(void)
000000  b510              PUSH     {r4,lr}
;;;143    {
;;;144    	  unsigned char i;
;;;145    	
;;;146    	  HtoEs_OutPut_Buffer[0] = 0x1D; //帧长度 29字节
000002  201d              MOVS     r0,#0x1d
000004  4940              LDR      r1,|L5.264|
000006  7008              STRB     r0,[r1,#0]
;;;147    		HtoEs_OutPut_Buffer[1] = 0x02; //功能码
000008  2002              MOVS     r0,#2
00000a  7048              STRB     r0,[r1,#1]
;;;148    	
;;;149    	  Float2Byte(&Longitude_val ,HtoEs_OutPut_Buffer,2);  //经度
00000c  2202              MOVS     r2,#2
00000e  483f              LDR      r0,|L5.268|
000010  f7fffffe          BL       Float2Byte
;;;150    	  Float2Byte(&Latitude_Val  ,HtoEs_OutPut_Buffer,6);  //纬度
000014  2206              MOVS     r2,#6
000016  493c              LDR      r1,|L5.264|
000018  483d              LDR      r0,|L5.272|
00001a  f7fffffe          BL       Float2Byte
;;;151    	  Float2Byte(&Altitude_Val  ,HtoEs_OutPut_Buffer,10); //高度
00001e  220a              MOVS     r2,#0xa
000020  4939              LDR      r1,|L5.264|
000022  483c              LDR      r0,|L5.276|
000024  f7fffffe          BL       Float2Byte
;;;152    	  Float2Byte(&Dir_Val ,HtoEs_OutPut_Buffer,14);       //方位角
000028  220e              MOVS     r2,#0xe
00002a  4937              LDR      r1,|L5.264|
00002c  483a              LDR      r0,|L5.280|
00002e  f7fffffe          BL       Float2Byte
;;;153    	  Float2Byte(&SPD_Val ,HtoEs_OutPut_Buffer,18);       //速度
000032  2212              MOVS     r2,#0x12
000034  4934              LDR      r1,|L5.264|
000036  4839              LDR      r0,|L5.284|
000038  f7fffffe          BL       Float2Byte
;;;154    	
;;;155    	  HtoEs_OutPut_Buffer[22] = (Voltage_Val & 0xFF00) >> 8 ; //取高8位
00003c  4838              LDR      r0,|L5.288|
00003e  8800              LDRH     r0,[r0,#0]  ; Voltage_Val
000040  0a00              LSRS     r0,r0,#8
000042  4931              LDR      r1,|L5.264|
000044  7588              STRB     r0,[r1,#0x16]
;;;156    	  HtoEs_OutPut_Buffer[23] = (Voltage_Val & 0x00FF) ;      //取低8位
000046  4836              LDR      r0,|L5.288|
000048  7800              LDRB     r0,[r0,#0]  ; Voltage_Val
00004a  75c8              STRB     r0,[r1,#0x17]
;;;157    	
;;;158    	  HtoEs_OutPut_Buffer[24] = (Temperture_Val & 0xFF00) >> 8 ; //取高8位
00004c  4835              LDR      r0,|L5.292|
00004e  8800              LDRH     r0,[r0,#0]  ; Temperture_Val
000050  0a00              LSRS     r0,r0,#8
000052  7608              STRB     r0,[r1,#0x18]
;;;159    	  HtoEs_OutPut_Buffer[25] = (Temperture_Val & 0x00FF) ;      //取低8位
000054  4833              LDR      r0,|L5.292|
000056  7800              LDRB     r0,[r0,#0]  ; Temperture_Val
000058  7648              STRB     r0,[r1,#0x19]
;;;160    	
;;;161    	  HtoEs_OutPut_Buffer[26] = Satellite_Val; //卫星个数
00005a  4833              LDR      r0,|L5.296|
00005c  7800              LDRB     r0,[r0,#0]  ; Satellite_Val
00005e  7688              STRB     r0,[r1,#0x1a]
;;;162    	
;;;163    	//============================================================================
;;;164    	  
;;;165    		HtoEs_OutPut_Buffer[27] = 0; //先将状态标识清除
000060  2000              MOVS     r0,#0
000062  76c8              STRB     r0,[r1,#0x1b]
;;;166    		
;;;167    		if( Location_Sta ) //定位模式
000064  4831              LDR      r0,|L5.300|
000066  7800              LDRB     r0,[r0,#0]  ; Location_Sta
000068  b128              CBZ      r0,|L5.118|
;;;168    			HtoEs_OutPut_Buffer[27] |= 0x01; //置高
00006a  4608              MOV      r0,r1
00006c  7ec0              LDRB     r0,[r0,#0x1b]  ; HtoEs_OutPut_Buffer
00006e  f0400001          ORR      r0,r0,#1
000072  76c8              STRB     r0,[r1,#0x1b]
000074  e005              B        |L5.130|
                  |L5.118|
;;;169    		else               //导航模式
;;;170    			HtoEs_OutPut_Buffer[27] &= 0xFE; //清零
000076  4824              LDR      r0,|L5.264|
000078  7ec0              LDRB     r0,[r0,#0x1b]  ; HtoEs_OutPut_Buffer
00007a  f00000fe          AND      r0,r0,#0xfe
00007e  4922              LDR      r1,|L5.264|
000080  76c8              STRB     r0,[r1,#0x1b]
                  |L5.130|
;;;171    		
;;;172    		
;;;173    		if( Longitude_WE == 'W' )  //经度方向
000082  482b              LDR      r0,|L5.304|
000084  7800              LDRB     r0,[r0,#0]  ; Longitude_WE
000086  2857              CMP      r0,#0x57
000088  d106              BNE      |L5.152|
;;;174    			HtoEs_OutPut_Buffer[27] |= 0x02;  //W,西经
00008a  481f              LDR      r0,|L5.264|
00008c  7ec0              LDRB     r0,[r0,#0x1b]  ; HtoEs_OutPut_Buffer
00008e  f0400002          ORR      r0,r0,#2
000092  491d              LDR      r1,|L5.264|
000094  76c8              STRB     r0,[r1,#0x1b]
000096  e009              B        |L5.172|
                  |L5.152|
;;;175    		else if( Longitude_WE == 'E' ) 
000098  4825              LDR      r0,|L5.304|
00009a  7800              LDRB     r0,[r0,#0]  ; Longitude_WE
00009c  2845              CMP      r0,#0x45
00009e  d105              BNE      |L5.172|
;;;176    			HtoEs_OutPut_Buffer[27] &= 0xFD;  //E,东经
0000a0  4819              LDR      r0,|L5.264|
0000a2  7ec0              LDRB     r0,[r0,#0x1b]  ; HtoEs_OutPut_Buffer
0000a4  f00000fd          AND      r0,r0,#0xfd
0000a8  4917              LDR      r1,|L5.264|
0000aa  76c8              STRB     r0,[r1,#0x1b]
                  |L5.172|
;;;177     
;;;178    		if( Latitude_NS == 'N' )  //纬度方向
0000ac  4821              LDR      r0,|L5.308|
0000ae  7800              LDRB     r0,[r0,#0]  ; Latitude_NS
0000b0  284e              CMP      r0,#0x4e
0000b2  d106              BNE      |L5.194|
;;;179    			HtoEs_OutPut_Buffer[27] |= 0x04;  //N,北纬
0000b4  4814              LDR      r0,|L5.264|
0000b6  7ec0              LDRB     r0,[r0,#0x1b]  ; HtoEs_OutPut_Buffer
0000b8  f0400004          ORR      r0,r0,#4
0000bc  4912              LDR      r1,|L5.264|
0000be  76c8              STRB     r0,[r1,#0x1b]
0000c0  e009              B        |L5.214|
                  |L5.194|
;;;180    		else if( Latitude_NS == 'S' ) 
0000c2  481c              LDR      r0,|L5.308|
0000c4  7800              LDRB     r0,[r0,#0]  ; Latitude_NS
0000c6  2853              CMP      r0,#0x53
0000c8  d105              BNE      |L5.214|
;;;181    			HtoEs_OutPut_Buffer[27] &= 0xFB;  //S,南纬
0000ca  480f              LDR      r0,|L5.264|
0000cc  7ec0              LDRB     r0,[r0,#0x1b]  ; HtoEs_OutPut_Buffer
0000ce  f00000fb          AND      r0,r0,#0xfb
0000d2  490d              LDR      r1,|L5.264|
0000d4  76c8              STRB     r0,[r1,#0x1b]
                  |L5.214|
;;;182    		
;;;183    	//============================================================================	
;;;184    		
;;;185    		CHK_SUM =0; 
0000d6  2000              MOVS     r0,#0
0000d8  4917              LDR      r1,|L5.312|
0000da  6008              STR      r0,[r1,#0]  ; CHK_SUM
;;;186    	
;;;187    	  for(i = 0 ; i < 28; i++)  //计算和
0000dc  2400              MOVS     r4,#0
0000de  e008              B        |L5.242|
                  |L5.224|
;;;188    			CHK_SUM += HtoEs_OutPut_Buffer[i];
0000e0  4809              LDR      r0,|L5.264|
0000e2  5d00              LDRB     r0,[r0,r4]
0000e4  4914              LDR      r1,|L5.312|
0000e6  6809              LDR      r1,[r1,#0]  ; CHK_SUM
0000e8  4408              ADD      r0,r0,r1
0000ea  4913              LDR      r1,|L5.312|
0000ec  6008              STR      r0,[r1,#0]  ; CHK_SUM
0000ee  1c60              ADDS     r0,r4,#1              ;187
0000f0  b2c4              UXTB     r4,r0                 ;187
                  |L5.242|
0000f2  2c1c              CMP      r4,#0x1c              ;187
0000f4  dbf4              BLT      |L5.224|
;;;189    		
;;;190    		HtoEs_OutPut_Buffer[28] = CHK_SUM % 2; //计算校验值
0000f6  4810              LDR      r0,|L5.312|
0000f8  7800              LDRB     r0,[r0,#0]  ; CHK_SUM
0000fa  f0000001          AND      r0,r0,#1
0000fe  4902              LDR      r1,|L5.264|
000100  7708              STRB     r0,[r1,#0x1c]
;;;191    	
;;;192    	  return 29; 
000102  201d              MOVS     r0,#0x1d
;;;193    }
000104  bd10              POP      {r4,pc}
;;;194    
                          ENDP

000106  0000              DCW      0x0000
                  |L5.264|
                          DCD      HtoEs_OutPut_Buffer
                  |L5.268|
                          DCD      Longitude_val
                  |L5.272|
                          DCD      Latitude_Val
                  |L5.276|
                          DCD      Altitude_Val
                  |L5.280|
                          DCD      Dir_Val
                  |L5.284|
                          DCD      SPD_Val
                  |L5.288|
                          DCD      Voltage_Val
                  |L5.292|
                          DCD      Temperture_Val
                  |L5.296|
                          DCD      Satellite_Val
                  |L5.300|
                          DCD      Location_Sta
                  |L5.304|
                          DCD      Longitude_WE
                  |L5.308|
                          DCD      Latitude_NS
                  |L5.312|
                          DCD      CHK_SUM

                          AREA ||i.HtoEs_HUD_Data_Generate||, CODE, READONLY, ALIGN=2

                  HtoEs_HUD_Data_Generate PROC
;;;233    //生成HUD显示数据帧
;;;234    unsigned char HtoEs_HUD_Data_Generate(void)
000000  b518              PUSH     {r3,r4,lr}
;;;235    {
;;;236    	  unsigned char i,Count=0;
000002  2000              MOVS     r0,#0
;;;237    		vs16 _temp;
;;;238    	
;;;239    	  HtoEs_OutPut_Buffer[Count++] = 0xFE; //起始帧
000004  24fe              MOVS     r4,#0xfe
000006  4603              MOV      r3,r0
000008  1c40              ADDS     r0,r0,#1
00000a  4a29              LDR      r2,|L6.176|
00000c  54d4              STRB     r4,[r2,r3]
;;;240    	  HtoEs_OutPut_Buffer[Count++] = 0x0B; //帧长度
00000e  240b              MOVS     r4,#0xb
000010  4603              MOV      r3,r0
000012  1c40              ADDS     r0,r0,#1
000014  54d4              STRB     r4,[r2,r3]
;;;241    		HtoEs_OutPut_Buffer[Count++] = 0x02; //功能码
000016  2402              MOVS     r4,#2
000018  4603              MOV      r3,r0
00001a  1c40              ADDS     r0,r0,#1
00001c  54d4              STRB     r4,[r2,r3]
;;;242    
;;;243    		HtoEs_OutPut_Buffer[Count++]=flag.HUDMode;
00001e  4a25              LDR      r2,|L6.180|
000020  7d14              LDRB     r4,[r2,#0x14]  ; flag
000022  4603              MOV      r3,r0
000024  1c40              ADDS     r0,r0,#1
000026  4a22              LDR      r2,|L6.176|
000028  54d4              STRB     r4,[r2,r3]
;;;244    		HtoEs_OutPut_Buffer[Count++]=flag.ARMED;
00002a  4a22              LDR      r2,|L6.180|
00002c  7954              LDRB     r4,[r2,#5]  ; flag
00002e  4603              MOV      r3,r0
000030  1c40              ADDS     r0,r0,#1
000032  4a1f              LDR      r2,|L6.176|
000034  54d4              STRB     r4,[r2,r3]
;;;245    		HtoEs_OutPut_Buffer[Count++]=0x01;//flag.ControlMode;
000036  2401              MOVS     r4,#1
000038  4603              MOV      r3,r0
00003a  1c40              ADDS     r0,r0,#1
00003c  54d4              STRB     r4,[r2,r3]
;;;246    		
;;;247    		_temp = (unsigned int)(0*100);
00003e  2200              MOVS     r2,#0
000040  9200              STR      r2,[sp,#0]
;;;248    		HtoEs_OutPut_Buffer[Count++]=BYTE1(_temp);
000042  f89d4001          LDRB     r4,[sp,#1]
000046  4603              MOV      r3,r0
000048  1c40              ADDS     r0,r0,#1
00004a  4a19              LDR      r2,|L6.176|
00004c  54d4              STRB     r4,[r2,r3]
;;;249    		HtoEs_OutPut_Buffer[Count++]=BYTE0(_temp);
00004e  f89d4000          LDRB     r4,[sp,#0]
000052  4602              MOV      r2,r0
000054  1c43              ADDS     r3,r0,#1
000056  b2d8              UXTB     r0,r3
000058  4b15              LDR      r3,|L6.176|
00005a  549c              STRB     r4,[r3,r2]
;;;250    		
;;;251    		_temp = (unsigned int)(0*100);
00005c  2200              MOVS     r2,#0
00005e  9200              STR      r2,[sp,#0]
;;;252    		HtoEs_OutPut_Buffer[Count++]=BYTE1(_temp);
000060  f89d4001          LDRB     r4,[sp,#1]
000064  4602              MOV      r2,r0
000066  1c43              ADDS     r3,r0,#1
000068  b2d8              UXTB     r0,r3
00006a  4b11              LDR      r3,|L6.176|
00006c  549c              STRB     r4,[r3,r2]
;;;253    		HtoEs_OutPut_Buffer[Count++]=BYTE0(_temp);
00006e  f89d4000          LDRB     r4,[sp,#0]
000072  4602              MOV      r2,r0
000074  1c43              ADDS     r3,r0,#1
000076  b2d8              UXTB     r0,r3
000078  4b0d              LDR      r3,|L6.176|
00007a  549c              STRB     r4,[r3,r2]
;;;254    	  
;;;255    	//============================================================================	
;;;256    		
;;;257    		CHK_SUM =0; 
00007c  2200              MOVS     r2,#0
00007e  4b0e              LDR      r3,|L6.184|
000080  601a              STR      r2,[r3,#0]  ; CHK_SUM
;;;258    	
;;;259    	  for(i = 0 ; i < Count; i++)  //计算和
000082  2100              MOVS     r1,#0
000084  e008              B        |L6.152|
                  |L6.134|
;;;260    			CHK_SUM += HtoEs_OutPut_Buffer[i];
000086  4a0a              LDR      r2,|L6.176|
000088  5c52              LDRB     r2,[r2,r1]
00008a  4b0b              LDR      r3,|L6.184|
00008c  681b              LDR      r3,[r3,#0]  ; CHK_SUM
00008e  441a              ADD      r2,r2,r3
000090  4b09              LDR      r3,|L6.184|
000092  601a              STR      r2,[r3,#0]  ; CHK_SUM
000094  1c4a              ADDS     r2,r1,#1              ;259
000096  b2d1              UXTB     r1,r2                 ;259
                  |L6.152|
000098  4281              CMP      r1,r0                 ;259
00009a  dbf4              BLT      |L6.134|
;;;261    		
;;;262    		HtoEs_OutPut_Buffer[Count++] = CHK_SUM % 2; //计算校验值
00009c  4a06              LDR      r2,|L6.184|
00009e  7812              LDRB     r2,[r2,#0]  ; CHK_SUM
0000a0  f0020401          AND      r4,r2,#1
0000a4  4602              MOV      r2,r0
0000a6  1c43              ADDS     r3,r0,#1
0000a8  b2d8              UXTB     r0,r3
0000aa  4b01              LDR      r3,|L6.176|
0000ac  549c              STRB     r4,[r3,r2]
;;;263    		
;;;264    	  return Count; 
;;;265    }
0000ae  bd18              POP      {r3,r4,pc}
;;;266    
                          ENDP

                  |L6.176|
                          DCD      HtoEs_OutPut_Buffer
                  |L6.180|
                          DCD      flag
                  |L6.184|
                          DCD      CHK_SUM

                          AREA ||i.HtoEs_MOTO_Data_Generate||, CODE, READONLY, ALIGN=2

                  HtoEs_MOTO_Data_Generate PROC
;;;318    //生成电机通道数据帧
;;;319    unsigned char HtoEs_MOTO_Data_Generate(void)
000000  b510              PUSH     {r4,lr}
;;;320    {
;;;321    	  unsigned char i,Count=0;
000002  2000              MOVS     r0,#0
;;;322    	
;;;323    	  HtoEs_OutPut_Buffer[Count++] = 0xFE; //起始帧
000004  24fe              MOVS     r4,#0xfe
000006  4603              MOV      r3,r0
000008  1c40              ADDS     r0,r0,#1
00000a  4a40              LDR      r2,|L7.268|
00000c  54d4              STRB     r4,[r2,r3]
;;;324    	  HtoEs_OutPut_Buffer[Count++] = 0x14; //帧长度
00000e  2414              MOVS     r4,#0x14
000010  4603              MOV      r3,r0
000012  1c40              ADDS     r0,r0,#1
000014  54d4              STRB     r4,[r2,r3]
;;;325    		HtoEs_OutPut_Buffer[Count++] = 0x06; //功能码
000016  2406              MOVS     r4,#6
000018  4603              MOV      r3,r0
00001a  1c40              ADDS     r0,r0,#1
00001c  54d4              STRB     r4,[r2,r3]
;;;326    	 
;;;327    	  HtoEs_OutPut_Buffer[Count++] = BYTE1(Moto_duty[0]); //取高8位
00001e  4a3c              LDR      r2,|L7.272|
000020  7854              LDRB     r4,[r2,#1]  ; Moto_duty
000022  4603              MOV      r3,r0
000024  1c40              ADDS     r0,r0,#1
000026  4a39              LDR      r2,|L7.268|
000028  54d4              STRB     r4,[r2,r3]
;;;328    	  HtoEs_OutPut_Buffer[Count++] = BYTE0(Moto_duty[0]); //取低8位
00002a  4a39              LDR      r2,|L7.272|
00002c  7814              LDRB     r4,[r2,#0]  ; Moto_duty
00002e  4603              MOV      r3,r0
000030  1c40              ADDS     r0,r0,#1
000032  4a36              LDR      r2,|L7.268|
000034  54d4              STRB     r4,[r2,r3]
;;;329    	
;;;330    	  HtoEs_OutPut_Buffer[Count++] = BYTE1(Moto_duty[1]); //取高8位
000036  4a36              LDR      r2,|L7.272|
000038  78d4              LDRB     r4,[r2,#3]
00003a  4603              MOV      r3,r0
00003c  1c40              ADDS     r0,r0,#1
00003e  4a33              LDR      r2,|L7.268|
000040  54d4              STRB     r4,[r2,r3]
;;;331    	  HtoEs_OutPut_Buffer[Count++] = BYTE0(Moto_duty[1]); //取低8位
000042  4a33              LDR      r2,|L7.272|
000044  7894              LDRB     r4,[r2,#2]  ; Moto_duty
000046  4603              MOV      r3,r0
000048  1c40              ADDS     r0,r0,#1
00004a  4a30              LDR      r2,|L7.268|
00004c  54d4              STRB     r4,[r2,r3]
;;;332    	
;;;333    	  HtoEs_OutPut_Buffer[Count++] = BYTE1(Moto_duty[2]); //取高8位
00004e  4a30              LDR      r2,|L7.272|
000050  7954              LDRB     r4,[r2,#5]
000052  4602              MOV      r2,r0
000054  1c43              ADDS     r3,r0,#1
000056  b2d8              UXTB     r0,r3
000058  4b2c              LDR      r3,|L7.268|
00005a  549c              STRB     r4,[r3,r2]
;;;334    	  HtoEs_OutPut_Buffer[Count++] = BYTE0(Moto_duty[2]); //取低8位
00005c  4a2c              LDR      r2,|L7.272|
00005e  7914              LDRB     r4,[r2,#4]  ; Moto_duty
000060  4602              MOV      r2,r0
000062  1c43              ADDS     r3,r0,#1
000064  b2d8              UXTB     r0,r3
000066  4b29              LDR      r3,|L7.268|
000068  549c              STRB     r4,[r3,r2]
;;;335    	
;;;336    	  HtoEs_OutPut_Buffer[Count++] = BYTE1(Moto_duty[3]); //取高8位
00006a  4a29              LDR      r2,|L7.272|
00006c  79d4              LDRB     r4,[r2,#7]
00006e  4602              MOV      r2,r0
000070  1c43              ADDS     r3,r0,#1
000072  b2d8              UXTB     r0,r3
000074  4b25              LDR      r3,|L7.268|
000076  549c              STRB     r4,[r3,r2]
;;;337    	  HtoEs_OutPut_Buffer[Count++] = BYTE0(Moto_duty[3]); //取低8位
000078  4a25              LDR      r2,|L7.272|
00007a  7994              LDRB     r4,[r2,#6]  ; Moto_duty
00007c  4602              MOV      r2,r0
00007e  1c43              ADDS     r3,r0,#1
000080  b2d8              UXTB     r0,r3
000082  4b22              LDR      r3,|L7.268|
000084  549c              STRB     r4,[r3,r2]
;;;338    	
;;;339    	  HtoEs_OutPut_Buffer[Count++] = 0; //取高8位
000086  2400              MOVS     r4,#0
000088  4602              MOV      r2,r0
00008a  1c43              ADDS     r3,r0,#1
00008c  b2d8              UXTB     r0,r3
00008e  4b1f              LDR      r3,|L7.268|
000090  549c              STRB     r4,[r3,r2]
;;;340    	  HtoEs_OutPut_Buffer[Count++] = 0; //取低8位
000092  4602              MOV      r2,r0
000094  1c43              ADDS     r3,r0,#1
000096  b2d8              UXTB     r0,r3
000098  4b1c              LDR      r3,|L7.268|
00009a  549c              STRB     r4,[r3,r2]
;;;341    	
;;;342    	  HtoEs_OutPut_Buffer[Count++] = 0; //取高8位
00009c  4602              MOV      r2,r0
00009e  1c43              ADDS     r3,r0,#1
0000a0  b2d8              UXTB     r0,r3
0000a2  4b1a              LDR      r3,|L7.268|
0000a4  549c              STRB     r4,[r3,r2]
;;;343    	  HtoEs_OutPut_Buffer[Count++] = 0; //取低8位
0000a6  4602              MOV      r2,r0
0000a8  1c43              ADDS     r3,r0,#1
0000aa  b2d8              UXTB     r0,r3
0000ac  4b17              LDR      r3,|L7.268|
0000ae  549c              STRB     r4,[r3,r2]
;;;344    	
;;;345    		HtoEs_OutPut_Buffer[Count++] = 0; //取高8位
0000b0  4602              MOV      r2,r0
0000b2  1c43              ADDS     r3,r0,#1
0000b4  b2d8              UXTB     r0,r3
0000b6  4b15              LDR      r3,|L7.268|
0000b8  549c              STRB     r4,[r3,r2]
;;;346    	  HtoEs_OutPut_Buffer[Count++] = 0; //取低8位
0000ba  4602              MOV      r2,r0
0000bc  1c43              ADDS     r3,r0,#1
0000be  b2d8              UXTB     r0,r3
0000c0  4b12              LDR      r3,|L7.268|
0000c2  549c              STRB     r4,[r3,r2]
;;;347    		
;;;348    		HtoEs_OutPut_Buffer[Count++] = 0; //取高8位
0000c4  4602              MOV      r2,r0
0000c6  1c43              ADDS     r3,r0,#1
0000c8  b2d8              UXTB     r0,r3
0000ca  4b10              LDR      r3,|L7.268|
0000cc  549c              STRB     r4,[r3,r2]
;;;349    	  HtoEs_OutPut_Buffer[Count++] = 0; //取低8位
0000ce  4602              MOV      r2,r0
0000d0  1c43              ADDS     r3,r0,#1
0000d2  b2d8              UXTB     r0,r3
0000d4  4b0d              LDR      r3,|L7.268|
0000d6  549c              STRB     r4,[r3,r2]
;;;350    	 
;;;351    	//============================================================================	
;;;352    		
;;;353    		CHK_SUM =0; 
0000d8  2200              MOVS     r2,#0
0000da  4b0e              LDR      r3,|L7.276|
0000dc  601a              STR      r2,[r3,#0]  ; CHK_SUM
;;;354    	
;;;355    	  for(i = 0 ; i < Count; i++)  //计算和
0000de  2100              MOVS     r1,#0
0000e0  e008              B        |L7.244|
                  |L7.226|
;;;356    			CHK_SUM += HtoEs_OutPut_Buffer[i];
0000e2  4a0a              LDR      r2,|L7.268|
0000e4  5c52              LDRB     r2,[r2,r1]
0000e6  4b0b              LDR      r3,|L7.276|
0000e8  681b              LDR      r3,[r3,#0]  ; CHK_SUM
0000ea  441a              ADD      r2,r2,r3
0000ec  4b09              LDR      r3,|L7.276|
0000ee  601a              STR      r2,[r3,#0]  ; CHK_SUM
0000f0  1c4a              ADDS     r2,r1,#1              ;355
0000f2  b2d1              UXTB     r1,r2                 ;355
                  |L7.244|
0000f4  4281              CMP      r1,r0                 ;355
0000f6  dbf4              BLT      |L7.226|
;;;357    		
;;;358    		HtoEs_OutPut_Buffer[Count++] = CHK_SUM % 2; //计算校验值
0000f8  4a06              LDR      r2,|L7.276|
0000fa  7812              LDRB     r2,[r2,#0]  ; CHK_SUM
0000fc  f0020401          AND      r4,r2,#1
000100  4602              MOV      r2,r0
000102  1c43              ADDS     r3,r0,#1
000104  b2d8              UXTB     r0,r3
000106  4b01              LDR      r3,|L7.268|
000108  549c              STRB     r4,[r3,r2]
;;;359    	
;;;360    	  return Count; 
;;;361    }
00010a  bd10              POP      {r4,pc}
;;;362    
                          ENDP

                  |L7.268|
                          DCD      HtoEs_OutPut_Buffer
                  |L7.272|
                          DCD      Moto_duty
                  |L7.276|
                          DCD      CHK_SUM

                          AREA ||i.HtoEs_PID_Data_Generate||, CODE, READONLY, ALIGN=2

                  HtoEs_PID_Data_Generate PROC
;;;363    //生成PID数据帧
;;;364    unsigned char HtoEs_PID_Data_Generate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;365    {
;;;366    	  unsigned char i;
;;;367    	
;;;368    	  Pitch_PID_P = ctrl.pitch.core.kp * 100;
000002  4981              LDR      r1,|L8.520|
000004  6a88              LDR      r0,[r1,#0x28]
000006  4981              LDR      r1,|L8.524|
000008  f7fffffe          BL       __aeabi_fmul
00000c  4605              MOV      r5,r0
00000e  f7fffffe          BL       __aeabi_f2iz
000012  497f              LDR      r1,|L8.528|
000014  6008              STR      r0,[r1,#0]  ; Pitch_PID_P
;;;369    	  Pitch_PID_I = ctrl.pitch.core.ki * 1000;
000016  497c              LDR      r1,|L8.520|
000018  6ac8              LDR      r0,[r1,#0x2c]
00001a  497e              LDR      r1,|L8.532|
00001c  f7fffffe          BL       __aeabi_fmul
000020  4605              MOV      r5,r0
000022  f7fffffe          BL       __aeabi_f2iz
000026  497c              LDR      r1,|L8.536|
000028  6008              STR      r0,[r1,#0]  ; Pitch_PID_I
;;;370    	  Pitch_PID_D = ctrl.pitch.core.kd * 100;
00002a  4977              LDR      r1,|L8.520|
00002c  6b08              LDR      r0,[r1,#0x30]
00002e  4977              LDR      r1,|L8.524|
000030  f7fffffe          BL       __aeabi_fmul
000034  4605              MOV      r5,r0
000036  f7fffffe          BL       __aeabi_f2iz
00003a  4978              LDR      r1,|L8.540|
00003c  6008              STR      r0,[r1,#0]  ; Pitch_PID_D
;;;371    	  Roll_PID_P  = ctrl.roll.core.kp * 100;
00003e  4972              LDR      r1,|L8.520|
000040  6f08              LDR      r0,[r1,#0x70]
000042  4972              LDR      r1,|L8.524|
000044  f7fffffe          BL       __aeabi_fmul
000048  4605              MOV      r5,r0
00004a  f7fffffe          BL       __aeabi_f2iz
00004e  4974              LDR      r1,|L8.544|
000050  6008              STR      r0,[r1,#0]  ; Roll_PID_P
;;;372    	  Roll_PID_I  = ctrl.roll.core.ki * 1000;
000052  496d              LDR      r1,|L8.520|
000054  6f48              LDR      r0,[r1,#0x74]
000056  496f              LDR      r1,|L8.532|
000058  f7fffffe          BL       __aeabi_fmul
00005c  4605              MOV      r5,r0
00005e  f7fffffe          BL       __aeabi_f2iz
000062  4970              LDR      r1,|L8.548|
000064  6008              STR      r0,[r1,#0]  ; Roll_PID_I
;;;373    	  Roll_PID_D  = ctrl.roll.core.kd * 100;
000066  4968              LDR      r1,|L8.520|
000068  6f88              LDR      r0,[r1,#0x78]
00006a  4968              LDR      r1,|L8.524|
00006c  f7fffffe          BL       __aeabi_fmul
000070  4605              MOV      r5,r0
000072  f7fffffe          BL       __aeabi_f2iz
000076  496c              LDR      r1,|L8.552|
000078  6008              STR      r0,[r1,#0]  ; Roll_PID_D
;;;374    	  Yaw_PID_P   = ctrl.yaw.core.kp * 100;
00007a  4963              LDR      r1,|L8.520|
00007c  f8d100b8          LDR      r0,[r1,#0xb8]
000080  4962              LDR      r1,|L8.524|
000082  f7fffffe          BL       __aeabi_fmul
000086  4605              MOV      r5,r0
000088  f7fffffe          BL       __aeabi_f2iz
00008c  4967              LDR      r1,|L8.556|
00008e  6008              STR      r0,[r1,#0]  ; Yaw_PID_P
;;;375    	  Yaw_PID_I   = ctrl.yaw.core.ki * 1000;
000090  495d              LDR      r1,|L8.520|
000092  f8d100bc          LDR      r0,[r1,#0xbc]
000096  495f              LDR      r1,|L8.532|
000098  f7fffffe          BL       __aeabi_fmul
00009c  4605              MOV      r5,r0
00009e  f7fffffe          BL       __aeabi_f2iz
0000a2  4963              LDR      r1,|L8.560|
0000a4  6008              STR      r0,[r1,#0]  ; Yaw_PID_I
;;;376    	  Yaw_PID_D   = ctrl.yaw.core.kd * 100;
0000a6  4958              LDR      r1,|L8.520|
0000a8  f8d100c0          LDR      r0,[r1,#0xc0]
0000ac  4957              LDR      r1,|L8.524|
0000ae  f7fffffe          BL       __aeabi_fmul
0000b2  4605              MOV      r5,r0
0000b4  f7fffffe          BL       __aeabi_f2iz
0000b8  495e              LDR      r1,|L8.564|
0000ba  6008              STR      r0,[r1,#0]  ; Yaw_PID_D
;;;377    	  Alt_PID_P   = baro_wz_speed_pid.kp*100;
0000bc  495e              LDR      r1,|L8.568|
0000be  6808              LDR      r0,[r1,#0]  ; baro_wz_speed_pid
0000c0  4952              LDR      r1,|L8.524|
0000c2  f7fffffe          BL       __aeabi_fmul
0000c6  4605              MOV      r5,r0
0000c8  f7fffffe          BL       __aeabi_f2iz
0000cc  495b              LDR      r1,|L8.572|
0000ce  6008              STR      r0,[r1,#0]  ; Alt_PID_P
;;;378    	  Alt_PID_I   = baro_wz_speed_pid.ki*1000;
0000d0  4959              LDR      r1,|L8.568|
0000d2  6888              LDR      r0,[r1,#8]  ; baro_wz_speed_pid
0000d4  494f              LDR      r1,|L8.532|
0000d6  f7fffffe          BL       __aeabi_fmul
0000da  4605              MOV      r5,r0
0000dc  f7fffffe          BL       __aeabi_f2iz
0000e0  4957              LDR      r1,|L8.576|
0000e2  6008              STR      r0,[r1,#0]  ; Alt_PID_I
;;;379    	  Alt_PID_D   = baro_wz_speed_pid.kd*100;
0000e4  4954              LDR      r1,|L8.568|
0000e6  6848              LDR      r0,[r1,#4]  ; baro_wz_speed_pid
0000e8  4948              LDR      r1,|L8.524|
0000ea  f7fffffe          BL       __aeabi_fmul
0000ee  4605              MOV      r5,r0
0000f0  f7fffffe          BL       __aeabi_f2iz
0000f4  4953              LDR      r1,|L8.580|
0000f6  6008              STR      r0,[r1,#0]  ; Alt_PID_D
;;;380    	  HtoEs_OutPut_Buffer[0] = 0x21; //帧长度 15字节
0000f8  2021              MOVS     r0,#0x21
0000fa  4953              LDR      r1,|L8.584|
0000fc  7008              STRB     r0,[r1,#0]
;;;381    		HtoEs_OutPut_Buffer[1] = 0x05; //功能码
0000fe  2005              MOVS     r0,#5
000100  7048              STRB     r0,[r1,#1]
;;;382    	
;;;383    	  HtoEs_OutPut_Buffer[2] = (Pitch_PID_P & 0xFF00) >> 8 ; //取高8位
000102  4843              LDR      r0,|L8.528|
000104  8800              LDRH     r0,[r0,#0]  ; Pitch_PID_P
000106  0a00              LSRS     r0,r0,#8
000108  7088              STRB     r0,[r1,#2]
;;;384    	  HtoEs_OutPut_Buffer[3] = (Pitch_PID_P & 0x00FF) ;      //取低8位
00010a  4841              LDR      r0,|L8.528|
00010c  7800              LDRB     r0,[r0,#0]  ; Pitch_PID_P
00010e  70c8              STRB     r0,[r1,#3]
;;;385    	  HtoEs_OutPut_Buffer[4] = (Pitch_PID_I & 0xFF00) >> 8 ; //取高8位
000110  4841              LDR      r0,|L8.536|
000112  8800              LDRH     r0,[r0,#0]  ; Pitch_PID_I
000114  0a00              LSRS     r0,r0,#8
000116  7108              STRB     r0,[r1,#4]
;;;386    	  HtoEs_OutPut_Buffer[5] = (Pitch_PID_I & 0x00FF) ;      //取低8位
000118  483f              LDR      r0,|L8.536|
00011a  7800              LDRB     r0,[r0,#0]  ; Pitch_PID_I
00011c  7148              STRB     r0,[r1,#5]
;;;387    	  HtoEs_OutPut_Buffer[6] = (Pitch_PID_D & 0xFF00) >> 8 ; //取高8位
00011e  483f              LDR      r0,|L8.540|
000120  8800              LDRH     r0,[r0,#0]  ; Pitch_PID_D
000122  0a00              LSRS     r0,r0,#8
000124  7188              STRB     r0,[r1,#6]
;;;388    	  HtoEs_OutPut_Buffer[7] = (Pitch_PID_D & 0x00FF) ;      //取低8位
000126  483d              LDR      r0,|L8.540|
000128  7800              LDRB     r0,[r0,#0]  ; Pitch_PID_D
00012a  71c8              STRB     r0,[r1,#7]
;;;389    	
;;;390    	  HtoEs_OutPut_Buffer[8] = (Roll_PID_P & 0xFF00) >> 8 ; //取高8位
00012c  483c              LDR      r0,|L8.544|
00012e  8800              LDRH     r0,[r0,#0]  ; Roll_PID_P
000130  0a00              LSRS     r0,r0,#8
000132  7208              STRB     r0,[r1,#8]
;;;391    	  HtoEs_OutPut_Buffer[9] = (Roll_PID_P & 0x00FF) ;      //取低8位
000134  483a              LDR      r0,|L8.544|
000136  7800              LDRB     r0,[r0,#0]  ; Roll_PID_P
000138  7248              STRB     r0,[r1,#9]
;;;392    	  HtoEs_OutPut_Buffer[10] = (Roll_PID_I & 0xFF00) >> 8 ; //取高8位
00013a  483a              LDR      r0,|L8.548|
00013c  8800              LDRH     r0,[r0,#0]  ; Roll_PID_I
00013e  0a00              LSRS     r0,r0,#8
000140  7288              STRB     r0,[r1,#0xa]
;;;393    	  HtoEs_OutPut_Buffer[11] = (Roll_PID_I & 0x00FF) ;      //取低8位
000142  4838              LDR      r0,|L8.548|
000144  7800              LDRB     r0,[r0,#0]  ; Roll_PID_I
000146  72c8              STRB     r0,[r1,#0xb]
;;;394    	  HtoEs_OutPut_Buffer[12] = (Roll_PID_D & 0xFF00) >> 8 ; //取高8位
000148  4837              LDR      r0,|L8.552|
00014a  8800              LDRH     r0,[r0,#0]  ; Roll_PID_D
00014c  0a00              LSRS     r0,r0,#8
00014e  7308              STRB     r0,[r1,#0xc]
;;;395    	  HtoEs_OutPut_Buffer[13] = (Roll_PID_D & 0x00FF) ;      //取低8位
000150  4835              LDR      r0,|L8.552|
000152  7800              LDRB     r0,[r0,#0]  ; Roll_PID_D
000154  7348              STRB     r0,[r1,#0xd]
;;;396    		
;;;397    		HtoEs_OutPut_Buffer[14] = (Yaw_PID_P & 0xFF00) >> 8 ; //取高8位
000156  4835              LDR      r0,|L8.556|
000158  8800              LDRH     r0,[r0,#0]  ; Yaw_PID_P
00015a  0a00              LSRS     r0,r0,#8
00015c  7388              STRB     r0,[r1,#0xe]
;;;398    	  HtoEs_OutPut_Buffer[15] = (Yaw_PID_P & 0x00FF) ;      //取低8位
00015e  4833              LDR      r0,|L8.556|
000160  7800              LDRB     r0,[r0,#0]  ; Yaw_PID_P
000162  73c8              STRB     r0,[r1,#0xf]
;;;399    	  HtoEs_OutPut_Buffer[16] = (Yaw_PID_I & 0xFF00) >> 8 ; //取高8位
000164  4832              LDR      r0,|L8.560|
000166  8800              LDRH     r0,[r0,#0]  ; Yaw_PID_I
000168  0a00              LSRS     r0,r0,#8
00016a  7408              STRB     r0,[r1,#0x10]
;;;400    	  HtoEs_OutPut_Buffer[17] = (Yaw_PID_I & 0x00FF) ;      //取低8位
00016c  4830              LDR      r0,|L8.560|
00016e  7800              LDRB     r0,[r0,#0]  ; Yaw_PID_I
000170  7448              STRB     r0,[r1,#0x11]
;;;401    	  HtoEs_OutPut_Buffer[18] = (Yaw_PID_D & 0xFF00) >> 8 ; //取高8位
000172  4830              LDR      r0,|L8.564|
000174  8800              LDRH     r0,[r0,#0]  ; Yaw_PID_D
000176  0a00              LSRS     r0,r0,#8
000178  7488              STRB     r0,[r1,#0x12]
;;;402    	  HtoEs_OutPut_Buffer[19] = (Yaw_PID_D & 0x00FF) ;      //取低8位
00017a  482e              LDR      r0,|L8.564|
00017c  7800              LDRB     r0,[r0,#0]  ; Yaw_PID_D
00017e  74c8              STRB     r0,[r1,#0x13]
;;;403    		
;;;404    		HtoEs_OutPut_Buffer[20] = (Alt_PID_P & 0xFF00) >> 8 ; //取高8位
000180  482e              LDR      r0,|L8.572|
000182  8800              LDRH     r0,[r0,#0]  ; Alt_PID_P
000184  0a00              LSRS     r0,r0,#8
000186  7508              STRB     r0,[r1,#0x14]
;;;405    	  HtoEs_OutPut_Buffer[21] = (Alt_PID_P & 0x00FF) ;      //取低8位
000188  482c              LDR      r0,|L8.572|
00018a  7800              LDRB     r0,[r0,#0]  ; Alt_PID_P
00018c  7548              STRB     r0,[r1,#0x15]
;;;406    	  HtoEs_OutPut_Buffer[22] = (Alt_PID_I & 0xFF00) >> 8 ; //取高8位
00018e  482c              LDR      r0,|L8.576|
000190  8800              LDRH     r0,[r0,#0]  ; Alt_PID_I
000192  0a00              LSRS     r0,r0,#8
000194  7588              STRB     r0,[r1,#0x16]
;;;407    	  HtoEs_OutPut_Buffer[23] = (Alt_PID_I & 0x00FF) ;      //取低8位
000196  482a              LDR      r0,|L8.576|
000198  7800              LDRB     r0,[r0,#0]  ; Alt_PID_I
00019a  75c8              STRB     r0,[r1,#0x17]
;;;408    	  HtoEs_OutPut_Buffer[24] = (Alt_PID_D & 0xFF00) >> 8 ; //取高8位
00019c  4829              LDR      r0,|L8.580|
00019e  8800              LDRH     r0,[r0,#0]  ; Alt_PID_D
0001a0  0a00              LSRS     r0,r0,#8
0001a2  7608              STRB     r0,[r1,#0x18]
;;;409    	  HtoEs_OutPut_Buffer[25] = (Alt_PID_D & 0x00FF) ;      //取低8位
0001a4  4827              LDR      r0,|L8.580|
0001a6  7800              LDRB     r0,[r0,#0]  ; Alt_PID_D
0001a8  7648              STRB     r0,[r1,#0x19]
;;;410    		
;;;411    		HtoEs_OutPut_Buffer[26] = (Pos_PID_P & 0xFF00) >> 8 ; //取高8位
0001aa  4828              LDR      r0,|L8.588|
0001ac  8800              LDRH     r0,[r0,#0]  ; Pos_PID_P
0001ae  0a00              LSRS     r0,r0,#8
0001b0  7688              STRB     r0,[r1,#0x1a]
;;;412    	  HtoEs_OutPut_Buffer[27] = (Pos_PID_P & 0x00FF) ;      //取低8位
0001b2  4826              LDR      r0,|L8.588|
0001b4  7800              LDRB     r0,[r0,#0]  ; Pos_PID_P
0001b6  76c8              STRB     r0,[r1,#0x1b]
;;;413    	  HtoEs_OutPut_Buffer[28] = (Pos_PID_I & 0xFF00) >> 8 ; //取高8位
0001b8  4825              LDR      r0,|L8.592|
0001ba  8800              LDRH     r0,[r0,#0]  ; Pos_PID_I
0001bc  0a00              LSRS     r0,r0,#8
0001be  7708              STRB     r0,[r1,#0x1c]
;;;414    	  HtoEs_OutPut_Buffer[29] = (Pos_PID_I & 0x00FF) ;      //取低8位
0001c0  4823              LDR      r0,|L8.592|
0001c2  7800              LDRB     r0,[r0,#0]  ; Pos_PID_I
0001c4  7748              STRB     r0,[r1,#0x1d]
;;;415    	  HtoEs_OutPut_Buffer[30] = (Pos_PID_D & 0xFF00) >> 8 ; //取高8位
0001c6  4823              LDR      r0,|L8.596|
0001c8  8800              LDRH     r0,[r0,#0]  ; Pos_PID_D
0001ca  0a00              LSRS     r0,r0,#8
0001cc  7788              STRB     r0,[r1,#0x1e]
;;;416    	  HtoEs_OutPut_Buffer[31] = (Pos_PID_D & 0x00FF) ;      //取低8位
0001ce  4821              LDR      r0,|L8.596|
0001d0  7800              LDRB     r0,[r0,#0]  ; Pos_PID_D
0001d2  77c8              STRB     r0,[r1,#0x1f]
;;;417    		
;;;418    	//============================================================================	
;;;419    		
;;;420    		CHK_SUM =0; 
0001d4  2000              MOVS     r0,#0
0001d6  4920              LDR      r1,|L8.600|
0001d8  6008              STR      r0,[r1,#0]  ; CHK_SUM
;;;421    	
;;;422    	  for(i = 0 ; i < 32; i++)  //计算和
0001da  2400              MOVS     r4,#0
0001dc  e008              B        |L8.496|
                  |L8.478|
;;;423    			CHK_SUM += HtoEs_OutPut_Buffer[i];
0001de  481a              LDR      r0,|L8.584|
0001e0  5d00              LDRB     r0,[r0,r4]
0001e2  491d              LDR      r1,|L8.600|
0001e4  6809              LDR      r1,[r1,#0]  ; CHK_SUM
0001e6  4408              ADD      r0,r0,r1
0001e8  491b              LDR      r1,|L8.600|
0001ea  6008              STR      r0,[r1,#0]  ; CHK_SUM
0001ec  1c60              ADDS     r0,r4,#1              ;422
0001ee  b2c4              UXTB     r4,r0                 ;422
                  |L8.496|
0001f0  2c20              CMP      r4,#0x20              ;422
0001f2  dbf4              BLT      |L8.478|
;;;424    		
;;;425    		HtoEs_OutPut_Buffer[32] = CHK_SUM % 2; //计算校验值
0001f4  4818              LDR      r0,|L8.600|
0001f6  7800              LDRB     r0,[r0,#0]  ; CHK_SUM
0001f8  f0000001          AND      r0,r0,#1
0001fc  4912              LDR      r1,|L8.584|
0001fe  f8810020          STRB     r0,[r1,#0x20]
;;;426    	
;;;427    	  return 33; 
000202  2021              MOVS     r0,#0x21
;;;428    }
000204  bd70              POP      {r4-r6,pc}
;;;429    
                          ENDP

000206  0000              DCW      0x0000
                  |L8.520|
                          DCD      ctrl
                  |L8.524|
                          DCD      0x42c80000
                  |L8.528|
                          DCD      Pitch_PID_P
                  |L8.532|
                          DCD      0x447a0000
                  |L8.536|
                          DCD      Pitch_PID_I
                  |L8.540|
                          DCD      Pitch_PID_D
                  |L8.544|
                          DCD      Roll_PID_P
                  |L8.548|
                          DCD      Roll_PID_I
                  |L8.552|
                          DCD      Roll_PID_D
                  |L8.556|
                          DCD      Yaw_PID_P
                  |L8.560|
                          DCD      Yaw_PID_I
                  |L8.564|
                          DCD      Yaw_PID_D
                  |L8.568|
                          DCD      baro_wz_speed_pid
                  |L8.572|
                          DCD      Alt_PID_P
                  |L8.576|
                          DCD      Alt_PID_I
                  |L8.580|
                          DCD      Alt_PID_D
                  |L8.584|
                          DCD      HtoEs_OutPut_Buffer
                  |L8.588|
                          DCD      Pos_PID_P
                  |L8.592|
                          DCD      Pos_PID_I
                  |L8.596|
                          DCD      Pos_PID_D
                  |L8.600|
                          DCD      CHK_SUM

                          AREA ||i.HtoEs_RC_Data_Generate||, CODE, READONLY, ALIGN=2

                  HtoEs_RC_Data_Generate PROC
;;;267    //生成RC通道数据帧
;;;268    unsigned char HtoEs_RC_Data_Generate(void)
000000  b510              PUSH     {r4,lr}
;;;269    {
;;;270    	  unsigned char i,Count=0;
000002  2000              MOVS     r0,#0
;;;271    	
;;;272    	  HtoEs_OutPut_Buffer[Count++] = 0xFE; //起始帧
000004  24fe              MOVS     r4,#0xfe
000006  4603              MOV      r3,r0
000008  1c40              ADDS     r0,r0,#1
00000a  4a52              LDR      r2,|L9.340|
00000c  54d4              STRB     r4,[r2,r3]
;;;273    	  HtoEs_OutPut_Buffer[Count++] = 0x18; //帧长度
00000e  2418              MOVS     r4,#0x18
000010  4603              MOV      r3,r0
000012  1c40              ADDS     r0,r0,#1
000014  54d4              STRB     r4,[r2,r3]
;;;274    		HtoEs_OutPut_Buffer[Count++] = 0x03; //功能码
000016  2403              MOVS     r4,#3
000018  4603              MOV      r3,r0
00001a  1c40              ADDS     r0,r0,#1
00001c  54d4              STRB     r4,[r2,r3]
;;;275    	 
;;;276    	  HtoEs_OutPut_Buffer[Count++] = BYTE1(RC_Pwm_In[0]); //取高8位ROLL
00001e  4a4e              LDR      r2,|L9.344|
000020  7854              LDRB     r4,[r2,#1]  ; RC_Pwm_In
000022  4603              MOV      r3,r0
000024  1c40              ADDS     r0,r0,#1
000026  4a4b              LDR      r2,|L9.340|
000028  54d4              STRB     r4,[r2,r3]
;;;277    	  HtoEs_OutPut_Buffer[Count++] = BYTE0(RC_Pwm_In[0]);      //取低8位
00002a  4a4b              LDR      r2,|L9.344|
00002c  7814              LDRB     r4,[r2,#0]  ; RC_Pwm_In
00002e  4603              MOV      r3,r0
000030  1c40              ADDS     r0,r0,#1
000032  4a48              LDR      r2,|L9.340|
000034  54d4              STRB     r4,[r2,r3]
;;;278    	
;;;279    	  HtoEs_OutPut_Buffer[Count++] = BYTE1(RC_Pwm_In[1]); //取高8位PITCH
000036  4a48              LDR      r2,|L9.344|
000038  78d4              LDRB     r4,[r2,#3]
00003a  4603              MOV      r3,r0
00003c  1c40              ADDS     r0,r0,#1
00003e  4a45              LDR      r2,|L9.340|
000040  54d4              STRB     r4,[r2,r3]
;;;280    	  HtoEs_OutPut_Buffer[Count++] = BYTE0(RC_Pwm_In[1]);      //取低8位
000042  4a45              LDR      r2,|L9.344|
000044  7894              LDRB     r4,[r2,#2]  ; RC_Pwm_In
000046  4603              MOV      r3,r0
000048  1c40              ADDS     r0,r0,#1
00004a  4a42              LDR      r2,|L9.340|
00004c  54d4              STRB     r4,[r2,r3]
;;;281    	
;;;282    	  HtoEs_OutPut_Buffer[Count++] = BYTE1(RC_Pwm_In[2]); //取高8位THRrc_data[3]
00004e  4a42              LDR      r2,|L9.344|
000050  7954              LDRB     r4,[r2,#5]
000052  4602              MOV      r2,r0
000054  1c43              ADDS     r3,r0,#1
000056  b2d8              UXTB     r0,r3
000058  4b3e              LDR      r3,|L9.340|
00005a  549c              STRB     r4,[r3,r2]
;;;283    	  HtoEs_OutPut_Buffer[Count++] = BYTE0(RC_Pwm_In[2]);      //取低8位rc_data[3]
00005c  4a3e              LDR      r2,|L9.344|
00005e  7914              LDRB     r4,[r2,#4]  ; RC_Pwm_In
000060  4602              MOV      r2,r0
000062  1c43              ADDS     r3,r0,#1
000064  b2d8              UXTB     r0,r3
000066  4b3b              LDR      r3,|L9.340|
000068  549c              STRB     r4,[r3,r2]
;;;284    	
;;;285    	  HtoEs_OutPut_Buffer[Count++] = BYTE1(RC_Pwm_In[3]); //取高8位YAW
00006a  4a3b              LDR      r2,|L9.344|
00006c  79d4              LDRB     r4,[r2,#7]
00006e  4602              MOV      r2,r0
000070  1c43              ADDS     r3,r0,#1
000072  b2d8              UXTB     r0,r3
000074  4b37              LDR      r3,|L9.340|
000076  549c              STRB     r4,[r3,r2]
;;;286    	  HtoEs_OutPut_Buffer[Count++] = BYTE0(RC_Pwm_In[3]);      //取低8位
000078  4a37              LDR      r2,|L9.344|
00007a  7994              LDRB     r4,[r2,#6]  ; RC_Pwm_In
00007c  4602              MOV      r2,r0
00007e  1c43              ADDS     r3,r0,#1
000080  b2d8              UXTB     r0,r3
000082  4b34              LDR      r3,|L9.340|
000084  549c              STRB     r4,[r3,r2]
;;;287    	
;;;288    	  HtoEs_OutPut_Buffer[Count++] = BYTE1(RC_Pwm_In[4]); //取高8位CH5
000086  4a34              LDR      r2,|L9.344|
000088  7a54              LDRB     r4,[r2,#9]
00008a  4602              MOV      r2,r0
00008c  1c43              ADDS     r3,r0,#1
00008e  b2d8              UXTB     r0,r3
000090  4b30              LDR      r3,|L9.340|
000092  549c              STRB     r4,[r3,r2]
;;;289    	  HtoEs_OutPut_Buffer[Count++] = BYTE0(RC_Pwm_In[4]);      //取低8位
000094  4a30              LDR      r2,|L9.344|
000096  7a14              LDRB     r4,[r2,#8]  ; RC_Pwm_In
000098  4602              MOV      r2,r0
00009a  1c43              ADDS     r3,r0,#1
00009c  b2d8              UXTB     r0,r3
00009e  4b2d              LDR      r3,|L9.340|
0000a0  549c              STRB     r4,[r3,r2]
;;;290    	
;;;291    	  HtoEs_OutPut_Buffer[Count++] = BYTE1(RC_Pwm_In[5]); //取高8位CH6
0000a2  4a2d              LDR      r2,|L9.344|
0000a4  7ad4              LDRB     r4,[r2,#0xb]
0000a6  4602              MOV      r2,r0
0000a8  1c43              ADDS     r3,r0,#1
0000aa  b2d8              UXTB     r0,r3
0000ac  4b29              LDR      r3,|L9.340|
0000ae  549c              STRB     r4,[r3,r2]
;;;292    	  HtoEs_OutPut_Buffer[Count++] = BYTE0(RC_Pwm_In[5]);      //取低8位
0000b0  4a29              LDR      r2,|L9.344|
0000b2  7a94              LDRB     r4,[r2,#0xa]  ; RC_Pwm_In
0000b4  4602              MOV      r2,r0
0000b6  1c43              ADDS     r3,r0,#1
0000b8  b2d8              UXTB     r0,r3
0000ba  4b26              LDR      r3,|L9.340|
0000bc  549c              STRB     r4,[r3,r2]
;;;293    		
;;;294    		HtoEs_OutPut_Buffer[Count++] = BYTE1(RC_Pwm_In[6]); //取高8位超声波
0000be  4a26              LDR      r2,|L9.344|
0000c0  7b54              LDRB     r4,[r2,#0xd]
0000c2  4602              MOV      r2,r0
0000c4  1c43              ADDS     r3,r0,#1
0000c6  b2d8              UXTB     r0,r3
0000c8  4b22              LDR      r3,|L9.340|
0000ca  549c              STRB     r4,[r3,r2]
;;;295    	  HtoEs_OutPut_Buffer[Count++] = BYTE0(RC_Pwm_In[6]);      //取低8位
0000cc  4a22              LDR      r2,|L9.344|
0000ce  7b14              LDRB     r4,[r2,#0xc]  ; RC_Pwm_In
0000d0  4602              MOV      r2,r0
0000d2  1c43              ADDS     r3,r0,#1
0000d4  b2d8              UXTB     r0,r3
0000d6  4b1f              LDR      r3,|L9.340|
0000d8  549c              STRB     r4,[r3,r2]
;;;296    		
;;;297    		HtoEs_OutPut_Buffer[Count++] = BYTE1(US100_Alt_Temp); //取高8位CH7
0000da  4a20              LDR      r2,|L9.348|
0000dc  7854              LDRB     r4,[r2,#1]  ; US100_Alt_Temp
0000de  4602              MOV      r2,r0
0000e0  1c43              ADDS     r3,r0,#1
0000e2  b2d8              UXTB     r0,r3
0000e4  4b1b              LDR      r3,|L9.340|
0000e6  549c              STRB     r4,[r3,r2]
;;;298    	  HtoEs_OutPut_Buffer[Count++] = BYTE0(US100_Alt_Temp);      //取低8位
0000e8  4a1c              LDR      r2,|L9.348|
0000ea  7814              LDRB     r4,[r2,#0]  ; US100_Alt_Temp
0000ec  4602              MOV      r2,r0
0000ee  1c43              ADDS     r3,r0,#1
0000f0  b2d8              UXTB     r0,r3
0000f2  4b18              LDR      r3,|L9.340|
0000f4  549c              STRB     r4,[r3,r2]
;;;299    		
;;;300    		HtoEs_OutPut_Buffer[Count++] =0;// (RC_Data.rc_data[0] & 0xFF00) >> 8 ; //取高8位
0000f6  2400              MOVS     r4,#0
0000f8  4602              MOV      r2,r0
0000fa  1c43              ADDS     r3,r0,#1
0000fc  b2d8              UXTB     r0,r3
0000fe  4b15              LDR      r3,|L9.340|
000100  549c              STRB     r4,[r3,r2]
;;;301    	  HtoEs_OutPut_Buffer[Count++] =0;// (RC_Data.rc_data[0] & 0x00FF) ;      //取低8位
000102  4602              MOV      r2,r0
000104  1c43              ADDS     r3,r0,#1
000106  b2d8              UXTB     r0,r3
000108  4b12              LDR      r3,|L9.340|
00010a  549c              STRB     r4,[r3,r2]
;;;302    		
;;;303    		HtoEs_OutPut_Buffer[Count++] =0;// (RC_Data.rc_data[0] & 0xFF00) >> 8 ; //取高8位
00010c  4602              MOV      r2,r0
00010e  1c43              ADDS     r3,r0,#1
000110  b2d8              UXTB     r0,r3
000112  4b10              LDR      r3,|L9.340|
000114  549c              STRB     r4,[r3,r2]
;;;304    	  HtoEs_OutPut_Buffer[Count++] =0;// (RC_Data.rc_data[0] & 0x00FF) ;      //取低8位
000116  4602              MOV      r2,r0
000118  1c43              ADDS     r3,r0,#1
00011a  b2d8              UXTB     r0,r3
00011c  4b0d              LDR      r3,|L9.340|
00011e  549c              STRB     r4,[r3,r2]
;;;305    	 
;;;306    	//============================================================================	
;;;307    		
;;;308    		CHK_SUM =0; 
000120  2200              MOVS     r2,#0
000122  4b0f              LDR      r3,|L9.352|
000124  601a              STR      r2,[r3,#0]  ; CHK_SUM
;;;309    	
;;;310    	  for(i = 0 ; i < Count; i++)  //计算和
000126  2100              MOVS     r1,#0
000128  e008              B        |L9.316|
                  |L9.298|
;;;311    			CHK_SUM += HtoEs_OutPut_Buffer[i];
00012a  4a0a              LDR      r2,|L9.340|
00012c  5c52              LDRB     r2,[r2,r1]
00012e  4b0c              LDR      r3,|L9.352|
000130  681b              LDR      r3,[r3,#0]  ; CHK_SUM
000132  441a              ADD      r2,r2,r3
000134  4b0a              LDR      r3,|L9.352|
000136  601a              STR      r2,[r3,#0]  ; CHK_SUM
000138  1c4a              ADDS     r2,r1,#1              ;310
00013a  b2d1              UXTB     r1,r2                 ;310
                  |L9.316|
00013c  4281              CMP      r1,r0                 ;310
00013e  dbf4              BLT      |L9.298|
;;;312    		
;;;313    		HtoEs_OutPut_Buffer[Count++] = CHK_SUM % 2; //计算校验值
000140  4a07              LDR      r2,|L9.352|
000142  7812              LDRB     r2,[r2,#0]  ; CHK_SUM
000144  f0020401          AND      r4,r2,#1
000148  4602              MOV      r2,r0
00014a  1c43              ADDS     r3,r0,#1
00014c  b2d8              UXTB     r0,r3
00014e  4b01              LDR      r3,|L9.340|
000150  549c              STRB     r4,[r3,r2]
;;;314    	
;;;315    	  return Count; 
;;;316    }
000152  bd10              POP      {r4,pc}
;;;317    
                          ENDP

                  |L9.340|
                          DCD      HtoEs_OutPut_Buffer
                  |L9.344|
                          DCD      RC_Pwm_In
                  |L9.348|
                          DCD      US100_Alt_Temp
                  |L9.352|
                          DCD      CHK_SUM

                          AREA ||i.Usart1_Send||, CODE, READONLY, ALIGN=2

                  Usart1_Send PROC
;;;607    
;;;608    void Usart1_Send(unsigned char *DataToSend ,u8 data_num)
000000  b570              PUSH     {r4-r6,lr}
;;;609    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;610    /*下面是采用串口移位中断方式发送，需在串口中断函数里面装载下一个数据，不推荐*/	
;;;611    //  u8 i;
;;;612    //	for(i=0;i<data_num;i++)
;;;613    //	{
;;;614    //		TxBuffer[count++] = *(DataToSend+i);
;;;615    //	}
;;;616    //	if(!(USART1->CR1 & USART_CR1_TXEIE))
;;;617    //	{
;;;618    //		USART_ITConfig(USART1, USART_IT_TXE, ENABLE); //打开发送中断
;;;619    //	}
;;;620    //
;;;621    	
;;;622    /*使用串口DMA方式发送，节约时间又稳定*/
;;;623    	if(Flag_Uart_Send==0)
000006  480a              LDR      r0,|L10.48|
000008  7800              LDRB     r0,[r0,#0]  ; Flag_Uart_Send
00000a  b980              CBNZ     r0,|L10.46|
;;;624    	{
;;;625    		DMA_Cmd(DMA1_Channel4,DISABLE); 
00000c  2100              MOVS     r1,#0
00000e  4809              LDR      r0,|L10.52|
000010  f7fffffe          BL       DMA_Cmd
;;;626    		DMA1_Channel4->CMAR = (u32)DataToSend;
000014  4807              LDR      r0,|L10.52|
000016  3844              SUBS     r0,r0,#0x44
000018  6505              STR      r5,[r0,#0x50]
;;;627    		Flag_Uart_Send=1;
00001a  2001              MOVS     r0,#1
00001c  4904              LDR      r1,|L10.48|
00001e  7008              STRB     r0,[r1,#0]
;;;628    	  DMA1_Channel4->CNDTR =data_num;
000020  4804              LDR      r0,|L10.52|
000022  3844              SUBS     r0,r0,#0x44
000024  6484              STR      r4,[r0,#0x48]
;;;629    		DMA_Cmd(DMA1_Channel4,ENABLE); 
000026  2101              MOVS     r1,#1
000028  4802              LDR      r0,|L10.52|
00002a  f7fffffe          BL       DMA_Cmd
                  |L10.46|
;;;630    	}
;;;631    }
00002e  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L10.48|
                          DCD      Flag_Uart_Send
                  |L10.52|
                          DCD      0x40020044

                          AREA ||i.UsbCmdPro||, CODE, READONLY, ALIGN=2

                  UsbCmdPro PROC
;;;503    /*====================================================================================================*/
;;;504    void UsbCmdPro(void)
000000  b510              PUSH     {r4,lr}
;;;505    {
;;;506      u8 ucData,ucNum;
;;;507      volatile static u16 aCmdBuf[32];
;;;508    	static u8 aCmdBuf1[32];
;;;509    	static u16 usPos;
;;;510    	static u16 Free_heart=0;
;;;511    	
;;;512    	// 空闲心跳
;;;513    	Free_heart++;  
000002  482b              LDR      r0,|L11.176|
000004  8800              LDRH     r0,[r0,#0]  ; Free_heart
000006  1c40              ADDS     r0,r0,#1
000008  4929              LDR      r1,|L11.176|
00000a  8008              STRH     r0,[r1,#0]
;;;514    	if(Free_heart>=60) {
00000c  4608              MOV      r0,r1
00000e  8800              LDRH     r0,[r0,#0]  ; Free_heart
000010  283c              CMP      r0,#0x3c
000012  db11              BLT      |L11.56|
;;;515    		usPos = 0;
000014  2000              MOVS     r0,#0
000016  4927              LDR      r1,|L11.180|
000018  8008              STRH     r0,[r1,#0]
;;;516    		Free_heart = 60;
00001a  203c              MOVS     r0,#0x3c
00001c  4924              LDR      r1,|L11.176|
00001e  8008              STRH     r0,[r1,#0]
;;;517    	 for(u8 i=0;i<32;i++)
000020  2000              MOVS     r0,#0
000022  e007              B        |L11.52|
                  |L11.36|
;;;518    	 {
;;;519    		 aCmdBuf[i] =0;
000024  2100              MOVS     r1,#0
000026  4a24              LDR      r2,|L11.184|
000028  f8221010          STRH     r1,[r2,r0,LSL #1]
;;;520    		 aCmdBuf1[i]=0;
00002c  4a23              LDR      r2,|L11.188|
00002e  5411              STRB     r1,[r2,r0]
000030  1c41              ADDS     r1,r0,#1              ;517
000032  b2c8              UXTB     r0,r1                 ;517
                  |L11.52|
000034  2820              CMP      r0,#0x20              ;517
000036  dbf5              BLT      |L11.36|
                  |L11.56|
;;;521    	 } 
;;;522      }
;;;523    	
;;;524    	if(Free_heart==3)//字符间隔超时认为是一帧结束
000038  481d              LDR      r0,|L11.176|
00003a  8800              LDRH     r0,[r0,#0]  ; Free_heart
00003c  2803              CMP      r0,#3
00003e  d119              BNE      |L11.116|
;;;525    	{
;;;526    	// 数据解析
;;;527    	#ifdef HT_TAWK 
;;;528    		if(fg!=10) Data_Parser(aCmdBuf);
;;;529    	#elif defined ANO
;;;530    		if(fg!=10) 	ANO_DT_Data_Receive_Anl(&aCmdBuf1[0],aCmdBuf1[3]+5);//使用匿名上位机时		
000040  481f              LDR      r0,|L11.192|
000042  7800              LDRB     r0,[r0,#0]  ; fg
000044  280a              CMP      r0,#0xa
000046  d006              BEQ      |L11.86|
000048  481c              LDR      r0,|L11.188|
00004a  78c0              LDRB     r0,[r0,#3]  ; aCmdBuf1
00004c  1d40              ADDS     r0,r0,#5
00004e  b2c1              UXTB     r1,r0
000050  481a              LDR      r0,|L11.188|
000052  f7fffffe          BL       ANO_DT_Data_Receive_Anl
                  |L11.86|
;;;531    	#endif	
;;;532    	usPos = 0;//一帧结束，开始下一帧	
000056  2000              MOVS     r0,#0
000058  4916              LDR      r1,|L11.180|
00005a  8008              STRH     r0,[r1,#0]
;;;533    	 for(u8 i=0;i<32;i++)
00005c  bf00              NOP      
00005e  e007              B        |L11.112|
                  |L11.96|
;;;534    	 {
;;;535    		 aCmdBuf[i] =0;
000060  2100              MOVS     r1,#0
000062  4a15              LDR      r2,|L11.184|
000064  f8221010          STRH     r1,[r2,r0,LSL #1]
;;;536    		 aCmdBuf1[i]=0;	 
000068  4a14              LDR      r2,|L11.188|
00006a  5411              STRB     r1,[r2,r0]
00006c  1c41              ADDS     r1,r0,#1              ;533
00006e  b2c8              UXTB     r0,r1                 ;533
                  |L11.112|
000070  2820              CMP      r0,#0x20              ;533
000072  dbf5              BLT      |L11.96|
                  |L11.116|
;;;537    	 }	
;;;538    	}
;;;539    	// 从USB口读取一个字节 ucNum存放读到的字节个数 
;;;540    	//ucData = usb_GetRxByte(&ucNum);	
;;;541    	
;;;542    	// 没有接收到输出 退出
;;;543    	if (ucNum == 0)		return;
000074  b905              CBNZ     r5,|L11.120|
                  |L11.118|
;;;544    	
;;;545    	Free_heart=0;
;;;546    	
;;;547     	// 接收到的数据放入缓存
;;;548    	aCmdBuf1[usPos] = ucData;
;;;549     	aCmdBuf[usPos++] = ucData;
;;;550      
;;;551    	if(usPos>=31) usPos=31;
;;;552    	fg=5;
;;;553    }
000076  bd10              POP      {r4,pc}
                  |L11.120|
000078  2000              MOVS     r0,#0                 ;545
00007a  490d              LDR      r1,|L11.176|
00007c  8008              STRH     r0,[r1,#0]            ;545
00007e  480f              LDR      r0,|L11.188|
000080  490c              LDR      r1,|L11.180|
000082  8809              LDRH     r1,[r1,#0]            ;548  ; usPos
000084  5444              STRB     r4,[r0,r1]            ;548
000086  480b              LDR      r0,|L11.180|
000088  8801              LDRH     r1,[r0,#0]            ;549  ; usPos
00008a  8800              LDRH     r0,[r0,#0]            ;549  ; usPos
00008c  1c40              ADDS     r0,r0,#1              ;549
00008e  4a09              LDR      r2,|L11.180|
000090  8010              STRH     r0,[r2,#0]            ;549
000092  4809              LDR      r0,|L11.184|
000094  f8204011          STRH     r4,[r0,r1,LSL #1]     ;549
000098  4610              MOV      r0,r2                 ;551
00009a  8800              LDRH     r0,[r0,#0]            ;551  ; usPos
00009c  281f              CMP      r0,#0x1f              ;551
00009e  db02              BLT      |L11.166|
0000a0  201f              MOVS     r0,#0x1f              ;551
0000a2  4611              MOV      r1,r2                 ;551
0000a4  8008              STRH     r0,[r1,#0]            ;551
                  |L11.166|
0000a6  2005              MOVS     r0,#5                 ;552
0000a8  4905              LDR      r1,|L11.192|
0000aa  7008              STRB     r0,[r1,#0]            ;552
0000ac  bf00              NOP      
0000ae  e7e2              B        |L11.118|
;;;554    
                          ENDP

                  |L11.176|
                          DCD      Free_heart
                  |L11.180|
                          DCD      usPos
                  |L11.184|
                          DCD      aCmdBuf
                  |L11.188|
                          DCD      aCmdBuf1
                  |L11.192|
                          DCD      ||fg||

                          AREA ||i.usart_data_RX||, CODE, READONLY, ALIGN=2

                  usart_data_RX PROC
;;;563    /*====================================================================================================*/
;;;564    void usart_data_RX(void)
000000  b510              PUSH     {r4,lr}
;;;565    {
;;;566    		volatile static u16 aCmdBuf[32];
;;;567    		static u8 aCmdBuf1[32];
;;;568    		static u16 usPos;
;;;569    		static u16 Free_heart=0;
;;;570    		// 空闲心跳
;;;571    		Free_heart++;  
000002  4834              LDR      r0,|L12.212|
000004  8800              LDRH     r0,[r0,#0]  ; Free_heart
000006  1c40              ADDS     r0,r0,#1
000008  4932              LDR      r1,|L12.212|
00000a  8008              STRH     r0,[r1,#0]
;;;572    		if(Free_heart>=60) {
00000c  4608              MOV      r0,r1
00000e  8800              LDRH     r0,[r0,#0]  ; Free_heart
000010  283c              CMP      r0,#0x3c
000012  db11              BLT      |L12.56|
;;;573    			usPos = 0;
000014  2000              MOVS     r0,#0
000016  4930              LDR      r1,|L12.216|
000018  8008              STRH     r0,[r1,#0]
;;;574    			Free_heart = 60;
00001a  203c              MOVS     r0,#0x3c
00001c  492d              LDR      r1,|L12.212|
00001e  8008              STRH     r0,[r1,#0]
;;;575    		 for(u8 i=0;i<32;i++)
000020  2000              MOVS     r0,#0
000022  e007              B        |L12.52|
                  |L12.36|
;;;576    		 {
;;;577    			 aCmdBuf[i] =0;
000024  2100              MOVS     r1,#0
000026  4a2d              LDR      r2,|L12.220|
000028  f8221010          STRH     r1,[r2,r0,LSL #1]
;;;578    			 aCmdBuf1[i]=0;
00002c  4a2c              LDR      r2,|L12.224|
00002e  5411              STRB     r1,[r2,r0]
000030  1c41              ADDS     r1,r0,#1              ;575
000032  b2c8              UXTB     r0,r1                 ;575
                  |L12.52|
000034  2820              CMP      r0,#0x20              ;575
000036  dbf5              BLT      |L12.36|
                  |L12.56|
;;;579    		 } 
;;;580    		}
;;;581    
;;;582    		if(Free_heart==3)//字符间隔超时认为是一帧结束
000038  4826              LDR      r0,|L12.212|
00003a  8800              LDRH     r0,[r0,#0]  ; Free_heart
00003c  2803              CMP      r0,#3
00003e  d119              BNE      |L12.116|
;;;583    		{
;;;584    			// 数据解析
;;;585    			#ifdef HT_HAWK 
;;;586    				if(fg!=10) Data_Parser(aCmdBuf);
;;;587    			#elif defined ANO
;;;588    				if(fg!=10) 	ANO_DT_Data_Receive_Anl(&aCmdBuf1[0],aCmdBuf1[3]+5);//使用匿名上位机时		
000040  4828              LDR      r0,|L12.228|
000042  7800              LDRB     r0,[r0,#0]  ; fg
000044  280a              CMP      r0,#0xa
000046  d006              BEQ      |L12.86|
000048  4825              LDR      r0,|L12.224|
00004a  78c0              LDRB     r0,[r0,#3]  ; aCmdBuf1
00004c  1d40              ADDS     r0,r0,#5
00004e  b2c1              UXTB     r1,r0
000050  4823              LDR      r0,|L12.224|
000052  f7fffffe          BL       ANO_DT_Data_Receive_Anl
                  |L12.86|
;;;589    			#endif 	
;;;590    
;;;591    			usPos = 0;//一帧结束，开始下一帧	
000056  2000              MOVS     r0,#0
000058  491f              LDR      r1,|L12.216|
00005a  8008              STRH     r0,[r1,#0]
;;;592    			 for(u8 i=0;i<32;i++)
00005c  bf00              NOP      
00005e  e007              B        |L12.112|
                  |L12.96|
;;;593    			 {aCmdBuf[i] =0;
000060  2100              MOVS     r1,#0
000062  4a1e              LDR      r2,|L12.220|
000064  f8221010          STRH     r1,[r2,r0,LSL #1]
;;;594    				 aCmdBuf1[i]=0;	 
000068  4a1d              LDR      r2,|L12.224|
00006a  5411              STRB     r1,[r2,r0]
00006c  1c41              ADDS     r1,r0,#1              ;592
00006e  b2c8              UXTB     r0,r1                 ;592
                  |L12.112|
000070  2820              CMP      r0,#0x20              ;592
000072  dbf5              BLT      |L12.96|
                  |L12.116|
;;;595    			 }	
;;;596    		}		
;;;597    		if(count_rx!=Rxcounter)
000074  481c              LDR      r0,|L12.232|
000076  7800              LDRB     r0,[r0,#0]  ; count_rx
000078  491c              LDR      r1,|L12.236|
00007a  7809              LDRB     r1,[r1,#0]  ; Rxcounter
00007c  4288              CMP      r0,r1
00007e  d019              BEQ      |L12.180|
;;;598    		{ aCmdBuf1[usPos] = Rx_Buf[count_rx];
000080  481b              LDR      r0,|L12.240|
000082  4919              LDR      r1,|L12.232|
000084  7809              LDRB     r1,[r1,#0]  ; count_rx
000086  5c40              LDRB     r0,[r0,r1]
000088  4915              LDR      r1,|L12.224|
00008a  4a13              LDR      r2,|L12.216|
00008c  8812              LDRH     r2,[r2,#0]  ; usPos
00008e  5488              STRB     r0,[r1,r2]
;;;599    			aCmdBuf[usPos++] = Rx_Buf[count_rx++];	// 接收到的数据放入缓存	
000090  4815              LDR      r0,|L12.232|
000092  7801              LDRB     r1,[r0,#0]  ; count_rx
000094  7800              LDRB     r0,[r0,#0]  ; count_rx
000096  1c40              ADDS     r0,r0,#1
000098  4a13              LDR      r2,|L12.232|
00009a  7010              STRB     r0,[r2,#0]
00009c  4814              LDR      r0,|L12.240|
00009e  5c42              LDRB     r2,[r0,r1]
0000a0  480d              LDR      r0,|L12.216|
0000a2  8801              LDRH     r1,[r0,#0]  ; usPos
0000a4  8800              LDRH     r0,[r0,#0]  ; usPos
0000a6  1c40              ADDS     r0,r0,#1
0000a8  4b0b              LDR      r3,|L12.216|
0000aa  8018              STRH     r0,[r3,#0]
0000ac  480b              LDR      r0,|L12.220|
0000ae  f8202011          STRH     r2,[r0,r1,LSL #1]
0000b2  e000              B        |L12.182|
                  |L12.180|
;;;600    		}
;;;601    		// 没有接收到输出 退出
;;;602    		else	return;
;;;603    		fg=5;
;;;604    		Free_heart=0;
;;;605    		if(usPos>=31) usPos=31;
;;;606    }
0000b4  bd10              POP      {r4,pc}
                  |L12.182|
0000b6  2005              MOVS     r0,#5                 ;603
0000b8  490a              LDR      r1,|L12.228|
0000ba  7008              STRB     r0,[r1,#0]            ;603
0000bc  2000              MOVS     r0,#0                 ;604
0000be  4905              LDR      r1,|L12.212|
0000c0  8008              STRH     r0,[r1,#0]            ;604
0000c2  4805              LDR      r0,|L12.216|
0000c4  8800              LDRH     r0,[r0,#0]            ;605  ; usPos
0000c6  281f              CMP      r0,#0x1f              ;605
0000c8  db02              BLT      |L12.208|
0000ca  201f              MOVS     r0,#0x1f              ;605
0000cc  4902              LDR      r1,|L12.216|
0000ce  8008              STRH     r0,[r1,#0]            ;605
                  |L12.208|
0000d0  bf00              NOP      
0000d2  e7ef              B        |L12.180|
;;;607    
                          ENDP

                  |L12.212|
                          DCD      |symbol_number.47|
                  |L12.216|
                          DCD      |symbol_number.46|
                  |L12.220|
                          DCD      |symbol_number.42|
                  |L12.224|
                          DCD      |symbol_number.43|
                  |L12.228|
                          DCD      ||fg||
                  |L12.232|
                          DCD      count_rx
                  |L12.236|
                          DCD      Rxcounter
                  |L12.240|
                          DCD      Rx_Buf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  HtoEs_OutPut_Buffer
                          %        64
                  aCmdBuf
                          %        64
                  aCmdBuf1
                          %        32
                  |symbol_number.42|
                          %        64
                  |symbol_number.43|
                          %        32

                          AREA ||.data||, DATA, ALIGN=2

                  i
                          DCD      0x00000000
                  F
                          DCD      0x00000000
                  ||sw||
                          DCD      0x00000000
                  HtoEs_test
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  05060708          DCB      0x05,0x06,0x07,0x08
000014  090a0000          DCB      0x09,0x0a,0x00,0x00
                          %        52
                  CHK_SUM
                          DCD      0x00000000
                  Flag_Uart_Send
000050  00000000          DCB      0x00,0x00,0x00,0x00
                  CH1_data
000054  00000000          DCFS     0x00000000 ; 0
                  CH2_data
000058  00000000          DCFS     0x00000000 ; 0
                  CH3_data
00005c  00000000          DCFS     0x00000000 ; 0
                  CH4_data
000060  00000000          DCFS     0x00000000 ; 0
                  CH5_data
000064  00000000          DCFS     0x00000000 ; 0
                  CH6_data
000068  00000000          DCFS     0x00000000 ; 0
                  CH7_data
00006c  00000000          DCFS     0x00000000 ; 0
                  CH8_data
000070  00000000          DCFS     0x00000000 ; 0
                  CH9_data
000074  00000000          DCFS     0x00000000 ; 0
                  CH10_data
000078  00000000          DCFS     0x00000000 ; 0
                  CH11_data
00007c  00000000          DCFS     0x00000000 ; 0
                  CH12_data
000080  00000000          DCFS     0x00000000 ; 0
                  CH13_data
000084  00000000          DCFS     0x00000000 ; 0
                  CH14_data
000088  00000000          DCFS     0x00000000 ; 0
                  CH15_data
00008c  00000000          DCFS     0x00000000 ; 0
                  Longitude_val
                          DCD      0x00000000
                  Latitude_Val
                          DCD      0x00000000
                  Altitude_Val
                          DCD      0x00000000
                  Dir_Val
                          DCD      0x00000000
                  SPD_Val
                          DCD      0x00000000
                  Satellite_Val
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
                  Voltage_Val
                          DCD      0x00000000
                  Temperture_Val
                          DCD      0x00000000
                  Longitude_WE
0000b0  00                DCB      0x00
                  Latitude_NS
0000b1  00                DCB      0x00
                  Location_Sta
0000b2  0000              DCB      0x00,0x00
                  Pitch_PID_P
                          DCD      0x00000000
                  Pitch_PID_I
                          DCD      0x00000000
                  Pitch_PID_D
                          DCD      0x00000000
                  Roll_PID_P
                          DCD      0x00000000
                  Roll_PID_I
                          DCD      0x00000000
                  Roll_PID_D
                          DCD      0x00000000
                  Yaw_PID_P
                          DCD      0x00000000
                  Yaw_PID_I
                          DCD      0x00000000
                  Yaw_PID_D
                          DCD      0x00000000
                  Alt_PID_P
                          DCD      0x00000000
                  Alt_PID_I
                          DCD      0x00000000
                  Alt_PID_D
                          DCD      0x00000000
                  Pos_PID_P
                          DCD      0x00000000
                  Pos_PID_I
                          DCD      0x00000000
                  Pos_PID_D
                          DCD      0x00000000
                  ||fg||
0000f0  0a00              DCB      0x0a,0x00
                  usPos
0000f2  0000              DCB      0x00,0x00
                  Free_heart
0000f4  0000              DCW      0x0000
                  |symbol_number.46|
0000f6  0000              DCB      0x00,0x00
                  |symbol_number.47|
0000f8  0000              DCW      0x0000
