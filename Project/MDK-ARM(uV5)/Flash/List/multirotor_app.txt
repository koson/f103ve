; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\multirotor_app.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\multirotor_app.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Driver\STMFLASH -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Driver\Modules_hmc5883 -I..\..\User\Driver\Modules_mpu6050 -I..\..\User\Driver\Modules_ms5611 -I..\..\User\Driver\Modules_oled -I..\..\User\Driver\Modules_ultrasonic -I..\..\User\Function\Heigh -I"C:\Users\Administrator\Desktop\机器人课飞控\机器人课无人机原始程序 - 副本\Project\MDK-ARM(uV5)\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\multirotor_app.crf ..\..\User\Function\MultiRotor_app\MultiRotor_app.c]
                          THUMB

                          AREA ||i.System_Init||, CODE, READONLY, ALIGN=2

                  System_Init PROC
;;;24     
;;;25     void System_Init(void)
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27     	delay_init(72);
000002  2048              MOVS     r0,#0x48
000004  f7fffffe          BL       delay_init
;;;28     	Nvic_Init();
000008  f7fffffe          BL       Nvic_Init
;;;29     	I2C_INIT();
00000c  f7fffffe          BL       I2C_INIT
;;;30     	LED_GPIO_Config();
000010  f7fffffe          BL       LED_GPIO_Config
;;;31     	USART1_Config();
000014  f7fffffe          BL       USART1_Config
;;;32     	TIM5_Config();
000018  f7fffffe          BL       TIM5_Config
;;;33     	PWM_OUT_Config();
00001c  f7fffffe          BL       PWM_OUT_Config
;;;34     	PWM_IN_Config();
000020  f7fffffe          BL       PWM_IN_Config
;;;35     	ECS_Calibrate();
000024  f7fffffe          BL       ECS_Calibrate
;;;36     	Ultrasonic_Config();
000028  f7fffffe          BL       Ultrasonic_Config
;;;37     	LED_SHOW();
00002c  f7fffffe          BL       LED_SHOW
;;;38     	FLASH_Unlock();
000030  f7fffffe          BL       FLASH_Unlock
;;;39     	EE_Init();	
000034  f7fffffe          BL       EE_Init
;;;40     	flag.MpuExist = InitMPU6050();
000038  f7fffffe          BL       InitMPU6050
00003c  4901              LDR      r1,|L1.68|
00003e  7008              STRB     r0,[r1,#0]
;;;41     }
000040  bd10              POP      {r4,pc}
;;;42     
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      flag

                          AREA ||i.Task||, CODE, READONLY, ALIGN=2

                  Task PROC
;;;46     
;;;47     void Task(void)
000000  b510              PUSH     {r4,lr}
;;;48     {	
;;;49     	if(flag.Loop_100Hz){
000002  4813              LDR      r0,|L2.80|
000004  7b40              LDRB     r0,[r0,#0xd]  ; flag
000006  b120              CBZ      r0,|L2.18|
;;;50     		flag.Loop_100Hz=0;
000008  2000              MOVS     r0,#0
00000a  4911              LDR      r1,|L2.80|
00000c  7348              STRB     r0,[r1,#0xd]
;;;51     		#ifdef ANO 
;;;52     			ANO_DT_Data_Exchange();					//使用匿名地面站发送与接收数据	
00000e  f7fffffe          BL       ANO_DT_Data_Exchange
                  |L2.18|
;;;53     		#endif 	
;;;54     	}
;;;55     		
;;;56     	if(flag.Loop_20Hz){
000012  480f              LDR      r0,|L2.80|
000014  7c00              LDRB     r0,[r0,#0x10]  ; flag
000016  b110              CBZ      r0,|L2.30|
;;;57     			flag.Loop_20Hz=0;
000018  2000              MOVS     r0,#0
00001a  490d              LDR      r1,|L2.80|
00001c  7408              STRB     r0,[r1,#0x10]
                  |L2.30|
;;;58     	}
;;;59     
;;;60     	if(flag.Loop_200Hz){
00001e  480c              LDR      r0,|L2.80|
000020  7b00              LDRB     r0,[r0,#0xc]  ; flag
000022  b130              CBZ      r0,|L2.50|
;;;61     			flag.Loop_200Hz=0;
000024  2000              MOVS     r0,#0
000026  490a              LDR      r1,|L2.80|
000028  7308              STRB     r0,[r1,#0xc]
;;;62     			usart_data_RX();
00002a  f7fffffe          BL       usart_data_RX
;;;63     			FailSafeLEDAlarm();			
00002e  f7fffffe          BL       FailSafeLEDAlarm
                  |L2.50|
;;;64     	}
;;;65     		
;;;66     	if(flag.Loop_40Hz){
000032  4807              LDR      r0,|L2.80|
000034  7b80              LDRB     r0,[r0,#0xe]  ; flag
000036  b110              CBZ      r0,|L2.62|
;;;67     			flag.Loop_40Hz=0;
000038  2000              MOVS     r0,#0
00003a  4905              LDR      r1,|L2.80|
00003c  7388              STRB     r0,[r1,#0xe]
                  |L2.62|
;;;68     	}
;;;69     
;;;70     	if(flag.Loop_10Hz)
00003e  4804              LDR      r0,|L2.80|
000040  7c40              LDRB     r0,[r0,#0x11]  ; flag
000042  b120              CBZ      r0,|L2.78|
;;;71     		{
;;;72     		  flag.Loop_10Hz=0;
000044  2000              MOVS     r0,#0
000046  4902              LDR      r1,|L2.80|
000048  7448              STRB     r0,[r1,#0x11]
;;;73     			EE_SAVE_Attitude_PID();		
00004a  f7fffffe          BL       EE_SAVE_Attitude_PID
                  |L2.78|
;;;74     		}
;;;75     }
00004e  bd10              POP      {r4,pc}
;;;76     
                          ENDP

                  |L2.80|
                          DCD      flag

                          AREA ||i.Time_slice||, CODE, READONLY, ALIGN=2

                  Time_slice PROC
;;;85     /*====================================================================================================*/
;;;86     void Time_slice(void)
000000  482b              LDR      r0,|L3.176|
;;;87     {
;;;88       static u16 tick[6]={0,0,0,0,0,0};
;;;89     	
;;;90     	tick[0]++;tick[1]++;tick[2]++;tick[3]++;tick[4]++;tick[5]++;
000002  8800              LDRH     r0,[r0,#0]  ; tick
000004  1c40              ADDS     r0,r0,#1
000006  492a              LDR      r1,|L3.176|
000008  8008              STRH     r0,[r1,#0]
00000a  4608              MOV      r0,r1
00000c  8840              LDRH     r0,[r0,#2]  ; tick
00000e  1c40              ADDS     r0,r0,#1
000010  8048              STRH     r0,[r1,#2]
000012  4608              MOV      r0,r1
000014  8880              LDRH     r0,[r0,#4]  ; tick
000016  1c40              ADDS     r0,r0,#1
000018  8088              STRH     r0,[r1,#4]
00001a  4608              MOV      r0,r1
00001c  88c0              LDRH     r0,[r0,#6]  ; tick
00001e  1c40              ADDS     r0,r0,#1
000020  80c8              STRH     r0,[r1,#6]
000022  4608              MOV      r0,r1
000024  8900              LDRH     r0,[r0,#8]  ; tick
000026  1c40              ADDS     r0,r0,#1
000028  8108              STRH     r0,[r1,#8]
00002a  4608              MOV      r0,r1
00002c  8940              LDRH     r0,[r0,#0xa]  ; tick
00002e  1c40              ADDS     r0,r0,#1
000030  8148              STRH     r0,[r1,#0xa]
;;;91     	
;;;92     	if(tick[0]>=2){
000032  4608              MOV      r0,r1
000034  8800              LDRH     r0,[r0,#0]  ; tick
000036  2802              CMP      r0,#2
000038  db04              BLT      |L3.68|
;;;93     		tick[0] = 0;
00003a  2000              MOVS     r0,#0
00003c  8008              STRH     r0,[r1,#0]
;;;94     		flag.Loop_200Hz = 1;
00003e  2001              MOVS     r0,#1
000040  491c              LDR      r1,|L3.180|
000042  7308              STRB     r0,[r1,#0xc]
                  |L3.68|
;;;95     	}
;;;96       if(tick[1]>=4){
000044  481a              LDR      r0,|L3.176|
000046  8840              LDRH     r0,[r0,#2]  ; tick
000048  2804              CMP      r0,#4
00004a  db07              BLT      |L3.92|
;;;97     		tick[1] = 0;
00004c  2000              MOVS     r0,#0
00004e  4918              LDR      r1,|L3.176|
000050  8048              STRH     r0,[r1,#2]
;;;98     		flag.Loop_100Hz = 1;
000052  2001              MOVS     r0,#1
000054  4917              LDR      r1,|L3.180|
000056  7348              STRB     r0,[r1,#0xd]
;;;99         timetoconver=1;
000058  4917              LDR      r1,|L3.184|
00005a  7008              STRB     r0,[r1,#0]
                  |L3.92|
;;;100    	}	
;;;101    	  if(tick[2]>=10){
00005c  4814              LDR      r0,|L3.176|
00005e  8880              LDRH     r0,[r0,#4]  ; tick
000060  280a              CMP      r0,#0xa
000062  db05              BLT      |L3.112|
;;;102    		tick[2] = 0;
000064  2000              MOVS     r0,#0
000066  4912              LDR      r1,|L3.176|
000068  8088              STRH     r0,[r1,#4]
;;;103    		flag.Loop_40Hz = 1;
00006a  2001              MOVS     r0,#1
00006c  4911              LDR      r1,|L3.180|
00006e  7388              STRB     r0,[r1,#0xe]
                  |L3.112|
;;;104    	}	
;;;105    	  if(tick[3]>=15){
000070  480f              LDR      r0,|L3.176|
000072  88c0              LDRH     r0,[r0,#6]  ; tick
000074  280f              CMP      r0,#0xf
000076  db05              BLT      |L3.132|
;;;106    		tick[3] = 0;
000078  2000              MOVS     r0,#0
00007a  490d              LDR      r1,|L3.176|
00007c  80c8              STRH     r0,[r1,#6]
;;;107    		flag.Loop_27Hz = 1;
00007e  2001              MOVS     r0,#1
000080  490c              LDR      r1,|L3.180|
000082  73c8              STRB     r0,[r1,#0xf]
                  |L3.132|
;;;108    	}			
;;;109      if(tick[4] >= 40)	{
000084  480a              LDR      r0,|L3.176|
000086  8900              LDRH     r0,[r0,#8]  ; tick
000088  2828              CMP      r0,#0x28
00008a  db05              BLT      |L3.152|
;;;110    		tick[4] = 0;
00008c  2000              MOVS     r0,#0
00008e  4908              LDR      r1,|L3.176|
000090  8108              STRH     r0,[r1,#8]
;;;111    		flag.Loop_10Hz = 1;
000092  2001              MOVS     r0,#1
000094  4907              LDR      r1,|L3.180|
000096  7448              STRB     r0,[r1,#0x11]
                  |L3.152|
;;;112    	}
;;;113    	if(tick[5] >= 20)	{
000098  4805              LDR      r0,|L3.176|
00009a  8940              LDRH     r0,[r0,#0xa]  ; tick
00009c  2814              CMP      r0,#0x14
00009e  db05              BLT      |L3.172|
;;;114    	  tick[5] = 0;
0000a0  2000              MOVS     r0,#0
0000a2  4903              LDR      r1,|L3.176|
0000a4  8148              STRH     r0,[r1,#0xa]
;;;115    	  flag.Loop_20Hz = 1;
0000a6  2001              MOVS     r0,#1
0000a8  4902              LDR      r1,|L3.180|
0000aa  7408              STRB     r0,[r1,#0x10]
                  |L3.172|
;;;116      }
;;;117    }
0000ac  4770              BX       lr
;;;118    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L3.176|
                          DCD      tick
                  |L3.180|
                          DCD      flag
                  |L3.184|
                          DCD      timetoconver

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  RXBUF
                          %        32
                  flag
                          %        24
                  Kalman_Data
                          %        16
                  tick
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  Battery_Voltage
                          DCD      0x00000000
                  NRFRXOK
000004  00                DCB      0x00
                  RXstate
000005  00                DCB      0x00
                  tempnum
000006  0000              DCB      0x00,0x00
                  testT
                          DCD      0x00000000
                  testT_old
                          DCD      0x00000000
                  DISARMED_count
                          DCD      0x00000000
                  RC_count
                          DCD      0x00000000
