; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\nrf24l01.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\nrf24l01.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\GPS -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Heigh -IC:\Users\Administrator\Desktop\Ama\高位ME421\Project\MDK-ARM(uV5)\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\nrf24l01.crf ..\..\User\Modules\Modules_nrf24L01\NRF24L01.c]
                          THUMB

                          AREA ||i.EXTI_NRFinit||, CODE, READONLY, ALIGN=1

                  EXTI_NRFinit PROC
;;;270    
;;;271    void EXTI_NRFinit(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;272    {
;;;273    	/* 配置NRF接收中断 */
;;;274    		EXTI_InitTypeDef EXTI_InitStructure;
;;;275    		/* 配置外部中断线4连接到PD4 */
;;;276    		EXTI_ClearITPendingBit(EXTI_Line4);
000002  2010              MOVS     r0,#0x10
000004  f7fffffe          BL       EXTI_ClearITPendingBit
;;;277    		GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource4);
000008  2104              MOVS     r1,#4
00000a  2003              MOVS     r0,#3
00000c  f7fffffe          BL       GPIO_EXTILineConfig
;;;278    
;;;279    		EXTI_InitStructure.EXTI_Line = EXTI_Line4; /*  */
000010  2010              MOVS     r0,#0x10
000012  9000              STR      r0,[sp,#0]
;;;280    		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
000014  2000              MOVS     r0,#0
000016  f88d0004          STRB     r0,[sp,#4]
;;;281    		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
00001a  200c              MOVS     r0,#0xc
00001c  f88d0005          STRB     r0,[sp,#5]
;;;282    		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
000020  2001              MOVS     r0,#1
000022  f88d0006          STRB     r0,[sp,#6]
;;;283    		EXTI_Init(&EXTI_InitStructure);
000026  4668              MOV      r0,sp
000028  f7fffffe          BL       EXTI_Init
;;;284    }
00002c  bd1c              POP      {r2-r4,pc}
                          ENDP


                          AREA ||i.NRF24L01_Check||, CODE, READONLY, ALIGN=2

                  NRF24L01_Check PROC
;;;44     /*====================================================================================================*/
;;;45     u8 NRF24L01_Check(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;46     {
;;;47     	u8 buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
000002  a112              ADR      r1,|L2.76|
000004  c903              LDM      r1,{r0,r1}
000006  e9cd0100          STRD     r0,r1,[sp,#0]
;;;48     	u8 i;  	 
;;;49     	NRF24L01_Write_Buf(WRITE_REG_NRF+TX_ADDR,buf,5);//写入5个字节的地址.	
00000a  2205              MOVS     r2,#5
00000c  4669              MOV      r1,sp
00000e  2030              MOVS     r0,#0x30
000010  f7fffffe          BL       NRF24L01_Write_Buf
;;;50     	NRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址  
000014  2205              MOVS     r2,#5
000016  4669              MOV      r1,sp
000018  2010              MOVS     r0,#0x10
00001a  f7fffffe          BL       NRF24L01_Read_Buf
;;;51     	rxdata1=buf[1];
00001e  f89d0001          LDRB     r0,[sp,#1]
000022  490c              LDR      r1,|L2.84|
000024  7008              STRB     r0,[r1,#0]
;;;52     	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;	 							   
000026  2400              MOVS     r4,#0
000028  e006              B        |L2.56|
                  |L2.42|
00002a  f81d0004          LDRB     r0,[sp,r4]
00002e  28a5              CMP      r0,#0xa5
000030  d000              BEQ      |L2.52|
000032  e003              B        |L2.60|
                  |L2.52|
000034  1c60              ADDS     r0,r4,#1
000036  b2c4              UXTB     r4,r0
                  |L2.56|
000038  2c05              CMP      r4,#5
00003a  dbf6              BLT      |L2.42|
                  |L2.60|
00003c  bf00              NOP      
;;;53     	if(i!=5)return 0;//检测24L01错误	
00003e  2c05              CMP      r4,#5
000040  d001              BEQ      |L2.70|
000042  2000              MOVS     r0,#0
                  |L2.68|
;;;54     	return 1;		 //检测到24L01
;;;55     }	 	 
000044  bd1c              POP      {r2-r4,pc}
                  |L2.70|
000046  2001              MOVS     r0,#1                 ;54
000048  e7fc              B        |L2.68|
;;;56     /*====================================================================================================*/
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
00004c  a5a5a5a5          DCB      165,165,165,165,165,0
000050  a500    
000052  00                DCB      0
000053  00                DCB      0
                  |L2.84|
                          DCD      rxdata1

                          AREA ||i.NRF24L01_Init||, CODE, READONLY, ALIGN=2

                  NRF24L01_Init PROC
;;;28     /*====================================================================================================*/
;;;29     void NRF24L01_Init(void)
000000  b510              PUSH     {r4,lr}
;;;30     { 	
;;;31     	NRF24L01_CE_L();
000002  2108              MOVS     r1,#8
000004  4806              LDR      r0,|L3.32|
000006  f7fffffe          BL       GPIO_ResetBits
;;;32     	NRF24L01_CSN_H();
00000a  f44f4100          MOV      r1,#0x8000
00000e  4805              LDR      r0,|L3.36|
000010  f7fffffe          BL       GPIO_SetBits
;;;33     	SPI3_Config();
000014  f7fffffe          BL       SPI3_Config
;;;34     	EXTI_NRFinit();//接收中断配置	
000018  f7fffffe          BL       EXTI_NRFinit
;;;35     }
00001c  bd10              POP      {r4,pc}
;;;36     /*====================================================================================================*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      0x40011400
                  |L3.36|
                          DCD      0x40010800

                          AREA ||i.NRF24L01_Mode||, CODE, READONLY, ALIGN=2

                  NRF24L01_Mode PROC
;;;193    /*====================================================================================================*/
;;;194    void NRF24L01_Mode(u8 model)
000000  b510              PUSH     {r4,lr}
;;;195    {
000002  4604              MOV      r4,r0
;;;196    	 NRF24L01_CE_L();     
000004  2108              MOVS     r1,#8
000006  4839              LDR      r0,|L4.236|
000008  f7fffffe          BL       GPIO_ResetBits
;;;197       NRF24L01_Write_Buf(WRITE_REG_NRF+TX_ADDR,(u8*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址 
00000c  2205              MOVS     r2,#5
00000e  4938              LDR      r1,|L4.240|
000010  2030              MOVS     r0,#0x30
000012  f7fffffe          BL       NRF24L01_Write_Buf
;;;198       NRF24L01_Write_Buf(WRITE_REG_NRF+RX_ADDR_P0,(u8*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK	  
000016  2205              MOVS     r2,#5
000018  4936              LDR      r1,|L4.244|
00001a  202a              MOVS     r0,#0x2a
00001c  f7fffffe          BL       NRF24L01_Write_Buf
;;;199    
;;;200       NRF24L01_Write_Reg(WRITE_REG_NRF+EN_AA,0x01);     //使能通道0的自动应答    00表示不应答
000020  2101              MOVS     r1,#1
000022  2021              MOVS     r0,#0x21
000024  f7fffffe          BL       NRF24L01_Write_Reg
;;;201       NRF24L01_Write_Reg(WRITE_REG_NRF+EN_RXADDR,0x01); //使能通道0的接收地址  为0，不接收
000028  2101              MOVS     r1,#1
00002a  2022              MOVS     r0,#0x22
00002c  f7fffffe          BL       NRF24L01_Write_Reg
;;;202       NRF24L01_Write_Reg(WRITE_REG_NRF+SETUP_RETR,0x1a);//设置自动重发间隔时间:500us + 86us;最大自动重发次数:10次 不重发
000030  211a              MOVS     r1,#0x1a
000032  2024              MOVS     r0,#0x24
000034  f7fffffe          BL       NRF24L01_Write_Reg
;;;203       NRF24L01_Write_Reg(WRITE_REG_NRF+RF_CH,0x73);       //设置RF通道为40设置信道工作为2.5GHZ，收发必须一致
000038  2173              MOVS     r1,#0x73
00003a  2025              MOVS     r0,#0x25
00003c  f7fffffe          BL       NRF24L01_Write_Reg
;;;204       NRF24L01_Write_Reg(WRITE_REG_NRF+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启  
000040  210f              MOVS     r1,#0xf
000042  2026              MOVS     r0,#0x26
000044  f7fffffe          BL       NRF24L01_Write_Reg
;;;205    /////////////////////////////////////////////////////////
;;;206    	if(model==1)				//RX
000048  2c01              CMP      r4,#1
00004a  d108              BNE      |L4.94|
;;;207    	{
;;;208    		NRF24L01_Write_Reg(WRITE_REG_NRF+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度 
00004c  2120              MOVS     r1,#0x20
00004e  2031              MOVS     r0,#0x31
000050  f7fffffe          BL       NRF24L01_Write_Reg
;;;209    		NRF24L01_Write_Reg(WRITE_REG_NRF + CONFIG, 0x0f);   		 // IRQ收发完成中断开启,16位CRC,主接收
000054  210f              MOVS     r1,#0xf
000056  2020              MOVS     r0,#0x20
000058  f7fffffe          BL       NRF24L01_Write_Reg
00005c  e041              B        |L4.226|
                  |L4.94|
;;;210    	}
;;;211    	else if(model==2)		//TX
00005e  2c02              CMP      r4,#2
000060  d108              BNE      |L4.116|
;;;212    	{
;;;213    		NRF24L01_Write_Reg(WRITE_REG_NRF+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度 
000062  2120              MOVS     r1,#0x20
000064  2031              MOVS     r0,#0x31
000066  f7fffffe          BL       NRF24L01_Write_Reg
;;;214    		NRF24L01_Write_Reg(WRITE_REG_NRF + CONFIG, 0x0e);   		 // IRQ收发完成中断开启,16位CRC,主发送
00006a  210e              MOVS     r1,#0xe
00006c  2020              MOVS     r0,#0x20
00006e  f7fffffe          BL       NRF24L01_Write_Reg
000072  e036              B        |L4.226|
                  |L4.116|
;;;215    	}
;;;216    	else if(model==3)		//RX2
000074  2c03              CMP      r4,#3
000076  d11a              BNE      |L4.174|
;;;217    	{
;;;218    		NRF24L01_Write_Reg(FLUSH_TX,0xff);
000078  21ff              MOVS     r1,#0xff
00007a  20e1              MOVS     r0,#0xe1
00007c  f7fffffe          BL       NRF24L01_Write_Reg
;;;219    		NRF24L01_Write_Reg(FLUSH_RX,0xff);
000080  21ff              MOVS     r1,#0xff
000082  20e2              MOVS     r0,#0xe2
000084  f7fffffe          BL       NRF24L01_Write_Reg
;;;220    		NRF24L01_Write_Reg(WRITE_REG_NRF + CONFIG, 0x3f);   		 // IRQ收发完成中断开启,16位CRC,主接收0x0f
000088  213f              MOVS     r1,#0x3f
00008a  2020              MOVS     r0,#0x20
00008c  f7fffffe          BL       NRF24L01_Write_Reg
;;;221    																													//高位为3表示屏蔽发送中断
;;;222    		
;;;223    		SPI3_ReadWriteByte(0x50);
000090  2050              MOVS     r0,#0x50
000092  f7fffffe          BL       SPI3_ReadWriteByte
;;;224    		SPI3_ReadWriteByte(0x73);
000096  2073              MOVS     r0,#0x73
000098  f7fffffe          BL       SPI3_ReadWriteByte
;;;225    		NRF24L01_Write_Reg(WRITE_REG_NRF+0x1c,0x01);
00009c  2101              MOVS     r1,#1
00009e  203c              MOVS     r0,#0x3c
0000a0  f7fffffe          BL       NRF24L01_Write_Reg
;;;226    		NRF24L01_Write_Reg(WRITE_REG_NRF+0x1d,0x07);
0000a4  2107              MOVS     r1,#7
0000a6  203d              MOVS     r0,#0x3d
0000a8  f7fffffe          BL       NRF24L01_Write_Reg
0000ac  e019              B        |L4.226|
                  |L4.174|
;;;227    	}
;;;228    	else								//TX2
;;;229    	{
;;;230    		NRF24L01_Write_Reg(WRITE_REG_NRF + CONFIG, 0x2e);   		 // IRQ收发完成中断开启,16位CRC,主发送0x0e
0000ae  212e              MOVS     r1,#0x2e
0000b0  2020              MOVS     r0,#0x20
0000b2  f7fffffe          BL       NRF24L01_Write_Reg
;;;231    		NRF24L01_Write_Reg(FLUSH_TX,0xff);											//高位bit4MAX_RT bit5 为1屏蔽TX_DS bit6 RX_DS
0000b6  21ff              MOVS     r1,#0xff
0000b8  20e1              MOVS     r0,#0xe1
0000ba  f7fffffe          BL       NRF24L01_Write_Reg
;;;232    		NRF24L01_Write_Reg(FLUSH_RX,0xff);											//对于飞控，发送模式2e才是好用的
0000be  21ff              MOVS     r1,#0xff
0000c0  20e2              MOVS     r0,#0xe2
0000c2  f7fffffe          BL       NRF24L01_Write_Reg
;;;233    		
;;;234    		SPI3_ReadWriteByte(0x50);
0000c6  2050              MOVS     r0,#0x50
0000c8  f7fffffe          BL       SPI3_ReadWriteByte
;;;235    		SPI3_ReadWriteByte(0x73);
0000cc  2073              MOVS     r0,#0x73
0000ce  f7fffffe          BL       SPI3_ReadWriteByte
;;;236    		NRF24L01_Write_Reg(WRITE_REG_NRF+0x1c,0x01);
0000d2  2101              MOVS     r1,#1
0000d4  203c              MOVS     r0,#0x3c
0000d6  f7fffffe          BL       NRF24L01_Write_Reg
;;;237    		NRF24L01_Write_Reg(WRITE_REG_NRF+0x1d,0x07);
0000da  2107              MOVS     r1,#7
0000dc  203d              MOVS     r0,#0x3d
0000de  f7fffffe          BL       NRF24L01_Write_Reg
                  |L4.226|
;;;238    	}
;;;239    	NRF24L01_CE_H(); 
0000e2  2108              MOVS     r1,#8
0000e4  4801              LDR      r0,|L4.236|
0000e6  f7fffffe          BL       GPIO_SetBits
;;;240    }
0000ea  bd10              POP      {r4,pc}
;;;241    
                          ENDP

                  |L4.236|
                          DCD      0x40011400
                  |L4.240|
                          DCD      TX_ADDRESS
                  |L4.244|
                          DCD      RX_ADDRESS

                          AREA ||i.NRF24L01_Read_Buf||, CODE, READONLY, ALIGN=2

                  NRF24L01_Read_Buf PROC
;;;100    /*====================================================================================================*/
;;;101    u8 NRF24L01_Read_Buf(u8 reg,u8 *pBuf,u8 len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;102    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;103    	  u8 status,u8_ctr;	       
;;;104      	NRF24L01_CSN_L();           //使能SPI传输
00000a  f44f4100          MOV      r1,#0x8000
00000e  480c              LDR      r0,|L5.64|
000010  f7fffffe          BL       GPIO_ResetBits
;;;105      	status=SPI3_ReadWriteByte(reg);//发送寄存器值(位置),并读取状态值   	   
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       SPI3_ReadWriteByte
00001a  4680              MOV      r8,r0
;;;106     	  for(u8_ctr=0;u8_ctr<len;u8_ctr++)pBuf[u8_ctr]=SPI3_ReadWriteByte(0XFF);//读出数据
00001c  2400              MOVS     r4,#0
00001e  e005              B        |L5.44|
                  |L5.32|
000020  20ff              MOVS     r0,#0xff
000022  f7fffffe          BL       SPI3_ReadWriteByte
000026  5528              STRB     r0,[r5,r4]
000028  1c60              ADDS     r0,r4,#1
00002a  b2c4              UXTB     r4,r0
                  |L5.44|
00002c  42b4              CMP      r4,r6
00002e  dbf7              BLT      |L5.32|
;;;107      	NRF24L01_CSN_H();       //关闭SPI传输
000030  f44f4100          MOV      r1,#0x8000
000034  4802              LDR      r0,|L5.64|
000036  f7fffffe          BL       GPIO_SetBits
;;;108      	return status;        //返回读到的状态值
00003a  4640              MOV      r0,r8
;;;109    }
00003c  e8bd81f0          POP      {r4-r8,pc}
;;;110    /*====================================================================================================*/
                          ENDP

                  |L5.64|
                          DCD      0x40010800

                          AREA ||i.NRF24L01_Read_Reg||, CODE, READONLY, ALIGN=2

                  NRF24L01_Read_Reg PROC
;;;82     /*====================================================================================================*/
;;;83     u8 NRF24L01_Read_Reg(u8 reg)
000000  b570              PUSH     {r4-r6,lr}
;;;84     {
000002  4604              MOV      r4,r0
;;;85     	  u8 reg_val;	    
;;;86      	  NRF24L01_CSN_L();;          //使能SPI传输		
000004  f44f4100          MOV      r1,#0x8000
000008  4808              LDR      r0,|L6.44|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;87       	SPI3_ReadWriteByte(reg);   //发送寄存器号
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       SPI3_ReadWriteByte
;;;88       	reg_val=SPI3_ReadWriteByte(0XFF);//读取寄存器内容
000014  20ff              MOVS     r0,#0xff
000016  f7fffffe          BL       SPI3_ReadWriteByte
00001a  4605              MOV      r5,r0
;;;89       	NRF24L01_CSN_H();;          //禁止SPI传输		    
00001c  f44f4100          MOV      r1,#0x8000
000020  4802              LDR      r0,|L6.44|
000022  f7fffffe          BL       GPIO_SetBits
;;;90       	return(reg_val);           //返回状态值
000026  4628              MOV      r0,r5
;;;91     }	
000028  bd70              POP      {r4-r6,pc}
;;;92     /*====================================================================================================*/
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      0x40010800

                          AREA ||i.NRF24L01_RxPacket||, CODE, READONLY, ALIGN=2

                  NRF24L01_RxPacket PROC
;;;169    /*====================================================================================================*/
;;;170    u8 NRF24L01_RxPacket(u8 *rxbuf)
000000  b570              PUSH     {r4-r6,lr}
;;;171    {
000002  4604              MOV      r4,r0
;;;172    	u8 sta;		    							   
;;;173    	SPI3_SetSpeed(SPI_BaudRatePrescaler_32); //spi速度为9Mhz（24L01的最大SPI时钟为10Mhz）   
000004  2020              MOVS     r0,#0x20
000006  f7fffffe          BL       SPI3_SetSpeed
;;;174    	sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值    	 
00000a  2007              MOVS     r0,#7
00000c  f7fffffe          BL       NRF24L01_Read_Reg
000010  4605              MOV      r5,r0
;;;175    	NRF24L01_Write_Reg(WRITE_REG_NRF+STATUS,sta); //清除TX_DS或MAX_RT中断标志
000012  4629              MOV      r1,r5
000014  2027              MOVS     r0,#0x27
000016  f7fffffe          BL       NRF24L01_Write_Reg
;;;176    	if(sta&RX_OK)//接收到数据
00001a  f0050040          AND      r0,r5,#0x40
00001e  b178              CBZ      r0,|L7.64|
;;;177    	{
;;;178    		NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
000020  2220              MOVS     r2,#0x20
000022  4621              MOV      r1,r4
000024  2061              MOVS     r0,#0x61
000026  f7fffffe          BL       NRF24L01_Read_Buf
;;;179    		NRF24L01_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器 
00002a  21ff              MOVS     r1,#0xff
00002c  20e2              MOVS     r0,#0xe2
00002e  f7fffffe          BL       NRF24L01_Write_Reg
;;;180    			GPIO_SetBits(GPIOE, GPIO_Pin_15 );	
000032  f44f4100          MOV      r1,#0x8000
000036  4803              LDR      r0,|L7.68|
000038  f7fffffe          BL       GPIO_SetBits
;;;181    		return 0; 
00003c  2000              MOVS     r0,#0
                  |L7.62|
;;;182    	}
;;;183    	return 1;//没收到任何数据
;;;184    }					    
00003e  bd70              POP      {r4-r6,pc}
                  |L7.64|
000040  2001              MOVS     r0,#1                 ;183
000042  e7fc              B        |L7.62|
;;;185    /*====================================================================================================*/
                          ENDP

                  |L7.68|
                          DCD      0x40011800

                          AREA ||i.NRF24L01_TxPacket||, CODE, READONLY, ALIGN=2

                  NRF24L01_TxPacket PROC
;;;136    /*====================================================================================================*/
;;;137    u8 NRF24L01_TxPacket(u8 *txbuf)
000000  b570              PUSH     {r4-r6,lr}
;;;138    {
000002  4605              MOV      r5,r0
;;;139    	u8 sta;
;;;140     	SPI3_SetSpeed(SPI_BaudRatePrescaler_16);//spi速度为9Mhz（24L01的最大SPI时钟为10Mhz）   
000004  2018              MOVS     r0,#0x18
000006  f7fffffe          BL       SPI3_SetSpeed
;;;141    	NRF24L01_CE_L();
00000a  2108              MOVS     r1,#8
00000c  4813              LDR      r0,|L8.92|
00000e  f7fffffe          BL       GPIO_ResetBits
;;;142      NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);//写数据到TX BUF  32个字节  
000012  2220              MOVS     r2,#0x20
000014  4629              MOV      r1,r5
000016  20a0              MOVS     r0,#0xa0
000018  f7fffffe          BL       NRF24L01_Write_Buf
;;;143      NRF24L01_CE_H();	
00001c  2108              MOVS     r1,#8
00001e  480f              LDR      r0,|L8.92|
000020  f7fffffe          BL       GPIO_SetBits
;;;144    	delay(2);  //改为延时，而不是一直等待
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       delay
;;;145    	//while(NRF24L01_IRQ!=0);//等待发送完成
;;;146    		   
;;;147    	//while(!(sta&TX_OK))
;;;148    		sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值;
00002a  2007              MOVS     r0,#7
00002c  f7fffffe          BL       NRF24L01_Read_Reg
000030  4604              MOV      r4,r0
;;;149    	NRF24L01_Write_Reg(WRITE_REG_NRF+STATUS,sta); //清除TX_DS或MAX_RT中断标志
000032  4621              MOV      r1,r4
000034  2027              MOVS     r0,#0x27
000036  f7fffffe          BL       NRF24L01_Write_Reg
;;;150    	if(sta&MAX_TX)//达到最大重发次数
00003a  f0040010          AND      r0,r4,#0x10
00003e  b128              CBZ      r0,|L8.76|
;;;151    	{
;;;152    		NRF24L01_Write_Reg(FLUSH_TX,0xff);//清除TX FIFO寄存器 
000040  21ff              MOVS     r1,#0xff
000042  20e1              MOVS     r0,#0xe1
000044  f7fffffe          BL       NRF24L01_Write_Reg
;;;153    		return MAX_TX; 
000048  2010              MOVS     r0,#0x10
                  |L8.74|
;;;154    	}
;;;155    	if(sta&TX_OK)//发送完成
;;;156    	{
;;;157    		return TX_OK;
;;;158    	}
;;;159    	return 0xff;//其他原因发送失败
;;;160    }
00004a  bd70              POP      {r4-r6,pc}
                  |L8.76|
00004c  f0040020          AND      r0,r4,#0x20           ;155
000050  b108              CBZ      r0,|L8.86|
000052  2020              MOVS     r0,#0x20              ;157
000054  e7f9              B        |L8.74|
                  |L8.86|
000056  20ff              MOVS     r0,#0xff              ;159
000058  e7f7              B        |L8.74|
;;;161    /*====================================================================================================*/
                          ENDP

00005a  0000              DCW      0x0000
                  |L8.92|
                          DCD      0x40011400

                          AREA ||i.NRF24L01_Txframes||, CODE, READONLY, ALIGN=1

                  NRF24L01_Txframes PROC
;;;250    u8 tempbuf[64];
;;;251    u8 NRF24L01_Txframes(u8 *txbuf,u8 packlen)
000000  b570              PUSH     {r4-r6,lr}
;;;252    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;253    	u8 txresult;
;;;254    	/*开始发送处理后的帧*/
;;;255    	txresult=NRF24L01_TxPacket(txbuf);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       NRF24L01_TxPacket
00000c  4606              MOV      r6,r0
;;;256      if(packlen>32)
00000e  2c20              CMP      r4,#0x20
000010  dd04              BLE      |L9.28|
;;;257    	  txresult=NRF24L01_TxPacket(&txbuf[32]);
000012  f1050020          ADD      r0,r5,#0x20
000016  f7fffffe          BL       NRF24L01_TxPacket
00001a  4606              MOV      r6,r0
                  |L9.28|
;;;258    
;;;259      if(packlen>64)
00001c  2c40              CMP      r4,#0x40
00001e  dd04              BLE      |L9.42|
;;;260    	  txresult=NRF24L01_TxPacket(&txbuf[64]);
000020  f1050040          ADD      r0,r5,#0x40
000024  f7fffffe          BL       NRF24L01_TxPacket
000028  4606              MOV      r6,r0
                  |L9.42|
;;;261    
;;;262      if(packlen>96)txresult=!TX_OK;//数据长度大于96暂且认为是错误帧
00002a  2c60              CMP      r4,#0x60
00002c  dd00              BLE      |L9.48|
00002e  2600              MOVS     r6,#0
                  |L9.48|
;;;263    
;;;264    	if(txresult==TX_OK)//发送完成
000030  2e20              CMP      r6,#0x20
000032  d101              BNE      |L9.56|
;;;265    	{
;;;266    		return 1;
000034  2001              MOVS     r0,#1
                  |L9.54|
;;;267    	}
;;;268    	return 0;//其他原因发送失败
;;;269    }
000036  bd70              POP      {r4-r6,pc}
                  |L9.56|
000038  2000              MOVS     r0,#0                 ;268
00003a  e7fc              B        |L9.54|
;;;270    
                          ENDP


                          AREA ||i.NRF24L01_Write_Buf||, CODE, READONLY, ALIGN=2

                  NRF24L01_Write_Buf PROC
;;;118    /*====================================================================================================*/
;;;119    u8 NRF24L01_Write_Buf(u8 reg, u8 *pBuf, u8 len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;120    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;121    	  u8 status,u8_ctr;	    
;;;122     	  NRF24L01_CSN_L();          //使能SPI传输
00000a  f44f4100          MOV      r1,#0x8000
00000e  480c              LDR      r0,|L10.64|
000010  f7fffffe          BL       GPIO_ResetBits
;;;123      	status = SPI3_ReadWriteByte(reg);//发送寄存器值(位置),并读取状态值
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       SPI3_ReadWriteByte
00001a  4680              MOV      r8,r0
;;;124      	for(u8_ctr=0; u8_ctr<len; u8_ctr++)SPI3_ReadWriteByte(*pBuf++); //写入数据	 
00001c  2600              MOVS     r6,#0
00001e  e005              B        |L10.44|
                  |L10.32|
000020  f8140b01          LDRB     r0,[r4],#1
000024  f7fffffe          BL       SPI3_ReadWriteByte
000028  1c70              ADDS     r0,r6,#1
00002a  b2c6              UXTB     r6,r0
                  |L10.44|
00002c  42ae              CMP      r6,r5
00002e  dbf7              BLT      |L10.32|
;;;125      	NRF24L01_CSN_H();       //关闭SPI传输
000030  f44f4100          MOV      r1,#0x8000
000034  4802              LDR      r0,|L10.64|
000036  f7fffffe          BL       GPIO_SetBits
;;;126      	return status;          //返回读到的状态值
00003a  4640              MOV      r0,r8
;;;127    }				   
00003c  e8bd81f0          POP      {r4-r8,pc}
;;;128    /*====================================================================================================*/
                          ENDP

                  |L10.64|
                          DCD      0x40010800

                          AREA ||i.NRF24L01_Write_Reg||, CODE, READONLY, ALIGN=2

                  NRF24L01_Write_Reg PROC
;;;64     /*====================================================================================================*/
;;;65     u8 NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;66     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;67     	  u8 status;	
;;;68        	NRF24L01_CSN_L();                 //使能SPI传输
000006  f44f4100          MOV      r1,#0x8000
00000a  4808              LDR      r0,|L11.44|
00000c  f7fffffe          BL       GPIO_ResetBits
;;;69       	status =SPI3_ReadWriteByte(reg);//发送寄存器号 
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       SPI3_ReadWriteByte
000016  4606              MOV      r6,r0
;;;70       	SPI3_ReadWriteByte(value);      //写入寄存器的值
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       SPI3_ReadWriteByte
;;;71       	NRF24L01_CSN_H();                 //禁止SPI传输	   
00001e  f44f4100          MOV      r1,#0x8000
000022  4802              LDR      r0,|L11.44|
000024  f7fffffe          BL       GPIO_SetBits
;;;72       	return(status);       			//返回状态值
000028  4630              MOV      r0,r6
;;;73     }
00002a  bd70              POP      {r4-r6,pc}
;;;74     /*====================================================================================================*/
                          ENDP

                  |L11.44|
                          DCD      0x40010800

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  tempbuf
                          %        64

                          AREA ||.data||, DATA, ALIGN=0

                  TX_ADDRESS
000000  e1e2e3e4          DCB      0xe1,0xe2,0xe3,0xe4
000004  e5                DCB      0xe5
                  RX_ADDRESS
000005  e1e2e3            DCB      0xe1,0xe2,0xe3
000008  e4e5              DCB      0xe4,0xe5
                  SwitchtoRX
00000a  00                DCB      0x00
                  NowMode
00000b  00                DCB      0x00
                  NRFwatchdog
00000c  00                DCB      0x00
