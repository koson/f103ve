; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\oled.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\oled.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Driver\STMFLASH -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Driver\Modules_hmc5883 -I..\..\User\Driver\Modules_mpu6050 -I..\..\User\Driver\Modules_ms5611 -I..\..\User\Driver\Modules_oled -I..\..\User\Driver\Modules_ultrasonic -I..\..\User\Function\Heigh -I"E:\文    件\飞行器\四旋翼\飞控源代码_合集\MultiRotor_1.0.0\Project\MDK-ARM(uV5)\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\oled.crf ..\..\User\Driver\Modules_oled\oled.c]
                          THUMB

                          AREA ||i.Dis_Char||, CODE, READONLY, ALIGN=1

                  Dis_Char PROC
;;;744    
;;;745    void Dis_Char(unsigned char y,unsigned char x,unsigned char asc) 
000000  b5f8              PUSH     {r3-r7,lr}
;;;746    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;747      unsigned char ch2[2];
;;;748    	x=x*8;        
000008  06e0              LSLS     r0,r4,#27
00000a  0e04              LSRS     r4,r0,#24
;;;749    	ch2[0] = asc;	
00000c  f88d6000          STRB     r6,[sp,#0]
;;;750    	ch2[1] = '\0';			//字母占一个字节
000010  2000              MOVS     r0,#0
000012  f88d0001          STRB     r0,[sp,#1]
;;;751    	OLED_P6x8Str(x , y , ch2);	//显示字母
000016  466a              MOV      r2,sp
000018  4629              MOV      r1,r5
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       OLED_P6x8Str
;;;752    }
000020  bdf8              POP      {r3-r7,pc}
;;;753    void Dis_String(unsigned char y, unsigned char x, unsigned char ch[])
                          ENDP


                          AREA ||i.Dis_Float||, CODE, READONLY, ALIGN=2

                  Dis_Float PROC
;;;794    
;;;795    void Dis_Float(unsigned char Y,unsigned char X,double real,unsigned char N) 
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;796    {
000004  b086              SUB      sp,sp,#0x18
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;797    		unsigned char   i_Count=1;
00000a  f04f0a01          MOV      r10,#1
;;;798    		unsigned char   n[12]={0};
00000e  2000              MOVS     r0,#0
000010  9003              STR      r0,[sp,#0xc]
000012  9004              STR      r0,[sp,#0x10]
000014  9005              STR      r0,[sp,#0x14]
;;;799    		long   j=1;  
000016  f04f0901          MOV      r9,#1
;;;800    		int    real_int=0;
00001a  2600              MOVS     r6,#0
;;;801    		double decimal=0;
00001c  bf00              NOP      
;;;802    		unsigned int   real_decimal=0;
00001e  4683              MOV      r11,r0
;;;803    		if(real<0)
000020  2200              MOVS     r2,#0
000022  4613              MOV      r3,r2
000024  4620              MOV      r0,r4
000026  4629              MOV      r1,r5
000028  f7fffffe          BL       __aeabi_cdcmple
00002c  d209              BCS      |L2.66|
;;;804    		{
;;;805    		  real_int=(int)(-real);
00002e  f0854000          EOR      r0,r5,#0x80000000
000032  e9cd4000          STRD     r4,r0,[sp,#0]
000036  4620              MOV      r0,r4
000038  9901              LDR      r1,[sp,#4]
00003a  f7fffffe          BL       __aeabi_d2iz
00003e  4606              MOV      r6,r0
000040  e004              B        |L2.76|
                  |L2.66|
;;;806    		}
;;;807    		else
;;;808    		{
;;;809    		  real_int=(int)real;
000042  4620              MOV      r0,r4
000044  4629              MOV      r1,r5
000046  f7fffffe          BL       __aeabi_d2iz
00004a  4606              MOV      r6,r0
                  |L2.76|
;;;810    		}
;;;811    		decimal=real-real_int;
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       __aeabi_i2d
000052  4622              MOV      r2,r4
000054  462b              MOV      r3,r5
000056  e9cd0100          STRD     r0,r1,[sp,#0]
00005a  f7fffffe          BL       __aeabi_drsub
00005e  4607              MOV      r7,r0
000060  4688              MOV      r8,r1
;;;812    		real_decimal=decimal*1e4;
000062  2200              MOVS     r2,#0
000064  4b54              LDR      r3,|L2.440|
000066  4638              MOV      r0,r7
000068  4641              MOV      r1,r8
00006a  f7fffffe          BL       __aeabi_dmul
00006e  e9cd0100          STRD     r0,r1,[sp,#0]
000072  f7fffffe          BL       __aeabi_d2uiz
000076  4683              MOV      r11,r0
;;;813    		while(real_int/10/j!=0)
000078  e007              B        |L2.138|
                  |L2.122|
;;;814    		{
;;;815    		  j=j*10;i_Count++;  
00007a  eb090089          ADD      r0,r9,r9,LSL #2
00007e  ea4f0940          LSL      r9,r0,#1
000082  f10a0001          ADD      r0,r10,#1
000086  f0000aff          AND      r10,r0,#0xff
                  |L2.138|
00008a  200a              MOVS     r0,#0xa               ;813
00008c  fb96f0f0          SDIV     r0,r6,r0              ;813
000090  fb90f0f9          SDIV     r0,r0,r9              ;813
000094  2800              CMP      r0,#0                 ;813
000096  d1f0              BNE      |L2.122|
;;;816    		} 
;;;817    		n[0]=(real_int/10000)%10; 
000098  f2427010          MOV      r0,#0x2710
00009c  fb96f0f0          SDIV     r0,r6,r0
0000a0  210a              MOVS     r1,#0xa
0000a2  fb90f2f1          SDIV     r2,r0,r1
0000a6  fb010012          MLS      r0,r1,r2,r0
0000aa  b2c0              UXTB     r0,r0
0000ac  f88d000c          STRB     r0,[sp,#0xc]
;;;818    		n[1]=(real_int/1000)%10;
0000b0  f44f707a          MOV      r0,#0x3e8
0000b4  fb96f0f0          SDIV     r0,r6,r0
0000b8  fb90f2f1          SDIV     r2,r0,r1
0000bc  fb010012          MLS      r0,r1,r2,r0
0000c0  b2c0              UXTB     r0,r0
0000c2  f88d000d          STRB     r0,[sp,#0xd]
;;;819    		n[2]=(real_int/100)%10;
0000c6  2064              MOVS     r0,#0x64
0000c8  fb96f0f0          SDIV     r0,r6,r0
0000cc  fb90f2f1          SDIV     r2,r0,r1
0000d0  fb010012          MLS      r0,r1,r2,r0
0000d4  b2c0              UXTB     r0,r0
0000d6  f88d000e          STRB     r0,[sp,#0xe]
;;;820    		n[3]=(real_int/10)%10;
0000da  200a              MOVS     r0,#0xa
0000dc  fb96f0f0          SDIV     r0,r6,r0
0000e0  fb90f2f1          SDIV     r2,r0,r1
0000e4  fb010012          MLS      r0,r1,r2,r0
0000e8  b2c0              UXTB     r0,r0
0000ea  f88d000f          STRB     r0,[sp,#0xf]
;;;821    		n[4]=(real_int/1)%10; 
0000ee  200a              MOVS     r0,#0xa
0000f0  fb96f1f0          SDIV     r1,r6,r0
0000f4  fb006011          MLS      r0,r0,r1,r6
0000f8  b2c0              UXTB     r0,r0
0000fa  f88d0010          STRB     r0,[sp,#0x10]
;;;822    		n[5]='.';
0000fe  202e              MOVS     r0,#0x2e
000100  f88d0011          STRB     r0,[sp,#0x11]
;;;823    		n[6]=(real_decimal/1000)%10;
000104  f44f707a          MOV      r0,#0x3e8
000108  fbbbf0f0          UDIV     r0,r11,r0
00010c  210a              MOVS     r1,#0xa
00010e  fbb0f2f1          UDIV     r2,r0,r1
000112  fb010012          MLS      r0,r1,r2,r0
000116  f88d0012          STRB     r0,[sp,#0x12]
;;;824    		n[7]=(real_decimal/100)%10;
00011a  2064              MOVS     r0,#0x64
00011c  fbbbf0f0          UDIV     r0,r11,r0
000120  fbb0f2f1          UDIV     r2,r0,r1
000124  fb010012          MLS      r0,r1,r2,r0
000128  f88d0013          STRB     r0,[sp,#0x13]
;;;825    		n[8]=(real_decimal/10)%10;
00012c  200a              MOVS     r0,#0xa
00012e  fbbbf0f0          UDIV     r0,r11,r0
000132  fbb0f2f1          UDIV     r2,r0,r1
000136  fb010012          MLS      r0,r1,r2,r0
00013a  f88d0014          STRB     r0,[sp,#0x14]
;;;826    		n[9]=real_decimal%10;
00013e  200a              MOVS     r0,#0xa
000140  fbbbf1f0          UDIV     r1,r11,r0
000144  fb00b011          MLS      r0,r0,r1,r11
000148  f88d0015          STRB     r0,[sp,#0x15]
;;;827    		n[6+N]='\0'; 
00014c  2100              MOVS     r1,#0
00014e  9814              LDR      r0,[sp,#0x50]
000150  1d80              ADDS     r0,r0,#6
000152  aa03              ADD      r2,sp,#0xc
000154  5411              STRB     r1,[r2,r0]
;;;828    		for(j=0;j<10;j++) n[j]=n[j]+16+32;
000156  4689              MOV      r9,r1
000158  e008              B        |L2.364|
                  |L2.346|
00015a  a803              ADD      r0,sp,#0xc
00015c  f8100009          LDRB     r0,[r0,r9]
000160  3030              ADDS     r0,r0,#0x30
000162  a903              ADD      r1,sp,#0xc
000164  f8010009          STRB     r0,[r1,r9]
000168  f1090901          ADD      r9,r9,#1
                  |L2.364|
00016c  f1b90f0a          CMP      r9,#0xa
000170  dbf3              BLT      |L2.346|
;;;829    		if(real<0) 
000172  2200              MOVS     r2,#0
000174  4613              MOV      r3,r2
000176  4620              MOV      r0,r4
000178  4629              MOV      r1,r5
00017a  f7fffffe          BL       __aeabi_cdcmple
00017e  d208              BCS      |L2.402|
;;;830    		{		 
;;;831    		  i_Count+=1;
000180  f10a0001          ADD      r0,r10,#1
000184  f0000aff          AND      r10,r0,#0xff
;;;832    		  n[5-i_Count]='-';
000188  202d              MOVS     r0,#0x2d
00018a  f1ca0105          RSB      r1,r10,#5
00018e  aa03              ADD      r2,sp,#0xc
000190  5450              STRB     r0,[r2,r1]
                  |L2.402|
;;;833    		}
;;;834    		n[5]='.';
000192  202e              MOVS     r0,#0x2e
000194  f88d0011          STRB     r0,[sp,#0x11]
;;;835    		n[6+N]='\0';   
000198  2100              MOVS     r1,#0
00019a  9814              LDR      r0,[sp,#0x50]
00019c  1d80              ADDS     r0,r0,#6
00019e  aa03              ADD      r2,sp,#0xc
0001a0  5411              STRB     r1,[r2,r0]
;;;836    		OLED_P6x8Str(X,Y,&n[5-i_Count]); 
0001a2  f1ca0005          RSB      r0,r10,#5
0001a6  a903              ADD      r1,sp,#0xc
0001a8  1842              ADDS     r2,r0,r1
0001aa  e9dd1006          LDRD     r1,r0,[sp,#0x18]
0001ae  f7fffffe          BL       OLED_P6x8Str
;;;837    }
0001b2  b00a              ADD      sp,sp,#0x28
0001b4  e8bd9ff0          POP      {r4-r12,pc}
;;;838    
                          ENDP

                  |L2.440|
                          DCD      0x40c38800

                          AREA ||i.Dis_Float2||, CODE, READONLY, ALIGN=2

                  Dis_Float2 PROC
;;;838    
;;;839    void Dis_Float2(unsigned char Y,unsigned char X,double real,unsigned char N1,unsigned char N2) 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;840    {
000004  b089              SUB      sp,sp,#0x24
000006  4682              MOV      r10,r0
000008  4689              MOV      r9,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
00000e  f8ddb04c          LDR      r11,[sp,#0x4c]
;;;841    		unsigned char   i_Count=1;
000012  2001              MOVS     r0,#1
000014  9007              STR      r0,[sp,#0x1c]
;;;842    		unsigned char   n[12]={0};
000016  2000              MOVS     r0,#0
000018  9004              STR      r0,[sp,#0x10]
00001a  9005              STR      r0,[sp,#0x14]
00001c  9006              STR      r0,[sp,#0x18]
;;;843    		long   j=1;  
00001e  2401              MOVS     r4,#1
;;;844    		unsigned int   real_int=0;
000020  2500              MOVS     r5,#0
;;;845    		double decimal=0;
000022  bf00              NOP      
;;;846    		unsigned int   real_decimal=0;
000024  2600              MOVS     r6,#0
;;;847    		X=X*8;
000026  ea4f60c9          LSL      r0,r9,#27
00002a  ea4f6910          LSR      r9,r0,#24
;;;848    		real_int=(int)real;
00002e  4638              MOV      r0,r7
000030  4641              MOV      r1,r8
000032  f7fffffe          BL       __aeabi_d2iz
000036  4605              MOV      r5,r0
;;;849    		//Dis_Num(2,0,real_int,5);
;;;850    		decimal=real-real_int;
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       __aeabi_ui2d
00003e  463a              MOV      r2,r7
000040  4643              MOV      r3,r8
000042  e9cd0100          STRD     r0,r1,[sp,#0]
000046  f7fffffe          BL       __aeabi_drsub
00004a  e9cd0102          STRD     r0,r1,[sp,#8]
;;;851    		real_decimal=decimal*1e4;
00004e  2200              MOVS     r2,#0
000050  4b44              LDR      r3,|L3.356|
000052  e9dd0102          LDRD     r0,r1,[sp,#8]
000056  f7fffffe          BL       __aeabi_dmul
00005a  e9cd0100          STRD     r0,r1,[sp,#0]
00005e  f7fffffe          BL       __aeabi_d2uiz
000062  4606              MOV      r6,r0
;;;852    		//Dis_Num(2,6,real_decimal,4);
;;;853    		while(real_int/10/j!=0)
000064  e006              B        |L3.116|
                  |L3.102|
;;;854    		{
;;;855    			j=j*10;i_Count++;  
000066  eb040084          ADD      r0,r4,r4,LSL #2
00006a  0044              LSLS     r4,r0,#1
00006c  9807              LDR      r0,[sp,#0x1c]
00006e  1c40              ADDS     r0,r0,#1
000070  b2c0              UXTB     r0,r0
000072  9007              STR      r0,[sp,#0x1c]
                  |L3.116|
000074  200a              MOVS     r0,#0xa               ;853
000076  fbb5f0f0          UDIV     r0,r5,r0              ;853
00007a  fbb0f0f4          UDIV     r0,r0,r4              ;853
00007e  2800              CMP      r0,#0                 ;853
000080  d1f1              BNE      |L3.102|
;;;856    		} 
;;;857    		n[0]=(real_int/10000)%10; 
000082  f2427010          MOV      r0,#0x2710
000086  fbb5f0f0          UDIV     r0,r5,r0
00008a  210a              MOVS     r1,#0xa
00008c  fbb0f2f1          UDIV     r2,r0,r1
000090  fb010012          MLS      r0,r1,r2,r0
000094  f88d0010          STRB     r0,[sp,#0x10]
;;;858    		n[1]=(real_int/1000)%10;
000098  f44f707a          MOV      r0,#0x3e8
00009c  fbb5f0f0          UDIV     r0,r5,r0
0000a0  fbb0f2f1          UDIV     r2,r0,r1
0000a4  fb010012          MLS      r0,r1,r2,r0
0000a8  f88d0011          STRB     r0,[sp,#0x11]
;;;859    		n[2]=(real_int/100)%10;
0000ac  2064              MOVS     r0,#0x64
0000ae  fbb5f0f0          UDIV     r0,r5,r0
0000b2  fbb0f2f1          UDIV     r2,r0,r1
0000b6  fb010012          MLS      r0,r1,r2,r0
0000ba  f88d0012          STRB     r0,[sp,#0x12]
;;;860    		n[3]=(real_int/10)%10;
0000be  200a              MOVS     r0,#0xa
0000c0  fbb5f0f0          UDIV     r0,r5,r0
0000c4  fbb0f2f1          UDIV     r2,r0,r1
0000c8  fb010012          MLS      r0,r1,r2,r0
0000cc  f88d0013          STRB     r0,[sp,#0x13]
;;;861    
;;;862    		n[5]='.';
0000d0  202e              MOVS     r0,#0x2e
0000d2  f88d0015          STRB     r0,[sp,#0x15]
;;;863    		n[6]=(real_decimal/1000)%10;
0000d6  f44f707a          MOV      r0,#0x3e8
0000da  fbb6f0f0          UDIV     r0,r6,r0
0000de  fbb0f2f1          UDIV     r2,r0,r1
0000e2  fb010012          MLS      r0,r1,r2,r0
0000e6  f88d0016          STRB     r0,[sp,#0x16]
;;;864    		n[7]=(real_decimal/100)%10;
0000ea  2064              MOVS     r0,#0x64
0000ec  fbb6f0f0          UDIV     r0,r6,r0
0000f0  fbb0f2f1          UDIV     r2,r0,r1
0000f4  fb010012          MLS      r0,r1,r2,r0
0000f8  f88d0017          STRB     r0,[sp,#0x17]
;;;865    		n[8]=(real_decimal/10)%10;
0000fc  200a              MOVS     r0,#0xa
0000fe  fbb6f0f0          UDIV     r0,r6,r0
000102  fbb0f2f1          UDIV     r2,r0,r1
000106  fb010012          MLS      r0,r1,r2,r0
00010a  f88d0018          STRB     r0,[sp,#0x18]
;;;866    		n[9]=real_decimal%10;
00010e  200a              MOVS     r0,#0xa
000110  fbb6f1f0          UDIV     r1,r6,r0
000114  fb006011          MLS      r0,r0,r1,r6
000118  f88d0019          STRB     r0,[sp,#0x19]
;;;867    		n[6+N2]='\0'; 
00011c  2100              MOVS     r1,#0
00011e  f10b0006          ADD      r0,r11,#6
000122  aa04              ADD      r2,sp,#0x10
000124  5411              STRB     r1,[r2,r0]
;;;868    		for(j=0;j<10;j++) n[j]=n[j]+16+32;
000126  2400              MOVS     r4,#0
000128  e005              B        |L3.310|
                  |L3.298|
00012a  a804              ADD      r0,sp,#0x10
00012c  5d00              LDRB     r0,[r0,r4]
00012e  3030              ADDS     r0,r0,#0x30
000130  a904              ADD      r1,sp,#0x10
000132  5508              STRB     r0,[r1,r4]
000134  1c64              ADDS     r4,r4,#1
                  |L3.310|
000136  2c0a              CMP      r4,#0xa
000138  dbf7              BLT      |L3.298|
;;;869    		n[5]='.';
00013a  202e              MOVS     r0,#0x2e
00013c  f88d0015          STRB     r0,[sp,#0x15]
;;;870    		n[6+N2]='\0';   
000140  2100              MOVS     r1,#0
000142  f10b0006          ADD      r0,r11,#6
000146  aa04              ADD      r2,sp,#0x10
000148  5411              STRB     r1,[r2,r0]
;;;871    		OLED_P8x16Str(X,Y,&n[5-N1]); 
00014a  9812              LDR      r0,[sp,#0x48]
00014c  f1c00005          RSB      r0,r0,#5
000150  a904              ADD      r1,sp,#0x10
000152  1842              ADDS     r2,r0,r1
000154  4651              MOV      r1,r10
000156  4648              MOV      r0,r9
000158  f7fffffe          BL       OLED_P8x16Str
;;;872    }
00015c  b009              ADD      sp,sp,#0x24
00015e  e8bd8ff0          POP      {r4-r11,pc}
;;;873    
                          ENDP

000162  0000              DCW      0x0000
                  |L3.356|
                          DCD      0x40c38800

                          AREA ||i.Dis_Num||, CODE, READONLY, ALIGN=1

                  Dis_Num PROC
;;;779    
;;;780    void Dis_Num(unsigned char y, unsigned char x, unsigned int num,unsigned char N) 
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;781    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  4698              MOV      r8,r3
;;;782    		unsigned char j=0;
00000c  2500              MOVS     r5,#0
;;;783    		unsigned char n[6]={0};
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  9001              STR      r0,[sp,#4]
;;;784    		x=x*8;
000014  06f0              LSLS     r0,r6,#27
000016  0e06              LSRS     r6,r0,#24
;;;785    		n[0]=(num/10000)%10; 
000018  f2427010          MOV      r0,#0x2710
00001c  fbb4f0f0          UDIV     r0,r4,r0
000020  210a              MOVS     r1,#0xa
000022  fbb0f2f1          UDIV     r2,r0,r1
000026  fb010012          MLS      r0,r1,r2,r0
00002a  f88d0000          STRB     r0,[sp,#0]
;;;786    		n[1]=(num/1000)%10;
00002e  f44f707a          MOV      r0,#0x3e8
000032  fbb4f0f0          UDIV     r0,r4,r0
000036  fbb0f2f1          UDIV     r2,r0,r1
00003a  fb010012          MLS      r0,r1,r2,r0
00003e  f88d0001          STRB     r0,[sp,#1]
;;;787    		n[2]=(num/100)%10;
000042  2064              MOVS     r0,#0x64
000044  fbb4f0f0          UDIV     r0,r4,r0
000048  fbb0f2f1          UDIV     r2,r0,r1
00004c  fb010012          MLS      r0,r1,r2,r0
000050  f88d0002          STRB     r0,[sp,#2]
;;;788    		n[3]=(num/10)%10;
000054  200a              MOVS     r0,#0xa
000056  fbb4f0f0          UDIV     r0,r4,r0
00005a  fbb0f2f1          UDIV     r2,r0,r1
00005e  fb010012          MLS      r0,r1,r2,r0
000062  f88d0003          STRB     r0,[sp,#3]
;;;789    		n[4]=num%10;
000066  200a              MOVS     r0,#0xa
000068  fbb4f1f0          UDIV     r1,r4,r0
00006c  fb004011          MLS      r0,r0,r1,r4
000070  f88d0004          STRB     r0,[sp,#4]
;;;790    		//  n[6]='\0';			   
;;;791    		for(j=0;j<5;j++) n[j]=n[j]+16+32;
000074  bf00              NOP      
000076  e007              B        |L4.136|
                  |L4.120|
000078  f81d0005          LDRB     r0,[sp,r5]
00007c  3030              ADDS     r0,r0,#0x30
00007e  b2c0              UXTB     r0,r0
000080  f80d0005          STRB     r0,[sp,r5]
000084  1c68              ADDS     r0,r5,#1
000086  b2c5              UXTB     r5,r0
                  |L4.136|
000088  2d05              CMP      r5,#5
00008a  dbf5              BLT      |L4.120|
;;;792    		OLED_P8x16Str(x,y,&n[5-N]);//从ACSII码表中读取字节，然后写入液晶
00008c  f1c80005          RSB      r0,r8,#5
000090  4669              MOV      r1,sp
000092  1842              ADDS     r2,r0,r1
000094  4639              MOV      r1,r7
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       OLED_P8x16Str
;;;793    }
00009c  e8bd81fc          POP      {r2-r8,pc}
;;;794    
                          ENDP


                          AREA ||i.Dis_String||, CODE, READONLY, ALIGN=1

                  Dis_String PROC
;;;752    }
;;;753    void Dis_String(unsigned char y, unsigned char x, unsigned char ch[])
000000  b5f8              PUSH     {r3-r7,lr}
;;;754    {
000002  4607              MOV      r7,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;755    	unsigned char ch2[3];
;;;756    	unsigned char ii=0;
000008  2400              MOVS     r4,#0
;;;757    	x=x*8;        
00000a  06f0              LSLS     r0,r6,#27
00000c  0e06              LSRS     r6,r0,#24
;;;758    	while(ch[ii] != '\0')
00000e  e027              B        |L5.96|
                  |L5.16|
;;;759    	{
;;;760    		if(ch[ii] > 127)
000010  5d28              LDRB     r0,[r5,r4]
000012  287f              CMP      r0,#0x7f
000014  dd14              BLE      |L5.64|
;;;761    		{
;;;762    			ch2[0] = ch[ii];
000016  5d28              LDRB     r0,[r5,r4]
000018  f88d0000          STRB     r0,[sp,#0]
;;;763    	 		ch2[1] = ch[ii + 1];
00001c  1c60              ADDS     r0,r4,#1
00001e  5c28              LDRB     r0,[r5,r0]
000020  f88d0001          STRB     r0,[sp,#1]
;;;764    			ch2[2] = '\0';			//汉字为两个字节
000024  2000              MOVS     r0,#0
000026  f88d0002          STRB     r0,[sp,#2]
;;;765    			OLED_P14x16Str(x , y, ch2);	//显示汉字
00002a  466a              MOV      r2,sp
00002c  4639              MOV      r1,r7
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       OLED_P14x16Str
;;;766    			x += 14;
000034  f106000e          ADD      r0,r6,#0xe
000038  b2c6              UXTB     r6,r0
;;;767    			ii += 2;
00003a  1ca0              ADDS     r0,r4,#2
00003c  b2c4              UXTB     r4,r0
00003e  e00f              B        |L5.96|
                  |L5.64|
;;;768    		}
;;;769    		else
;;;770    		{
;;;771    			ch2[0] = ch[ii];	
000040  5d28              LDRB     r0,[r5,r4]
000042  f88d0000          STRB     r0,[sp,#0]
;;;772    			ch2[1] = '\0';			//字母占一个字节
000046  2000              MOVS     r0,#0
000048  f88d0001          STRB     r0,[sp,#1]
;;;773    			OLED_P8x16Str(x , y , ch2);	//显示字母
00004c  466a              MOV      r2,sp
00004e  4639              MOV      r1,r7
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       OLED_P8x16Str
;;;774    			x += 8;
000056  f1060008          ADD      r0,r6,#8
00005a  b2c6              UXTB     r6,r0
;;;775    			ii+= 1;
00005c  1c60              ADDS     r0,r4,#1
00005e  b2c4              UXTB     r4,r0
                  |L5.96|
000060  5d28              LDRB     r0,[r5,r4]            ;758
000062  2800              CMP      r0,#0                 ;758
000064  d1d4              BNE      |L5.16|
;;;776    		}
;;;777    	}
;;;778    }
000066  bdf8              POP      {r3-r7,pc}
;;;779    
                          ENDP


                          AREA ||i.Draw_Logo||, CODE, READONLY, ALIGN=2

                  Draw_Logo PROC
;;;873    
;;;874    void Draw_Logo(void)
000000  b570              PUSH     {r4-r6,lr}
;;;875    { 	
;;;876    		unsigned int ii=0;
000002  2600              MOVS     r6,#0
;;;877    		unsigned char x,y;       
;;;878    
;;;879    		for(y=0;y<8;y++)
000004  2400              MOVS     r4,#0
000006  e011              B        |L6.44|
                  |L6.8|
;;;880    		{
;;;881    			OLED_Set_Pos(0,y);				
000008  4621              MOV      r1,r4
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       OLED_Set_Pos
;;;882    			for(x=0;x<128;x++)
000010  2500              MOVS     r5,#0
000012  e007              B        |L6.36|
                  |L6.20|
;;;883    				{      
;;;884    					OLED_WrDat(LOGO128x64[ii++]);	    	
000014  4631              MOV      r1,r6
000016  1c76              ADDS     r6,r6,#1
000018  4a06              LDR      r2,|L6.52|
00001a  5c50              LDRB     r0,[r2,r1]
00001c  f7fffffe          BL       OLED_WrDat
000020  1c68              ADDS     r0,r5,#1              ;882
000022  b2c5              UXTB     r5,r0                 ;882
                  |L6.36|
000024  2d80              CMP      r5,#0x80              ;882
000026  dbf5              BLT      |L6.20|
000028  1c60              ADDS     r0,r4,#1              ;879
00002a  b2c4              UXTB     r4,r0                 ;879
                  |L6.44|
00002c  2c08              CMP      r4,#8                 ;879
00002e  dbeb              BLT      |L6.8|
;;;885    				}
;;;886    		}
;;;887    } 
000030  bd70              POP      {r4-r6,pc}
;;;888    
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      LOGO128x64

                          AREA ||i.OLED_2num||, CODE, READONLY, ALIGN=1

                  OLED_2num PROC
;;;912    
;;;913    void OLED_2num(unsigned char x,unsigned char y,unsigned char number)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;914    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;915    		unsigned char ge,shi;
;;;916    		ge = number % 10;
00000a  200a              MOVS     r0,#0xa
00000c  fb94f1f0          SDIV     r1,r4,r0
000010  fb004011          MLS      r0,r0,r1,r4
000014  b2c7              UXTB     r7,r0
;;;917    		shi = number / 10;
000016  200a              MOVS     r0,#0xa
000018  fb94f0f0          SDIV     r0,r4,r0
00001c  f00008ff          AND      r8,r0,#0xff
;;;918    		OLED_Num(x+1,y,ge);
000020  1c69              ADDS     r1,r5,#1
000022  b2c8              UXTB     r0,r1
000024  463a              MOV      r2,r7
000026  4631              MOV      r1,r6
000028  f7fffffe          BL       OLED_Num
;;;919    		OLED_Num(x,y,shi);
00002c  4642              MOV      r2,r8
00002e  4631              MOV      r1,r6
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       OLED_Num
;;;920    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;921    
                          ENDP


                          AREA ||i.OLED_3num||, CODE, READONLY, ALIGN=1

                  OLED_3num PROC
;;;921    
;;;922    void OLED_3num(unsigned char x,unsigned char y,unsigned int number)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;923    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;924    		unsigned char ge,shi,bai;
;;;925    		bai = number / 100;
00000a  2064              MOVS     r0,#0x64
00000c  fbb4f0f0          UDIV     r0,r4,r0
000010  f00009ff          AND      r9,r0,#0xff
;;;926    		shi = number % 100 /10;
000014  2064              MOVS     r0,#0x64
000016  fbb4f1f0          UDIV     r1,r4,r0
00001a  fb004011          MLS      r0,r0,r1,r4
00001e  210a              MOVS     r1,#0xa
000020  fbb0f8f1          UDIV     r8,r0,r1
;;;927    		ge  = number % 10;
000024  200a              MOVS     r0,#0xa
000026  fbb4f1f0          UDIV     r1,r4,r0
00002a  fb004711          MLS      r7,r0,r1,r4
;;;928    	
;;;929    		OLED_Num(x,y,bai);
00002e  464a              MOV      r2,r9
000030  4631              MOV      r1,r6
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       OLED_Num
;;;930    		OLED_Num(x+1,y,shi);
000038  1c69              ADDS     r1,r5,#1
00003a  b2c8              UXTB     r0,r1
00003c  4642              MOV      r2,r8
00003e  4631              MOV      r1,r6
000040  f7fffffe          BL       OLED_Num
;;;931    		OLED_Num(x+2,y,ge);
000044  1ca9              ADDS     r1,r5,#2
000046  b2c8              UXTB     r0,r1
000048  463a              MOV      r2,r7
00004a  4631              MOV      r1,r6
00004c  f7fffffe          BL       OLED_Num
;;;932    }
000050  e8bd87f0          POP      {r4-r10,pc}
;;;933    
                          ENDP


                          AREA ||i.OLED_4num||, CODE, READONLY, ALIGN=1

                  OLED_4num PROC
;;;933    
;;;934    void OLED_4num(unsigned char x,unsigned char y, int number)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;935    {
000004  4605              MOV      r5,r0
000006  468b              MOV      r11,r1
000008  4616              MOV      r6,r2
;;;936    		unsigned char qian,bai,shi,ge;
;;;937    		int num =number;
00000a  4634              MOV      r4,r6
;;;938    		if(num<0)
00000c  2c00              CMP      r4,#0
00000e  da00              BGE      |L9.18|
;;;939    		{
;;;940    			 num=-num;
000010  4264              RSBS     r4,r4,#0
                  |L9.18|
;;;941    		}
;;;942    		qian=num/1000;
000012  f44f707a          MOV      r0,#0x3e8
000016  fb94f0f0          SDIV     r0,r4,r0
00001a  b2c7              UXTB     r7,r0
;;;943    		bai=num%1000/100;
00001c  f44f707a          MOV      r0,#0x3e8
000020  fb94f1f0          SDIV     r1,r4,r0
000024  fb004011          MLS      r0,r0,r1,r4
000028  2164              MOVS     r1,#0x64
00002a  fb90f0f1          SDIV     r0,r0,r1
00002e  f00008ff          AND      r8,r0,#0xff
;;;944    		shi=num%100/10;
000032  2064              MOVS     r0,#0x64
000034  fb94f1f0          SDIV     r1,r4,r0
000038  fb004011          MLS      r0,r0,r1,r4
00003c  210a              MOVS     r1,#0xa
00003e  fb90f0f1          SDIV     r0,r0,r1
000042  f00009ff          AND      r9,r0,#0xff
;;;945    		ge=num%10;
000046  200a              MOVS     r0,#0xa
000048  fb94f1f0          SDIV     r1,r4,r0
00004c  fb004011          MLS      r0,r0,r1,r4
000050  f0000aff          AND      r10,r0,#0xff
;;;946    
;;;947    		OLED_Num(x,y,qian);
000054  463a              MOV      r2,r7
000056  4659              MOV      r1,r11
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       OLED_Num
;;;948    		OLED_Num(x+1,y,bai);
00005e  1c69              ADDS     r1,r5,#1
000060  b2c8              UXTB     r0,r1
000062  4642              MOV      r2,r8
000064  4659              MOV      r1,r11
000066  f7fffffe          BL       OLED_Num
;;;949    		OLED_Num(x+2,y,shi);
00006a  1ca9              ADDS     r1,r5,#2
00006c  b2c8              UXTB     r0,r1
00006e  464a              MOV      r2,r9
000070  4659              MOV      r1,r11
000072  f7fffffe          BL       OLED_Num
;;;950    		OLED_Num(x+3,y,ge);
000076  1ce9              ADDS     r1,r5,#3
000078  b2c8              UXTB     r0,r1
00007a  4652              MOV      r2,r10
00007c  4659              MOV      r1,r11
00007e  f7fffffe          BL       OLED_Num
;;;951    }
000082  e8bd9ff0          POP      {r4-r12,pc}
;;;952    
                          ENDP


                          AREA ||i.OLED_CLS||, CODE, READONLY, ALIGN=1

                  OLED_CLS PROC
;;;454    }
;;;455    void OLED_CLS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;456    {
;;;457    	unsigned char y,x;	
;;;458    	for(y=0;y<8;y++)
000002  2400              MOVS     r4,#0
000004  e015              B        |L10.50|
                  |L10.6|
;;;459    	{
;;;460    		OLED_WrCmd(0xb0+y);
000006  f10401b0          ADD      r1,r4,#0xb0
00000a  b2c8              UXTB     r0,r1
00000c  f7fffffe          BL       OLED_WrCmd
;;;461    		OLED_WrCmd(0x01);
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       OLED_WrCmd
;;;462    		OLED_WrCmd(0x10); 
000016  2010              MOVS     r0,#0x10
000018  f7fffffe          BL       OLED_WrCmd
;;;463    		for(x=0;x<X_WIDTH;x++)
00001c  2500              MOVS     r5,#0
00001e  e004              B        |L10.42|
                  |L10.32|
;;;464    		OLED_WrDat(0);
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       OLED_WrDat
000026  1c68              ADDS     r0,r5,#1              ;463
000028  b2c5              UXTB     r5,r0                 ;463
                  |L10.42|
00002a  2d80              CMP      r5,#0x80              ;463
00002c  dbf8              BLT      |L10.32|
00002e  1c60              ADDS     r0,r4,#1              ;458
000030  b2c4              UXTB     r4,r0                 ;458
                  |L10.50|
000032  2c08              CMP      r4,#8                 ;458
000034  dbe7              BLT      |L10.6|
;;;465    	}
;;;466    }
000036  bd70              POP      {r4-r6,pc}
;;;467    
                          ENDP


                          AREA ||i.OLED_DLY_ms||, CODE, READONLY, ALIGN=1

                  OLED_DLY_ms PROC
;;;335    
;;;336    void OLED_DLY_ms(unsigned int ms)
000000  e007              B        |L11.18|
                  |L11.2|
;;;337    {                         
;;;338      unsigned int a;
;;;339      while(ms)
;;;340      {
;;;341        a=1335;
000002  f2405137          MOV      r1,#0x537
;;;342        while(a--);
000006  bf00              NOP      
                  |L11.8|
000008  000a              MOVS     r2,r1
00000a  f1a10101          SUB      r1,r1,#1
00000e  d1fb              BNE      |L11.8|
;;;343        ms--;
000010  1e40              SUBS     r0,r0,#1
                  |L11.18|
000012  2800              CMP      r0,#0                 ;339
000014  d1f5              BNE      |L11.2|
;;;344      }
;;;345      return;
;;;346    }
000016  4770              BX       lr
;;;347    
                          ENDP


                          AREA ||i.OLED_Fill||, CODE, READONLY, ALIGN=1

                  OLED_Fill PROC
;;;441    } 
;;;442    void OLED_Fill(unsigned char bmp_data) //写数据比如写0x00为清屏 0xff为满频
000000  b570              PUSH     {r4-r6,lr}
;;;443    {
000002  4606              MOV      r6,r0
;;;444    	unsigned char y,x;
;;;445    	
;;;446    	for(y=0;y<8;y++)
000004  2400              MOVS     r4,#0
000006  e015              B        |L12.52|
                  |L12.8|
;;;447    	{
;;;448    		OLED_WrCmd(0xb0+y);
000008  f10401b0          ADD      r1,r4,#0xb0
00000c  b2c8              UXTB     r0,r1
00000e  f7fffffe          BL       OLED_WrCmd
;;;449    		OLED_WrCmd(0x01);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       OLED_WrCmd
;;;450    		OLED_WrCmd(0x10);
000018  2010              MOVS     r0,#0x10
00001a  f7fffffe          BL       OLED_WrCmd
;;;451    		for(x=0;x<X_WIDTH;x++)
00001e  2500              MOVS     r5,#0
000020  e004              B        |L12.44|
                  |L12.34|
;;;452    		OLED_WrDat(bmp_data);
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       OLED_WrDat
000028  1c68              ADDS     r0,r5,#1              ;451
00002a  b2c5              UXTB     r5,r0                 ;451
                  |L12.44|
00002c  2d80              CMP      r5,#0x80              ;451
00002e  dbf8              BLT      |L12.34|
000030  1c60              ADDS     r0,r4,#1              ;446
000032  b2c4              UXTB     r4,r0                 ;446
                  |L12.52|
000034  2c08              CMP      r4,#8                 ;446
000036  dbe7              BLT      |L12.8|
;;;453    	}
;;;454    }
000038  bd70              POP      {r4-r6,pc}
;;;455    void OLED_CLS(void)
                          ENDP


                          AREA ||i.OLED_Init||, CODE, READONLY, ALIGN=2

                  OLED_Init PROC
;;;347    
;;;348    void OLED_Init(void)        
000000  b508              PUSH     {r3,lr}
;;;349    {
;;;350      GPIO_InitTypeDef OLED_GPIO_InitStructure;
;;;351    	RCC_APB2PeriphClockCmd(OLED_RCCEN, ENABLE); 	
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;352      OLED_GPIO_InitStructure.GPIO_Pin = OLED_SCL|OLED_SDA|OLED_RST|OLED_DC;
00000a  f44f4070          MOV      r0,#0xf000
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;353    	OLED_GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000012  2003              MOVS     r0,#3
000014  f88d0002          STRB     r0,[sp,#2]
;;;354    	OLED_GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000018  2010              MOVS     r0,#0x10
00001a  f88d0003          STRB     r0,[sp,#3]
;;;355    	GPIO_Init(OLED_GPIO, &OLED_GPIO_InitStructure); 		        
00001e  4669              MOV      r1,sp
000020  483e              LDR      r0,|L13.284|
000022  f7fffffe          BL       GPIO_Init
;;;356    
;;;357    	OLED_SCLK_Set();  	
000026  f44f5180          MOV      r1,#0x1000
00002a  483c              LDR      r0,|L13.284|
00002c  f7fffffe          BL       GPIO_SetBits
;;;358    	OLED_RST_Clr();
000030  f44f4100          MOV      r1,#0x8000
000034  4839              LDR      r0,|L13.284|
000036  f7fffffe          BL       GPIO_ResetBits
;;;359      OLED_DLY_ms(50);
00003a  2032              MOVS     r0,#0x32
00003c  f7fffffe          BL       OLED_DLY_ms
;;;360      OLED_RST_Set();
000040  f44f4100          MOV      r1,#0x8000
000044  4835              LDR      r0,|L13.284|
000046  f7fffffe          BL       GPIO_SetBits
;;;361      OLED_WR_Byte(0xAE,OLED_CMD); //关闭显示
00004a  2100              MOVS     r1,#0
00004c  20ae              MOVS     r0,#0xae
00004e  f7fffffe          BL       OLED_WR_Byte
;;;362    	OLED_WR_Byte(0xD5,OLED_CMD); //设置时钟分频因子,震荡频率
000052  2100              MOVS     r1,#0
000054  20d5              MOVS     r0,#0xd5
000056  f7fffffe          BL       OLED_WR_Byte
;;;363    	OLED_WR_Byte(0X80,OLED_CMD); //[3:0],分频因子;[7:4],震荡频率
00005a  2100              MOVS     r1,#0
00005c  2080              MOVS     r0,#0x80
00005e  f7fffffe          BL       OLED_WR_Byte
;;;364    	OLED_WR_Byte(0xA8,OLED_CMD); //设置驱动路数
000062  2100              MOVS     r1,#0
000064  20a8              MOVS     r0,#0xa8
000066  f7fffffe          BL       OLED_WR_Byte
;;;365    	OLED_WR_Byte(0X3F,OLED_CMD); //默认0X3F(1/64) 
00006a  2100              MOVS     r1,#0
00006c  203f              MOVS     r0,#0x3f
00006e  f7fffffe          BL       OLED_WR_Byte
;;;366    	OLED_WR_Byte(0xD3,OLED_CMD); //设置显示偏移
000072  2100              MOVS     r1,#0
000074  20d3              MOVS     r0,#0xd3
000076  f7fffffe          BL       OLED_WR_Byte
;;;367    	OLED_WR_Byte(0X00,OLED_CMD); //默认为0
00007a  2100              MOVS     r1,#0
00007c  4608              MOV      r0,r1
00007e  f7fffffe          BL       OLED_WR_Byte
;;;368    	OLED_WR_Byte(0x40|0X00,OLED_CMD); //设置显示开始行 [5:0],行数.													    
000082  2100              MOVS     r1,#0
000084  2040              MOVS     r0,#0x40
000086  f7fffffe          BL       OLED_WR_Byte
;;;369    	OLED_WR_Byte(0x8D,OLED_CMD); //电荷泵设置
00008a  2100              MOVS     r1,#0
00008c  208d              MOVS     r0,#0x8d
00008e  f7fffffe          BL       OLED_WR_Byte
;;;370    	OLED_WR_Byte(0x14,OLED_CMD); //bit2，开启/关闭
000092  2100              MOVS     r1,#0
000094  2014              MOVS     r0,#0x14
000096  f7fffffe          BL       OLED_WR_Byte
;;;371    	OLED_WR_Byte(0x20,OLED_CMD); //设置内存地址模式
00009a  2100              MOVS     r1,#0
00009c  2020              MOVS     r0,#0x20
00009e  f7fffffe          BL       OLED_WR_Byte
;;;372    	OLED_WR_Byte(0x02,OLED_CMD); //[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
0000a2  2100              MOVS     r1,#0
0000a4  2002              MOVS     r0,#2
0000a6  f7fffffe          BL       OLED_WR_Byte
;;;373    	OLED_WR_Byte(0xA1,OLED_CMD); //段重定义设置,bit0:0,0->0;1,0->127;
0000aa  2100              MOVS     r1,#0
0000ac  20a1              MOVS     r0,#0xa1
0000ae  f7fffffe          BL       OLED_WR_Byte
;;;374    	OLED_WR_Byte(0xC8,OLED_CMD); //设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数
0000b2  2100              MOVS     r1,#0
0000b4  20c8              MOVS     r0,#0xc8
0000b6  f7fffffe          BL       OLED_WR_Byte
;;;375    	OLED_WR_Byte(0xDA,OLED_CMD); //设置COM硬件引脚配置
0000ba  2100              MOVS     r1,#0
0000bc  20da              MOVS     r0,#0xda
0000be  f7fffffe          BL       OLED_WR_Byte
;;;376    	OLED_WR_Byte(0x12,OLED_CMD); //[5:4]配置		 
0000c2  2100              MOVS     r1,#0
0000c4  2012              MOVS     r0,#0x12
0000c6  f7fffffe          BL       OLED_WR_Byte
;;;377    	OLED_WR_Byte(0x81,OLED_CMD); //对比度设置
0000ca  2100              MOVS     r1,#0
0000cc  2081              MOVS     r0,#0x81
0000ce  f7fffffe          BL       OLED_WR_Byte
;;;378    	OLED_WR_Byte(0xEF,OLED_CMD); //1~255;默认0X7F (亮度设置,越大越亮)
0000d2  2100              MOVS     r1,#0
0000d4  20ef              MOVS     r0,#0xef
0000d6  f7fffffe          BL       OLED_WR_Byte
;;;379    	OLED_WR_Byte(0xD9,OLED_CMD); //设置预充电周期
0000da  2100              MOVS     r1,#0
0000dc  20d9              MOVS     r0,#0xd9
0000de  f7fffffe          BL       OLED_WR_Byte
;;;380    	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
0000e2  2100              MOVS     r1,#0
0000e4  20f1              MOVS     r0,#0xf1
0000e6  f7fffffe          BL       OLED_WR_Byte
;;;381    	OLED_WR_Byte(0xDB,OLED_CMD); //设置VCOMH 电压倍率
0000ea  2100              MOVS     r1,#0
0000ec  20db              MOVS     r0,#0xdb
0000ee  f7fffffe          BL       OLED_WR_Byte
;;;382    	OLED_WR_Byte(0x40,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
0000f2  2100              MOVS     r1,#0
0000f4  2040              MOVS     r0,#0x40
0000f6  f7fffffe          BL       OLED_WR_Byte
;;;383    	OLED_WR_Byte(0xA4,OLED_CMD); //全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
0000fa  2100              MOVS     r1,#0
0000fc  20a4              MOVS     r0,#0xa4
0000fe  f7fffffe          BL       OLED_WR_Byte
;;;384    	OLED_WR_Byte(0xA6,OLED_CMD); //设置显示方式;bit0:1,反相显示;0,正常显示	    						   
000102  2100              MOVS     r1,#0
000104  20a6              MOVS     r0,#0xa6
000106  f7fffffe          BL       OLED_WR_Byte
;;;385    	OLED_WR_Byte(0xAF,OLED_CMD); //开启显示	 
00010a  2100              MOVS     r1,#0
00010c  20af              MOVS     r0,#0xaf
00010e  f7fffffe          BL       OLED_WR_Byte
;;;386    
;;;387      OLED_Fill(0x00);  //初始清屏
000112  2000              MOVS     r0,#0
000114  f7fffffe          BL       OLED_Fill
;;;388    } 
000118  bd08              POP      {r3,pc}
;;;389    
                          ENDP

00011a  0000              DCW      0x0000
                  |L13.284|
                          DCD      0x40010c00

                          AREA ||i.OLED_Num||, CODE, READONLY, ALIGN=2

                  OLED_Num PROC
;;;952    
;;;953    void OLED_Num(unsigned char x,unsigned char y,unsigned char asc) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;954    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;955        int i=0;
00000a  bf00              NOP      
;;;956        OLED_Set_Pos(x*6,y);
00000c  eb050145          ADD      r1,r5,r5,LSL #1
000010  0649              LSLS     r1,r1,#25
000012  0e08              LSRS     r0,r1,#24
000014  4639              MOV      r1,r7
000016  f7fffffe          BL       OLED_Set_Pos
;;;957        for(i=0;i<6;i++)
00001a  2400              MOVS     r4,#0
00001c  e00a              B        |L14.52|
                  |L14.30|
;;;958        {
;;;959           OLED_WrDat(F6x8[asc+16][i]);         
00001e  f1060110          ADD      r1,r6,#0x10
000022  eb010141          ADD      r1,r1,r1,LSL #1
000026  4a05              LDR      r2,|L14.60|
000028  eb020141          ADD      r1,r2,r1,LSL #1
00002c  5d08              LDRB     r0,[r1,r4]
00002e  f7fffffe          BL       OLED_WrDat
000032  1c64              ADDS     r4,r4,#1              ;957
                  |L14.52|
000034  2c06              CMP      r4,#6                 ;957
000036  dbf2              BLT      |L14.30|
;;;960        }
;;;961    }
000038  e8bd81f0          POP      {r4-r8,pc}
;;;962    
                          ENDP

                  |L14.60|
                          DCD      F6x8

                          AREA ||i.OLED_Num5||, CODE, READONLY, ALIGN=1

                  OLED_Num5 PROC
;;;962    
;;;963    void OLED_Num5(unsigned char x,unsigned char y,unsigned int number)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;964    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;965    		unsigned char wan,qian,bai,shi,ge;
;;;966    		wan=number/10000;
00000a  f2427010          MOV      r0,#0x2710
00000e  fbb4f0f0          UDIV     r0,r4,r0
000012  b2c7              UXTB     r7,r0
;;;967    		qian = number%10000/1000;
000014  f2427010          MOV      r0,#0x2710
000018  fbb4f1f0          UDIV     r1,r4,r0
00001c  fb004011          MLS      r0,r0,r1,r4
000020  f44f717a          MOV      r1,#0x3e8
000024  fbb0f0f1          UDIV     r0,r0,r1
000028  f00008ff          AND      r8,r0,#0xff
;;;968    		bai=number%1000/100;
00002c  4608              MOV      r0,r1
00002e  fbb4f1f0          UDIV     r1,r4,r0
000032  fb004011          MLS      r0,r0,r1,r4
000036  2164              MOVS     r1,#0x64
000038  fbb0f0f1          UDIV     r0,r0,r1
00003c  f00009ff          AND      r9,r0,#0xff
;;;969    		shi=number%100/10;
000040  2064              MOVS     r0,#0x64
000042  fbb4f1f0          UDIV     r1,r4,r0
000046  fb004011          MLS      r0,r0,r1,r4
00004a  210a              MOVS     r1,#0xa
00004c  fbb0faf1          UDIV     r10,r0,r1
;;;970    		ge=number%10;
000050  200a              MOVS     r0,#0xa
000052  fbb4f1f0          UDIV     r1,r4,r0
000056  fb004b11          MLS      r11,r0,r1,r4
;;;971    
;;;972    		OLED_Num(x,y,wan);
00005a  463a              MOV      r2,r7
00005c  4631              MOV      r1,r6
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       OLED_Num
;;;973    		OLED_Num(x+1,y,qian);
000064  1c69              ADDS     r1,r5,#1
000066  b2c8              UXTB     r0,r1
000068  4642              MOV      r2,r8
00006a  4631              MOV      r1,r6
00006c  f7fffffe          BL       OLED_Num
;;;974    		OLED_Num(x+2,y,bai);
000070  1ca9              ADDS     r1,r5,#2
000072  b2c8              UXTB     r0,r1
000074  464a              MOV      r2,r9
000076  4631              MOV      r1,r6
000078  f7fffffe          BL       OLED_Num
;;;975    		OLED_Num(x+3,y,shi);
00007c  1ce9              ADDS     r1,r5,#3
00007e  b2c8              UXTB     r0,r1
000080  4652              MOV      r2,r10
000082  4631              MOV      r1,r6
000084  f7fffffe          BL       OLED_Num
;;;976    		OLED_Num(x+4,y,ge);
000088  1d29              ADDS     r1,r5,#4
00008a  b2c8              UXTB     r0,r1
00008c  465a              MOV      r2,r11
00008e  4631              MOV      r1,r6
000090  f7fffffe          BL       OLED_Num
;;;977    }
000094  e8bd9ff0          POP      {r4-r12,pc}
                          ENDP


                          AREA ||i.OLED_P14x16Str||, CODE, READONLY, ALIGN=2

                  OLED_P14x16Str PROC
;;;661    //输出汉字字符串
;;;662    void OLED_P14x16Str(unsigned char x,u8 y,unsigned char ch[])
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;663    {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;664    	unsigned char wm=0,ii = 0;
00000a  2400              MOVS     r4,#0
00000c  2600              MOVS     r6,#0
;;;665    	unsigned int adder=1; 
00000e  2501              MOVS     r5,#1
;;;666    	
;;;667    	while(ch[ii] != '\0')
000010  e06b              B        |L16.234|
                  |L16.18|
;;;668    	{
;;;669      	wm = 0;
000012  2400              MOVS     r4,#0
;;;670      	adder = 1;
000014  2501              MOVS     r5,#1
;;;671      	while(F14x16_Idx[wm] > 127)
000016  e013              B        |L16.64|
                  |L16.24|
;;;672      	{
;;;673      		if(F14x16_Idx[wm] == ch[ii])
000018  4837              LDR      r0,|L16.248|
00001a  5d00              LDRB     r0,[r0,r4]
00001c  f8181006          LDRB     r1,[r8,r6]
000020  4288              CMP      r0,r1
000022  d10b              BNE      |L16.60|
;;;674      		{
;;;675      			if(F14x16_Idx[wm + 1] == ch[ii + 1])
000024  4934              LDR      r1,|L16.248|
000026  1c60              ADDS     r0,r4,#1
000028  5c09              LDRB     r1,[r1,r0]
00002a  1c70              ADDS     r0,r6,#1
00002c  f8180000          LDRB     r0,[r8,r0]
000030  4281              CMP      r1,r0
000032  d103              BNE      |L16.60|
;;;676      			{
;;;677      				adder = wm * 14;
000034  ebc400c4          RSB      r0,r4,r4,LSL #3
000038  0045              LSLS     r5,r0,#1
;;;678      				break;
00003a  e005              B        |L16.72|
                  |L16.60|
;;;679      			}
;;;680      		}
;;;681      		wm += 2;			
00003c  1ca0              ADDS     r0,r4,#2
00003e  b2c4              UXTB     r4,r0
                  |L16.64|
000040  482d              LDR      r0,|L16.248|
000042  5d00              LDRB     r0,[r0,r4]            ;671
000044  287f              CMP      r0,#0x7f              ;671
000046  dce7              BGT      |L16.24|
                  |L16.72|
000048  bf00              NOP                            ;678
;;;682      	}
;;;683      	if(x>118){x=0;y++;}
00004a  f1b90f76          CMP      r9,#0x76
00004e  dd03              BLE      |L16.88|
000050  f04f0900          MOV      r9,#0
000054  1c78              ADDS     r0,r7,#1
000056  b2c7              UXTB     r7,r0
                  |L16.88|
;;;684      	OLED_Set_Pos(x , y); 
000058  4639              MOV      r1,r7
00005a  4648              MOV      r0,r9
00005c  f7fffffe          BL       OLED_Set_Pos
;;;685      	if(adder != 1)// 显示汉字					
000060  2d01              CMP      r5,#1
000062  d01f              BEQ      |L16.164|
;;;686      	{
;;;687      		OLED_Set_Pos(x , y);
000064  4639              MOV      r1,r7
000066  4648              MOV      r0,r9
000068  f7fffffe          BL       OLED_Set_Pos
;;;688      		for(wm = 0;wm < 14;wm++)               
00006c  2400              MOVS     r4,#0
00006e  e006              B        |L16.126|
                  |L16.112|
;;;689      		{
;;;690      			OLED_WrDat(F14x16[adder]);	
000070  4922              LDR      r1,|L16.252|
000072  5d48              LDRB     r0,[r1,r5]
000074  f7fffffe          BL       OLED_WrDat
;;;691      			adder += 1;
000078  1c6d              ADDS     r5,r5,#1
00007a  1c60              ADDS     r0,r4,#1              ;688
00007c  b2c4              UXTB     r4,r0                 ;688
                  |L16.126|
00007e  2c0e              CMP      r4,#0xe               ;688
000080  dbf6              BLT      |L16.112|
;;;692      		}      
;;;693      		OLED_Set_Pos(x,y + 1); 
000082  1c78              ADDS     r0,r7,#1
000084  b2c1              UXTB     r1,r0
000086  4648              MOV      r0,r9
000088  f7fffffe          BL       OLED_Set_Pos
;;;694      		for(wm = 0;wm < 14;wm++)          
00008c  2400              MOVS     r4,#0
00008e  e006              B        |L16.158|
                  |L16.144|
;;;695      		{
;;;696      			OLED_WrDat(F14x16[adder]);
000090  491a              LDR      r1,|L16.252|
000092  5d48              LDRB     r0,[r1,r5]
000094  f7fffffe          BL       OLED_WrDat
;;;697      			adder += 1;
000098  1c6d              ADDS     r5,r5,#1
00009a  1c60              ADDS     r0,r4,#1              ;694
00009c  b2c4              UXTB     r4,r0                 ;694
                  |L16.158|
00009e  2c0e              CMP      r4,#0xe               ;694
0000a0  dbf6              BLT      |L16.144|
0000a2  e01c              B        |L16.222|
                  |L16.164|
;;;698      		}   		
;;;699      	}
;;;700      	else			  //显示空白字符			
;;;701      	{
;;;702      		ii += 1;
0000a4  1c70              ADDS     r0,r6,#1
0000a6  b2c6              UXTB     r6,r0
;;;703          OLED_Set_Pos(x,y);
0000a8  4639              MOV      r1,r7
0000aa  4648              MOV      r0,r9
0000ac  f7fffffe          BL       OLED_Set_Pos
;;;704      		for(wm = 0;wm < 16;wm++)
0000b0  2400              MOVS     r4,#0
0000b2  e004              B        |L16.190|
                  |L16.180|
;;;705      		{
;;;706      				OLED_WrDat(0);
0000b4  2000              MOVS     r0,#0
0000b6  f7fffffe          BL       OLED_WrDat
0000ba  1c60              ADDS     r0,r4,#1              ;704
0000bc  b2c4              UXTB     r4,r0                 ;704
                  |L16.190|
0000be  2c10              CMP      r4,#0x10              ;704
0000c0  dbf8              BLT      |L16.180|
;;;707      		}
;;;708      		OLED_Set_Pos(x,y + 1);
0000c2  1c78              ADDS     r0,r7,#1
0000c4  b2c1              UXTB     r1,r0
0000c6  4648              MOV      r0,r9
0000c8  f7fffffe          BL       OLED_Set_Pos
;;;709      		for(wm = 0;wm < 16;wm++)
0000cc  2400              MOVS     r4,#0
0000ce  e004              B        |L16.218|
                  |L16.208|
;;;710      		{   		
;;;711      				OLED_WrDat(0);	
0000d0  2000              MOVS     r0,#0
0000d2  f7fffffe          BL       OLED_WrDat
0000d6  1c60              ADDS     r0,r4,#1              ;709
0000d8  b2c4              UXTB     r4,r0                 ;709
                  |L16.218|
0000da  2c10              CMP      r4,#0x10              ;709
0000dc  dbf8              BLT      |L16.208|
                  |L16.222|
;;;712      		}
;;;713      	}
;;;714      	x += 14;
0000de  f109000e          ADD      r0,r9,#0xe
0000e2  f00009ff          AND      r9,r0,#0xff
;;;715      	ii += 2;
0000e6  1cb0              ADDS     r0,r6,#2
0000e8  b2c6              UXTB     r6,r0
                  |L16.234|
0000ea  f8180006          LDRB     r0,[r8,r6]            ;667
0000ee  2800              CMP      r0,#0                 ;667
0000f0  d18f              BNE      |L16.18|
;;;716    	}
;;;717    }
0000f2  e8bd87f0          POP      {r4-r10,pc}
;;;718    //输出汉字和字符混合字符串
                          ENDP

0000f6  0000              DCW      0x0000
                  |L16.248|
                          DCD      F14x16_Idx
                  |L16.252|
                          DCD      F14x16

                          AREA ||i.OLED_P6x8Num_8bit||, CODE, READONLY, ALIGN=1

                  OLED_P6x8Num_8bit PROC
;;;900    
;;;901    void OLED_P6x8Num_8bit(unsigned char x,unsigned char y,unsigned char Number)
000000  b5f8              PUSH     {r3-r7,lr}
;;;902    {
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
;;;903    		unsigned char ch[3]={0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;904    		int n;
;;;905    		for(n=2;n>=0;n--)
00000c  2502              MOVS     r5,#2
00000e  e00d              B        |L17.44|
                  |L17.16|
;;;906    		{
;;;907    			ch[n]=Number%10+'0';
000010  200a              MOVS     r0,#0xa
000012  fb94f1f0          SDIV     r1,r4,r0
000016  fb004011          MLS      r0,r0,r1,r4
00001a  3030              ADDS     r0,r0,#0x30
00001c  b2c0              UXTB     r0,r0
00001e  f80d0005          STRB     r0,[sp,r5]
;;;908    			Number=Number/10;
000022  200a              MOVS     r0,#0xa
000024  fb94f0f0          SDIV     r0,r4,r0
000028  b2c4              UXTB     r4,r0
00002a  1e6d              SUBS     r5,r5,#1              ;905
                  |L17.44|
00002c  2d00              CMP      r5,#0                 ;905
00002e  daef              BGE      |L17.16|
;;;909    		}
;;;910    		OLED_P6x8Str(x,y,ch);
000030  466a              MOV      r2,sp
000032  4639              MOV      r1,r7
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       OLED_P6x8Str
;;;911    }
00003a  bdf8              POP      {r3-r7,pc}
;;;912    
                          ENDP


                          AREA ||i.OLED_P6x8Str||, CODE, READONLY, ALIGN=2

                  OLED_P6x8Str PROC
;;;622    //==============================================================  
;;;623    void OLED_P6x8Str(u8 x,u8 y,u8 ch[])//小字符串
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;624    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;625      u8 c=0,i=0,j=0;
00000a  f04f0900          MOV      r9,#0
00000e  2600              MOVS     r6,#0
000010  2700              MOVS     r7,#0
;;;626      OLED_Set_Pos(x,y);      
000012  4641              MOV      r1,r8
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       OLED_Set_Pos
;;;627      while (ch[j]!='\0')
00001a  e01c              B        |L18.86|
                  |L18.28|
;;;628      {    
;;;629        c =ch[j]-32;
00001c  5de8              LDRB     r0,[r5,r7]
00001e  3820              SUBS     r0,r0,#0x20
000020  f00009ff          AND      r9,r0,#0xff
;;;630        if(x>126){x=0;y++;}    
000024  2c7e              CMP      r4,#0x7e
000026  dd04              BLE      |L18.50|
000028  2400              MOVS     r4,#0
00002a  f1080001          ADD      r0,r8,#1
00002e  f00008ff          AND      r8,r0,#0xff
                  |L18.50|
;;;631      	for(i=0;i<6;i++)     
000032  2600              MOVS     r6,#0
000034  e009              B        |L18.74|
                  |L18.54|
;;;632      	  OLED_WrDat(F6x8[c][i]);  
000036  eb090149          ADD      r1,r9,r9,LSL #1
00003a  4a09              LDR      r2,|L18.96|
00003c  eb020141          ADD      r1,r2,r1,LSL #1
000040  5d88              LDRB     r0,[r1,r6]
000042  f7fffffe          BL       OLED_WrDat
000046  1c70              ADDS     r0,r6,#1              ;631
000048  b2c6              UXTB     r6,r0                 ;631
                  |L18.74|
00004a  2e06              CMP      r6,#6                 ;631
00004c  dbf3              BLT      |L18.54|
;;;633      	x+=6;
00004e  1da0              ADDS     r0,r4,#6
000050  b2c4              UXTB     r4,r0
;;;634      	j++;
000052  1c78              ADDS     r0,r7,#1
000054  b2c7              UXTB     r7,r0
                  |L18.86|
000056  5de8              LDRB     r0,[r5,r7]            ;627
000058  2800              CMP      r0,#0                 ;627
00005a  d1df              BNE      |L18.28|
;;;635      }
;;;636    }
00005c  e8bd87f0          POP      {r4-r10,pc}
;;;637    //==============================================================
                          ENDP

                  |L18.96|
                          DCD      F6x8

                          AREA ||i.OLED_P8x16Num_8bit||, CODE, READONLY, ALIGN=1

                  OLED_P8x16Num_8bit PROC
;;;888    
;;;889    void OLED_P8x16Num_8bit(unsigned char x,unsigned char y,unsigned char Number)
000000  b5f8              PUSH     {r3-r7,lr}
;;;890    {
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
;;;891    		unsigned char ch[3]={0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;892    		int n;
;;;893    		for(n=2;n>=0;n--)
00000c  2502              MOVS     r5,#2
00000e  e00d              B        |L19.44|
                  |L19.16|
;;;894    		{
;;;895    			ch[n]=Number%10+'0';
000010  200a              MOVS     r0,#0xa
000012  fb94f1f0          SDIV     r1,r4,r0
000016  fb004011          MLS      r0,r0,r1,r4
00001a  3030              ADDS     r0,r0,#0x30
00001c  b2c0              UXTB     r0,r0
00001e  f80d0005          STRB     r0,[sp,r5]
;;;896    			Number=Number/10;
000022  200a              MOVS     r0,#0xa
000024  fb94f0f0          SDIV     r0,r4,r0
000028  b2c4              UXTB     r4,r0
00002a  1e6d              SUBS     r5,r5,#1              ;893
                  |L19.44|
00002c  2d00              CMP      r5,#0                 ;893
00002e  daef              BGE      |L19.16|
;;;897    		}
;;;898    		OLED_P8x16Str(x,y,ch);
000030  466a              MOV      r2,sp
000032  4639              MOV      r1,r7
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       OLED_P8x16Str
;;;899    }
00003a  bdf8              POP      {r3-r7,pc}
;;;900    
                          ENDP


                          AREA ||i.OLED_P8x16Str||, CODE, READONLY, ALIGN=2

                  OLED_P8x16Str PROC
;;;642    //==============================================================  
;;;643    void OLED_P8x16Str(u8 x,u8 y,u8 ch[])//大字符串
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;644    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;645      u8 c=0,i=0,j=0;
00000a  2500              MOVS     r5,#0
00000c  2400              MOVS     r4,#0
00000e  46a1              MOV      r9,r4
;;;646            
;;;647      while (ch[j]!='\0')
000010  e031              B        |L20.118|
                  |L20.18|
;;;648      {    
;;;649        c =ch[j]-32;
000012  f8180009          LDRB     r0,[r8,r9]
000016  3820              SUBS     r0,r0,#0x20
000018  b2c5              UXTB     r5,r0
;;;650        if(x>120){x=0;y++;}
00001a  2e78              CMP      r6,#0x78
00001c  dd02              BLE      |L20.36|
00001e  2600              MOVS     r6,#0
000020  1c78              ADDS     r0,r7,#1
000022  b2c7              UXTB     r7,r0
                  |L20.36|
;;;651        OLED_Set_Pos(x,y);    
000024  4639              MOV      r1,r7
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       OLED_Set_Pos
;;;652      	for(i=0;i<8;i++)     
00002c  2400              MOVS     r4,#0
00002e  e007              B        |L20.64|
                  |L20.48|
;;;653      	  OLED_WrDat(F8X16[c*16+i]);
000030  eb041105          ADD      r1,r4,r5,LSL #4
000034  4a13              LDR      r2,|L20.132|
000036  5c50              LDRB     r0,[r2,r1]
000038  f7fffffe          BL       OLED_WrDat
00003c  1c60              ADDS     r0,r4,#1              ;652
00003e  b2c4              UXTB     r4,r0                 ;652
                  |L20.64|
000040  2c08              CMP      r4,#8                 ;652
000042  dbf5              BLT      |L20.48|
;;;654      	OLED_Set_Pos(x,y+1);    
000044  1c78              ADDS     r0,r7,#1
000046  b2c1              UXTB     r1,r0
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       OLED_Set_Pos
;;;655      	for(i=0;i<8;i++)     
00004e  2400              MOVS     r4,#0
000050  e008              B        |L20.100|
                  |L20.82|
;;;656      	  OLED_WrDat(F8X16[c*16+i+8]);  
000052  eb041105          ADD      r1,r4,r5,LSL #4
000056  3108              ADDS     r1,r1,#8
000058  4a0a              LDR      r2,|L20.132|
00005a  5c50              LDRB     r0,[r2,r1]
00005c  f7fffffe          BL       OLED_WrDat
000060  1c60              ADDS     r0,r4,#1              ;655
000062  b2c4              UXTB     r4,r0                 ;655
                  |L20.100|
000064  2c08              CMP      r4,#8                 ;655
000066  dbf4              BLT      |L20.82|
;;;657      	x+=8;
000068  f1060008          ADD      r0,r6,#8
00006c  b2c6              UXTB     r6,r0
;;;658      	j++;
00006e  f1090001          ADD      r0,r9,#1
000072  f00009ff          AND      r9,r0,#0xff
                  |L20.118|
000076  f8180009          LDRB     r0,[r8,r9]            ;647
00007a  2800              CMP      r0,#0                 ;647
00007c  d1c9              BNE      |L20.18|
;;;659      }
;;;660    }
00007e  e8bd87f0          POP      {r4-r10,pc}
;;;661    //输出汉字字符串
                          ENDP

000082  0000              DCW      0x0000
                  |L20.132|
                          DCD      F8X16

                          AREA ||i.OLED_Print||, CODE, READONLY, ALIGN=1

                  OLED_Print PROC
;;;718    //输出汉字和字符混合字符串
;;;719    void OLED_Print(unsigned char x, unsigned char y, unsigned char ch[])
000000  b5f8              PUSH     {r3-r7,lr}
;;;720    {
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4615              MOV      r5,r2
;;;721    	unsigned char ch2[3];
;;;722    	unsigned char ii=0;        
000008  2400              MOVS     r4,#0
;;;723    	while(ch[ii] != '\0')
00000a  e027              B        |L21.92|
                  |L21.12|
;;;724    	{
;;;725    		if(ch[ii] > 127)
00000c  5d28              LDRB     r0,[r5,r4]
00000e  287f              CMP      r0,#0x7f
000010  dd14              BLE      |L21.60|
;;;726    		{
;;;727    			ch2[0] = ch[ii];
000012  5d28              LDRB     r0,[r5,r4]
000014  f88d0000          STRB     r0,[sp,#0]
;;;728    	 		ch2[1] = ch[ii + 1];
000018  1c60              ADDS     r0,r4,#1
00001a  5c28              LDRB     r0,[r5,r0]
00001c  f88d0001          STRB     r0,[sp,#1]
;;;729    			ch2[2] = '\0';			//汉字为两个字节
000020  2000              MOVS     r0,#0
000022  f88d0002          STRB     r0,[sp,#2]
;;;730    			OLED_P14x16Str(x , y, ch2);	//显示汉字
000026  466a              MOV      r2,sp
000028  4639              MOV      r1,r7
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       OLED_P14x16Str
;;;731    			x += 14;
000030  f106000e          ADD      r0,r6,#0xe
000034  b2c6              UXTB     r6,r0
;;;732    			ii += 2;
000036  1ca0              ADDS     r0,r4,#2
000038  b2c4              UXTB     r4,r0
00003a  e00f              B        |L21.92|
                  |L21.60|
;;;733    		}
;;;734    		else
;;;735    		{
;;;736    			ch2[0] = ch[ii];	
00003c  5d28              LDRB     r0,[r5,r4]
00003e  f88d0000          STRB     r0,[sp,#0]
;;;737    			ch2[1] = '\0';			//字母占一个字节
000042  2000              MOVS     r0,#0
000044  f88d0001          STRB     r0,[sp,#1]
;;;738    			OLED_P8x16Str(x , y , ch2);	//显示字母
000048  466a              MOV      r2,sp
00004a  4639              MOV      r1,r7
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       OLED_P8x16Str
;;;739    			x += 8;
000052  f1060008          ADD      r0,r6,#8
000056  b2c6              UXTB     r6,r0
;;;740    			ii+= 1;
000058  1c60              ADDS     r0,r4,#1
00005a  b2c4              UXTB     r4,r0
                  |L21.92|
00005c  5d28              LDRB     r0,[r5,r4]            ;723
00005e  2800              CMP      r0,#0                 ;723
000060  d1d4              BNE      |L21.12|
;;;741    		}
;;;742    	}
;;;743    } 
000062  bdf8              POP      {r3-r7,pc}
;;;744    
                          ENDP


                          AREA ||i.OLED_Set_Pos||, CODE, READONLY, ALIGN=1

                  OLED_Set_Pos PROC
;;;435    }
;;;436    void OLED_Set_Pos(unsigned char x, unsigned char y)
000000  b570              PUSH     {r4-r6,lr}
;;;437    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;438      OLED_WrCmd(0xb0+y);
000006  f10501b0          ADD      r1,r5,#0xb0
00000a  b2c8              UXTB     r0,r1
00000c  f7fffffe          BL       OLED_WrCmd
;;;439      OLED_WrCmd(((x&0xf0)>>4)|0x10);
000010  2110              MOVS     r1,#0x10
000012  ea411014          ORR      r0,r1,r4,LSR #4
000016  f7fffffe          BL       OLED_WrCmd
;;;440      OLED_WrCmd(x&0x0f);//|0x01);
00001a  f004000f          AND      r0,r4,#0xf
00001e  f7fffffe          BL       OLED_WrCmd
;;;441    } 
000022  bd70              POP      {r4-r6,pc}
;;;442    void OLED_Fill(unsigned char bmp_data) //写数据比如写0x00为清屏 0xff为满频
                          ENDP


                          AREA ||i.OLED_WR_Byte||, CODE, READONLY, ALIGN=2

                  OLED_WR_Byte PROC
;;;319    *******************************************************************************/
;;;320    void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;321    {	
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;322        uint8_t i;			  
;;;323        if(cmd)   OLED_RS_Set();
000006  b12e              CBZ      r6,|L23.20|
000008  f44f4180          MOV      r1,#0x4000
00000c  4817              LDR      r0,|L23.108|
00000e  f7fffffe          BL       GPIO_SetBits
000012  e004              B        |L23.30|
                  |L23.20|
;;;324        else      OLED_RS_Clr();		  
000014  f44f4180          MOV      r1,#0x4000
000018  4814              LDR      r0,|L23.108|
00001a  f7fffffe          BL       GPIO_ResetBits
                  |L23.30|
;;;325        for(i=0;i<8;i++)
00001e  2500              MOVS     r5,#0
000020  e01b              B        |L23.90|
                  |L23.34|
;;;326        {			  
;;;327    	    OLED_SCLK_Clr();
000022  f44f5180          MOV      r1,#0x1000
000026  4811              LDR      r0,|L23.108|
000028  f7fffffe          BL       GPIO_ResetBits
;;;328    	    if(dat&0x80)   OLED_SDIN_Set();
00002c  f0040080          AND      r0,r4,#0x80
000030  b128              CBZ      r0,|L23.62|
000032  f44f5100          MOV      r1,#0x2000
000036  480d              LDR      r0,|L23.108|
000038  f7fffffe          BL       GPIO_SetBits
00003c  e004              B        |L23.72|
                  |L23.62|
;;;329    	    else           OLED_SDIN_Clr();
00003e  f44f5100          MOV      r1,#0x2000
000042  480a              LDR      r0,|L23.108|
000044  f7fffffe          BL       GPIO_ResetBits
                  |L23.72|
;;;330    	    OLED_SCLK_Set();
000048  f44f5180          MOV      r1,#0x1000
00004c  4807              LDR      r0,|L23.108|
00004e  f7fffffe          BL       GPIO_SetBits
;;;331    	    dat<<=1;   
000052  0660              LSLS     r0,r4,#25
000054  0e04              LSRS     r4,r0,#24
000056  1c68              ADDS     r0,r5,#1              ;325
000058  b2c5              UXTB     r5,r0                 ;325
                  |L23.90|
00005a  2d08              CMP      r5,#8                 ;325
00005c  dbe1              BLT      |L23.34|
;;;332        }				 		 
;;;333        OLED_RS_Set();   	  
00005e  f44f4180          MOV      r1,#0x4000
000062  4802              LDR      r0,|L23.108|
000064  f7fffffe          BL       GPIO_SetBits
;;;334    } 
000068  bd70              POP      {r4-r6,pc}
;;;335    
                          ENDP

00006a  0000              DCW      0x0000
                  |L23.108|
                          DCD      0x40010c00

                          AREA ||i.OLED_WrCmd||, CODE, READONLY, ALIGN=2

                  OLED_WrCmd PROC
;;;411    }
;;;412    void OLED_WrCmd(unsigned char cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;413    {
000002  4604              MOV      r4,r0
;;;414    	unsigned char i=8;
000004  2508              MOVS     r5,#8
;;;415    	
;;;416       OLED_DC_OL;
000006  02e9              LSLS     r1,r5,#11
000008  4814              LDR      r0,|L24.92|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;417       OLED_D0_OL;
00000e  0269              LSLS     r1,r5,#9
000010  4812              LDR      r0,|L24.92|
000012  f7fffffe          BL       GPIO_ResetBits
;;;418    
;;;419       __NOP();
000016  bf00              NOP      
;;;420        
;;;421       while(i--)
000018  e01a              B        |L24.80|
                  |L24.26|
;;;422       {
;;;423        if(cmd&0x80)
00001a  f0040080          AND      r0,r4,#0x80
00001e  b128              CBZ      r0,|L24.44|
;;;424    	  {OLED_D1_OH;}
000020  f44f5100          MOV      r1,#0x2000
000024  480d              LDR      r0,|L24.92|
000026  f7fffffe          BL       GPIO_SetBits
00002a  e004              B        |L24.54|
                  |L24.44|
;;;425        else
;;;426    	  {OLED_D1_OL;}
00002c  f44f5100          MOV      r1,#0x2000
000030  480a              LDR      r0,|L24.92|
000032  f7fffffe          BL       GPIO_ResetBits
                  |L24.54|
;;;427    
;;;428        OLED_D0_OH;
000036  f44f5180          MOV      r1,#0x1000
00003a  4808              LDR      r0,|L24.92|
00003c  f7fffffe          BL       GPIO_SetBits
;;;429        __NOP();
000040  bf00              NOP      
;;;430                
;;;431        OLED_D0_OL;   
000042  f44f5180          MOV      r1,#0x1000
000046  4805              LDR      r0,|L24.92|
000048  f7fffffe          BL       GPIO_ResetBits
;;;432        cmd<<=1;;   
00004c  0660              LSLS     r0,r4,#25
00004e  0e04              LSRS     r4,r0,#24
                  |L24.80|
000050  0028              MOVS     r0,r5                 ;421
000052  f1a50101          SUB      r1,r5,#1              ;421
000056  b2cd              UXTB     r5,r1                 ;421
000058  d1df              BNE      |L24.26|
;;;433      } 	
;;;434    	//LCD_CS=1;
;;;435    }
00005a  bd70              POP      {r4-r6,pc}
;;;436    void OLED_Set_Pos(unsigned char x, unsigned char y)
                          ENDP

                  |L24.92|
                          DCD      0x40010c00

                          AREA ||i.OLED_WrDat||, CODE, READONLY, ALIGN=2

                  OLED_WrDat PROC
;;;389    
;;;390    void OLED_WrDat(unsigned char data)
000000  b570              PUSH     {r4-r6,lr}
;;;391    {
000002  4604              MOV      r4,r0
;;;392    	unsigned char i=8;
000004  2508              MOVS     r5,#8
;;;393    
;;;394        OLED_DC_OH;
000006  02e9              LSLS     r1,r5,#11
000008  4815              LDR      r0,|L25.96|
00000a  f7fffffe          BL       GPIO_SetBits
;;;395    	  __NOP();
00000e  bf00              NOP      
;;;396        OLED_D0_OL;
000010  f44f5180          MOV      r1,#0x1000
000014  4812              LDR      r0,|L25.96|
000016  f7fffffe          BL       GPIO_ResetBits
;;;397        __NOP();
00001a  bf00              NOP      
;;;398      while(i--)
00001c  e01a              B        |L25.84|
                  |L25.30|
;;;399      {
;;;400        if(data&0x80)
00001e  f0040080          AND      r0,r4,#0x80
000022  b128              CBZ      r0,|L25.48|
;;;401    	  {OLED_D1_OH;}
000024  f44f5100          MOV      r1,#0x2000
000028  480d              LDR      r0,|L25.96|
00002a  f7fffffe          BL       GPIO_SetBits
00002e  e004              B        |L25.58|
                  |L25.48|
;;;402        else
;;;403    	  {OLED_D1_OL;}
000030  f44f5100          MOV      r1,#0x2000
000034  480a              LDR      r0,|L25.96|
000036  f7fffffe          BL       GPIO_ResetBits
                  |L25.58|
;;;404    	  OLED_D0_OH;
00003a  f44f5180          MOV      r1,#0x1000
00003e  4808              LDR      r0,|L25.96|
000040  f7fffffe          BL       GPIO_SetBits
;;;405        
;;;406        __NOP();
000044  bf00              NOP      
;;;407                
;;;408        OLED_D0_OL;    
000046  f44f5180          MOV      r1,#0x1000
00004a  4805              LDR      r0,|L25.96|
00004c  f7fffffe          BL       GPIO_ResetBits
;;;409        data<<=1;    
000050  0660              LSLS     r0,r4,#25
000052  0e04              LSRS     r4,r0,#24
                  |L25.84|
000054  0028              MOVS     r0,r5                 ;398
000056  f1a50101          SUB      r1,r5,#1              ;398
00005a  b2cd              UXTB     r5,r1                 ;398
00005c  d1df              BNE      |L25.30|
;;;410      }
;;;411    }
00005e  bd70              POP      {r4-r6,pc}
;;;412    void OLED_WrCmd(unsigned char cmd)
                          ENDP

                  |L25.96|
                          DCD      0x40010c00

                          AREA ||i.SetAddressingMode||, CODE, READONLY, ALIGN=1

                  SetAddressingMode PROC
;;;480    
;;;481    void SetAddressingMode(unsigned char d)	
000000  b510              PUSH     {r4,lr}
;;;482    {
000002  4604              MOV      r4,r0
;;;483    	OLED_WrCmd(0x20);			// Set Memory Addressing Mode
000004  2020              MOVS     r0,#0x20
000006  f7fffffe          BL       OLED_WrCmd
;;;484    	OLED_WrCmd(d);			//   Default => 0x02
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       OLED_WrCmd
;;;485    						//     0x00 => Horizontal Addressing Mode
;;;486    						//     0x01 => Vertical Addressing Mode
;;;487    						//     0x02 => Page Addressing Mode
;;;488    }
000010  bd10              POP      {r4,pc}
;;;489    
                          ENDP


                          AREA ||i.SetColumnAddress||, CODE, READONLY, ALIGN=1

                  SetColumnAddress PROC
;;;489    
;;;490    void SetColumnAddress(unsigned char a, unsigned char b)
000000  b570              PUSH     {r4-r6,lr}
;;;491    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;492    	OLED_WrCmd(0x21);			// Set Column Address
000006  2021              MOVS     r0,#0x21
000008  f7fffffe          BL       OLED_WrCmd
;;;493    	OLED_WrCmd(a);			//   Default => 0x00 (Column Start Address)
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       OLED_WrCmd
;;;494    	OLED_WrCmd(b);			//   Default => 0x7F (Column End Address)
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       OLED_WrCmd
;;;495    }
000018  bd70              POP      {r4-r6,pc}
;;;496    
                          ENDP


                          AREA ||i.SetContrastControl||, CODE, READONLY, ALIGN=1

                  SetContrastControl PROC
;;;509    
;;;510    void SetContrastControl(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;511    {
000002  4604              MOV      r4,r0
;;;512    	OLED_WrCmd(0x81);			// Set Contrast Control
000004  2081              MOVS     r0,#0x81
000006  f7fffffe          BL       OLED_WrCmd
;;;513    	OLED_WrCmd(d);			//   Default => 0x7F
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       OLED_WrCmd
;;;514    }
000010  bd10              POP      {r4,pc}
;;;515    
                          ENDP


                          AREA ||i.SetPageAddress||, CODE, READONLY, ALIGN=1

                  SetPageAddress PROC
;;;496    
;;;497    void SetPageAddress(unsigned char a, unsigned char b)
000000  b570              PUSH     {r4-r6,lr}
;;;498    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;499    	OLED_WrCmd(0x22);			// Set Page Address
000006  2022              MOVS     r0,#0x22
000008  f7fffffe          BL       OLED_WrCmd
;;;500    	OLED_WrCmd(a);			//   Default => 0x00 (Page Start Address)
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       OLED_WrCmd
;;;501    	OLED_WrCmd(b);			//   Default => 0x07 (Page End Address)
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       OLED_WrCmd
;;;502    }
000018  bd70              POP      {r4-r6,pc}
;;;503    
                          ENDP


                          AREA ||i.SetStartColumn||, CODE, READONLY, ALIGN=1

                  SetStartColumn PROC
;;;472    
;;;473    void SetStartColumn(unsigned char d)
000000  b570              PUSH     {r4-r6,lr}
;;;474    {
000002  4604              MOV      r4,r0
;;;475    	OLED_WrCmd(0x00+d%16);		// Set Lower Column Start Address for Page Addressing Mode
000004  4625              MOV      r5,r4
000006  17e1              ASRS     r1,r4,#31
000008  eb047111          ADD      r1,r4,r1,LSR #28
00000c  1109              ASRS     r1,r1,#4
00000e  eba41101          SUB      r1,r4,r1,LSL #4
000012  b2c8              UXTB     r0,r1
000014  f7fffffe          BL       OLED_WrCmd
;;;476    						//   Default => 0x00
;;;477    	OLED_WrCmd(0x10+d/16);		// Set Higher Column Start Address for Page Addressing Mode
000018  4625              MOV      r5,r4
00001a  17e1              ASRS     r1,r4,#31
00001c  eb047111          ADD      r1,r4,r1,LSR #28
000020  1109              ASRS     r1,r1,#4
000022  3110              ADDS     r1,r1,#0x10
000024  b2c8              UXTB     r0,r1
000026  f7fffffe          BL       OLED_WrCmd
;;;478    						//   Default => 0x10
;;;479    }
00002a  bd70              POP      {r4-r6,pc}
;;;480    
                          ENDP


                          AREA ||i.SetStartLine||, CODE, READONLY, ALIGN=1

                  SetStartLine PROC
;;;503    
;;;504      void SetStartLine(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;505    {
000002  4604              MOV      r4,r0
;;;506    	OLED_WrCmd(0x40|d);			// Set Display Start Line
000004  f0440040          ORR      r0,r4,#0x40
000008  f7fffffe          BL       OLED_WrCmd
;;;507    						//   Default => 0x40 (0x00)
;;;508    }
00000c  bd10              POP      {r4,pc}
;;;509    
                          ENDP


                          AREA ||i.SetStartPage||, CODE, READONLY, ALIGN=1

                  SetStartPage PROC
;;;561    
;;;562    void SetStartPage(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;563    {
000002  4604              MOV      r4,r0
;;;564    	OLED_WrCmd(0xB0|d);			// Set Page Start Address for Page Addressing Mode
000004  f04400b0          ORR      r0,r4,#0xb0
000008  f7fffffe          BL       OLED_WrCmd
;;;565    						//   Default => 0xB0 (0x00)
;;;566    }
00000c  bd10              POP      {r4,pc}
;;;567    
                          ENDP


                          AREA ||i.Set_Charge_Pump||, CODE, READONLY, ALIGN=1

                  Set_Charge_Pump PROC
;;;515    
;;;516    void Set_Charge_Pump(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;517    {
000002  4604              MOV      r4,r0
;;;518    	OLED_WrCmd(0x8D);			// Set Charge Pump
000004  208d              MOVS     r0,#0x8d
000006  f7fffffe          BL       OLED_WrCmd
;;;519    	OLED_WrCmd(0x10|d);			//   Default => 0x10
00000a  f0440010          ORR      r0,r4,#0x10
00000e  f7fffffe          BL       OLED_WrCmd
;;;520    						//     0x10 (0x00) => Disable Charge Pump
;;;521    						//     0x14 (0x04) => Enable Charge Pump
;;;522    }
000012  bd10              POP      {r4,pc}
;;;523    
                          ENDP


                          AREA ||i.Set_Common_Config||, CODE, READONLY, ALIGN=1

                  Set_Common_Config PROC
;;;597    
;;;598    void Set_Common_Config(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;599    {
000002  4604              MOV      r4,r0
;;;600    	OLED_WrCmd(0xDA);			// Set COM Pins Hardware Configuration
000004  20da              MOVS     r0,#0xda
000006  f7fffffe          BL       OLED_WrCmd
;;;601    	OLED_WrCmd(0x02|d);			//   Default => 0x12 (0x10)
00000a  f0440002          ORR      r0,r4,#2
00000e  f7fffffe          BL       OLED_WrCmd
;;;602    						//     Alternative COM Pin Configuration
;;;603    						//     Disable COM Left/Right Re-Map
;;;604    }
000012  bd10              POP      {r4,pc}
;;;605    
                          ENDP


                          AREA ||i.Set_Common_Remap||, CODE, READONLY, ALIGN=1

                  Set_Common_Remap PROC
;;;567    
;;;568    void Set_Common_Remap(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;569    {
000002  4604              MOV      r4,r0
;;;570    	OLED_WrCmd(0xC0|d);			// Set COM Output Scan Direction
000004  f04400c0          ORR      r0,r4,#0xc0
000008  f7fffffe          BL       OLED_WrCmd
;;;571    						//   Default => 0xC0
;;;572    						//     0xC0 (0x00) => Scan from COM0 to 63
;;;573    						//     0xC8 (0x08) => Scan from COM63 to 0
;;;574    }
00000c  bd10              POP      {r4,pc}
;;;575    
                          ENDP


                          AREA ||i.Set_Display_Clock||, CODE, READONLY, ALIGN=1

                  Set_Display_Clock PROC
;;;581    
;;;582    void Set_Display_Clock(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;583    {
000002  4604              MOV      r4,r0
;;;584    	OLED_WrCmd(0xD5);			// Set Display Clock Divide Ratio / Oscillator Frequency
000004  20d5              MOVS     r0,#0xd5
000006  f7fffffe          BL       OLED_WrCmd
;;;585    	OLED_WrCmd(d);			//   Default => 0x80
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       OLED_WrCmd
;;;586    						//     D[3:0] => Display Clock Divider
;;;587    						//     D[7:4] => Oscillator Frequency
;;;588    }
000010  bd10              POP      {r4,pc}
;;;589    
                          ENDP


                          AREA ||i.Set_Display_Offset||, CODE, READONLY, ALIGN=1

                  Set_Display_Offset PROC
;;;575    
;;;576    void Set_Display_Offset(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;577    {
000002  4604              MOV      r4,r0
;;;578    	OLED_WrCmd(0xD3);			// Set Display Offset
000004  20d3              MOVS     r0,#0xd3
000006  f7fffffe          BL       OLED_WrCmd
;;;579    	OLED_WrCmd(d);			//   Default => 0x00
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       OLED_WrCmd
;;;580    }
000010  bd10              POP      {r4,pc}
;;;581    
                          ENDP


                          AREA ||i.Set_Display_On_Off||, CODE, READONLY, ALIGN=1

                  Set_Display_On_Off PROC
;;;553    
;;;554    void Set_Display_On_Off(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;555    {
000002  4604              MOV      r4,r0
;;;556    	OLED_WrCmd(0xAE|d);			// Set Display On/Off
000004  f04400ae          ORR      r0,r4,#0xae
000008  f7fffffe          BL       OLED_WrCmd
;;;557    						//   Default => 0xAE
;;;558    						//     0xAE (0x00) => Display Off
;;;559    						//     0xAF (0x01) => Display On
;;;560    }
00000c  bd10              POP      {r4,pc}
;;;561    
                          ENDP


                          AREA ||i.Set_Entire_Display||, CODE, READONLY, ALIGN=1

                  Set_Entire_Display PROC
;;;531    
;;;532    void Set_Entire_Display(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;533    {
000002  4604              MOV      r4,r0
;;;534    	OLED_WrCmd(0xA4|d);			// Set Entire Display On / Off
000004  f04400a4          ORR      r0,r4,#0xa4
000008  f7fffffe          BL       OLED_WrCmd
;;;535    						//   Default => 0xA4
;;;536    						//     0xA4 (0x00) => Normal Display
;;;537    						//     0xA5 (0x01) => Entire Display On
;;;538    }
00000c  bd10              POP      {r4,pc}
;;;539    
                          ENDP


                          AREA ||i.Set_Inverse_Display||, CODE, READONLY, ALIGN=1

                  Set_Inverse_Display PROC
;;;539    
;;;540    void Set_Inverse_Display(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;541    {
000002  4604              MOV      r4,r0
;;;542    	OLED_WrCmd(0xA6|d);			// Set Inverse Display On/Off
000004  f04400a6          ORR      r0,r4,#0xa6
000008  f7fffffe          BL       OLED_WrCmd
;;;543    						//   Default => 0xA6
;;;544    						//     0xA6 (0x00) => Normal Display
;;;545    						//     0xA7 (0x01) => Inverse Display On
;;;546    }
00000c  bd10              POP      {r4,pc}
;;;547    
                          ENDP


                          AREA ||i.Set_Multiplex_Ratio||, CODE, READONLY, ALIGN=1

                  Set_Multiplex_Ratio PROC
;;;547    
;;;548    void Set_Multiplex_Ratio(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;549    {
000002  4604              MOV      r4,r0
;;;550    	OLED_WrCmd(0xA8);			// Set Multiplex Ratio
000004  20a8              MOVS     r0,#0xa8
000006  f7fffffe          BL       OLED_WrCmd
;;;551    	OLED_WrCmd(d);			//   Default => 0x3F (1/64 Duty)
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       OLED_WrCmd
;;;552    }
000010  bd10              POP      {r4,pc}
;;;553    
                          ENDP


                          AREA ||i.Set_NOP||, CODE, READONLY, ALIGN=1

                  Set_NOP PROC
;;;611    
;;;612    void Set_NOP(void)
000000  b510              PUSH     {r4,lr}
;;;613    {
;;;614    	OLED_WrCmd(0xE3);			// Command for No Operation
000002  20e3              MOVS     r0,#0xe3
000004  f7fffffe          BL       OLED_WrCmd
;;;615    }
000008  bd10              POP      {r4,pc}
;;;616     
                          ENDP


                          AREA ||i.Set_Precharge_Period||, CODE, READONLY, ALIGN=1

                  Set_Precharge_Period PROC
;;;589    
;;;590    void Set_Precharge_Period(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;591    {
000002  4604              MOV      r4,r0
;;;592    	OLED_WrCmd(0xD9);			// Set Pre-Charge Period
000004  20d9              MOVS     r0,#0xd9
000006  f7fffffe          BL       OLED_WrCmd
;;;593    	OLED_WrCmd(d);			//   Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       OLED_WrCmd
;;;594    						//     D[3:0] => Phase 1 Period in 1~15 Display Clocks
;;;595    						//     D[7:4] => Phase 2 Period in 1~15 Display Clocks
;;;596    }
000010  bd10              POP      {r4,pc}
;;;597    
                          ENDP


                          AREA ||i.Set_Segment_Remap||, CODE, READONLY, ALIGN=1

                  Set_Segment_Remap PROC
;;;523    
;;;524    void Set_Segment_Remap(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;525    {
000002  4604              MOV      r4,r0
;;;526    	OLED_WrCmd(0xA0|d);			// Set Segment Re-Map
000004  f04400a0          ORR      r0,r4,#0xa0
000008  f7fffffe          BL       OLED_WrCmd
;;;527    						//   Default => 0xA0
;;;528    						//     0xA0 (0x00) => Column Address 0 Mapped to SEG0
;;;529    						//     0xA1 (0x01) => Column Address 0 Mapped to SEG127
;;;530    }
00000c  bd10              POP      {r4,pc}
;;;531    
                          ENDP


                          AREA ||i.Set_VCOMH||, CODE, READONLY, ALIGN=1

                  Set_VCOMH PROC
;;;605    
;;;606    void Set_VCOMH(unsigned char d)
000000  b510              PUSH     {r4,lr}
;;;607    {
000002  4604              MOV      r4,r0
;;;608    	OLED_WrCmd(0xDB);			// Set VCOMH Deselect Level
000004  20db              MOVS     r0,#0xdb
000006  f7fffffe          BL       OLED_WrCmd
;;;609    	OLED_WrCmd(d);			//   Default => 0x20 (0.77*VCC)
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       OLED_WrCmd
;;;610    }
000010  bd10              POP      {r4,pc}
;;;611    
                          ENDP


                          AREA ||i.adjust||, CODE, READONLY, ALIGN=1

                  adjust PROC
;;;467    
;;;468    void adjust(unsigned char a)
000000  b510              PUSH     {r4,lr}
;;;469    {
000002  4604              MOV      r4,r0
;;;470      OLED_WrCmd(a);	//指令数据0x0000~0x003f  
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       OLED_WrCmd
;;;471    }
00000a  bd10              POP      {r4,pc}
;;;472    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  F6x8
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  002f0000          DCB      0x00,0x2f,0x00,0x00
00000c  00000700          DCB      0x00,0x00,0x07,0x00
000010  07000014          DCB      0x07,0x00,0x00,0x14
000014  7f147f14          DCB      0x7f,0x14,0x7f,0x14
000018  00242a7f          DCB      0x00,0x24,0x2a,0x7f
00001c  2a120062          DCB      0x2a,0x12,0x00,0x62
000020  64081323          DCB      0x64,0x08,0x13,0x23
000024  00364955          DCB      0x00,0x36,0x49,0x55
000028  22500000          DCB      0x22,0x50,0x00,0x00
00002c  05030000          DCB      0x05,0x03,0x00,0x00
000030  00001c22          DCB      0x00,0x00,0x1c,0x22
000034  41000000          DCB      0x41,0x00,0x00,0x00
000038  41221c00          DCB      0x41,0x22,0x1c,0x00
00003c  0014083e          DCB      0x00,0x14,0x08,0x3e
000040  08140008          DCB      0x08,0x14,0x00,0x08
000044  083e0808          DCB      0x08,0x3e,0x08,0x08
000048  000000a0          DCB      0x00,0x00,0x00,0xa0
00004c  60000808          DCB      0x60,0x00,0x08,0x08
000050  08080808          DCB      0x08,0x08,0x08,0x08
000054  00006060          DCB      0x00,0x00,0x60,0x60
000058  00000020          DCB      0x00,0x00,0x00,0x20
00005c  10080402          DCB      0x10,0x08,0x04,0x02
000060  003e5149          DCB      0x00,0x3e,0x51,0x49
000064  453e0000          DCB      0x45,0x3e,0x00,0x00
000068  427f4000          DCB      0x42,0x7f,0x40,0x00
00006c  00426151          DCB      0x00,0x42,0x61,0x51
000070  49460021          DCB      0x49,0x46,0x00,0x21
000074  41454b31          DCB      0x41,0x45,0x4b,0x31
000078  00181412          DCB      0x00,0x18,0x14,0x12
00007c  7f100027          DCB      0x7f,0x10,0x00,0x27
000080  45454539          DCB      0x45,0x45,0x45,0x39
000084  003c4a49          DCB      0x00,0x3c,0x4a,0x49
000088  49300001          DCB      0x49,0x30,0x00,0x01
00008c  71090503          DCB      0x71,0x09,0x05,0x03
000090  00364949          DCB      0x00,0x36,0x49,0x49
000094  49360006          DCB      0x49,0x36,0x00,0x06
000098  4949291e          DCB      0x49,0x49,0x29,0x1e
00009c  00003636          DCB      0x00,0x00,0x36,0x36
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  56360000          DCB      0x56,0x36,0x00,0x00
0000a8  081c2a49          DCB      0x08,0x1c,0x2a,0x49
0000ac  08080014          DCB      0x08,0x08,0x00,0x14
0000b0  14141414          DCB      0x14,0x14,0x14,0x14
0000b4  0808492a          DCB      0x08,0x08,0x49,0x2a
0000b8  1c080002          DCB      0x1c,0x08,0x00,0x02
0000bc  01510906          DCB      0x01,0x51,0x09,0x06
0000c0  00324959          DCB      0x00,0x32,0x49,0x59
0000c4  513e007c          DCB      0x51,0x3e,0x00,0x7c
0000c8  1211127c          DCB      0x12,0x11,0x12,0x7c
0000cc  007f4949          DCB      0x00,0x7f,0x49,0x49
0000d0  4936003e          DCB      0x49,0x36,0x00,0x3e
0000d4  41414122          DCB      0x41,0x41,0x41,0x22
0000d8  007f4141          DCB      0x00,0x7f,0x41,0x41
0000dc  221c007f          DCB      0x22,0x1c,0x00,0x7f
0000e0  49494941          DCB      0x49,0x49,0x49,0x41
0000e4  007f0909          DCB      0x00,0x7f,0x09,0x09
0000e8  0901003e          DCB      0x09,0x01,0x00,0x3e
0000ec  4149497a          DCB      0x41,0x49,0x49,0x7a
0000f0  007f0808          DCB      0x00,0x7f,0x08,0x08
0000f4  087f0000          DCB      0x08,0x7f,0x00,0x00
0000f8  417f4100          DCB      0x41,0x7f,0x41,0x00
0000fc  00204041          DCB      0x00,0x20,0x40,0x41
000100  3f01007f          DCB      0x3f,0x01,0x00,0x7f
000104  08142241          DCB      0x08,0x14,0x22,0x41
000108  007f4040          DCB      0x00,0x7f,0x40,0x40
00010c  4040007f          DCB      0x40,0x40,0x00,0x7f
000110  020c027f          DCB      0x02,0x0c,0x02,0x7f
000114  007f0408          DCB      0x00,0x7f,0x04,0x08
000118  107f003e          DCB      0x10,0x7f,0x00,0x3e
00011c  4141413e          DCB      0x41,0x41,0x41,0x3e
000120  007f0909          DCB      0x00,0x7f,0x09,0x09
000124  0906003e          DCB      0x09,0x06,0x00,0x3e
000128  4151215e          DCB      0x41,0x51,0x21,0x5e
00012c  007f0919          DCB      0x00,0x7f,0x09,0x19
000130  29460046          DCB      0x29,0x46,0x00,0x46
000134  49494931          DCB      0x49,0x49,0x49,0x31
000138  0001017f          DCB      0x00,0x01,0x01,0x7f
00013c  0101003f          DCB      0x01,0x01,0x00,0x3f
000140  4040403f          DCB      0x40,0x40,0x40,0x3f
000144  001f2040          DCB      0x00,0x1f,0x20,0x40
000148  201f003f          DCB      0x20,0x1f,0x00,0x3f
00014c  4038403f          DCB      0x40,0x38,0x40,0x3f
000150  00631408          DCB      0x00,0x63,0x14,0x08
000154  14630007          DCB      0x14,0x63,0x00,0x07
000158  08700807          DCB      0x08,0x70,0x08,0x07
00015c  00615149          DCB      0x00,0x61,0x51,0x49
000160  45430000          DCB      0x45,0x43,0x00,0x00
000164  7f414100          DCB      0x7f,0x41,0x41,0x00
000168  00552a55          DCB      0x00,0x55,0x2a,0x55
00016c  2a550000          DCB      0x2a,0x55,0x00,0x00
000170  41417f00          DCB      0x41,0x41,0x7f,0x00
000174  0402ff02          DCB      0x04,0x02,0xff,0x02
000178  04000020          DCB      0x04,0x00,0x00,0x20
00017c  40ff4020          DCB      0x40,0xff,0x40,0x20
000180  00000102          DCB      0x00,0x00,0x01,0x02
000184  04000020          DCB      0x04,0x00,0x00,0x20
000188  54545478          DCB      0x54,0x54,0x54,0x78
00018c  007f4844          DCB      0x00,0x7f,0x48,0x44
000190  44380038          DCB      0x44,0x38,0x00,0x38
000194  44444420          DCB      0x44,0x44,0x44,0x20
000198  00384444          DCB      0x00,0x38,0x44,0x44
00019c  487f0038          DCB      0x48,0x7f,0x00,0x38
0001a0  54545418          DCB      0x54,0x54,0x54,0x18
0001a4  00087e09          DCB      0x00,0x08,0x7e,0x09
0001a8  01020018          DCB      0x01,0x02,0x00,0x18
0001ac  a4a4a47c          DCB      0xa4,0xa4,0xa4,0x7c
0001b0  007f0804          DCB      0x00,0x7f,0x08,0x04
0001b4  04780000          DCB      0x04,0x78,0x00,0x00
0001b8  447d4000          DCB      0x44,0x7d,0x40,0x00
0001bc  00408084          DCB      0x00,0x40,0x80,0x84
0001c0  7d00007f          DCB      0x7d,0x00,0x00,0x7f
0001c4  10284400          DCB      0x10,0x28,0x44,0x00
0001c8  0000417f          DCB      0x00,0x00,0x41,0x7f
0001cc  4000007c          DCB      0x40,0x00,0x00,0x7c
0001d0  04180478          DCB      0x04,0x18,0x04,0x78
0001d4  007c0804          DCB      0x00,0x7c,0x08,0x04
0001d8  04780038          DCB      0x04,0x78,0x00,0x38
0001dc  44444438          DCB      0x44,0x44,0x44,0x38
0001e0  00fc2424          DCB      0x00,0xfc,0x24,0x24
0001e4  24180018          DCB      0x24,0x18,0x00,0x18
0001e8  242418fc          DCB      0x24,0x24,0x18,0xfc
0001ec  007c0804          DCB      0x00,0x7c,0x08,0x04
0001f0  04080048          DCB      0x04,0x08,0x00,0x48
0001f4  54545420          DCB      0x54,0x54,0x54,0x20
0001f8  00043f44          DCB      0x00,0x04,0x3f,0x44
0001fc  4020003c          DCB      0x40,0x20,0x00,0x3c
000200  4040207c          DCB      0x40,0x40,0x20,0x7c
000204  001c2040          DCB      0x00,0x1c,0x20,0x40
000208  201c003c          DCB      0x20,0x1c,0x00,0x3c
00020c  4030403c          DCB      0x40,0x30,0x40,0x3c
000210  00442810          DCB      0x00,0x44,0x28,0x10
000214  2844001c          DCB      0x28,0x44,0x00,0x1c
000218  a0a0a07c          DCB      0xa0,0xa0,0xa0,0x7c
00021c  00446454          DCB      0x00,0x44,0x64,0x54
000220  4c441414          DCB      0x4c,0x44,0x14,0x14
000224  14141414          DCB      0x14,0x14,0x14,0x14
                  F14x16_Idx
000228  20202020          DCB      0x20,0x20,0x20,0x20
00022c  20202020          DCB      0x20,0x20,0x20,0x20
000230  b5e7b5f7          DCB      0xb5,0xe7,0xb5,0xf7
000234  d0a3d7bc          DCB      0xd0,0xa3,0xd7,0xbc
000238  00                DCB      0x00
                  F14x16
000239  e000ff            DCB      0xe0,0x00,0xff
00023c  102002f2          DCB      0x10,0x20,0x02,0xf2
000240  92929292          DCB      0x92,0x92,0x92,0x92
000244  92f20200          DCB      0x92,0xf2,0x02,0x00
000248  00ff0000          DCB      0x00,0xff,0x00,0x00
00024c  404f4444          DCB      0x40,0x4f,0x44,0x44
000250  4444444f          DCB      0x44,0x44,0x44,0x4f
000254  401010ff          DCB      0x40,0x10,0x10,0xff
000258  10900404          DCB      0x10,0x90,0x04,0x04
00025c  84e49c84          DCB      0x84,0xe4,0x9c,0x84
000260  84840444          DCB      0x84,0x84,0x04,0x44
000264  827f0104          DCB      0x82,0x7f,0x01,0x04
000268  0201ff40          DCB      0x02,0x01,0xff,0x40
00026c  404040ff          DCB      0x40,0x40,0x40,0xff
000270  0024a4fe          DCB      0x00,0x24,0xa4,0xfe
000274  a3220022          DCB      0xa3,0x22,0x00,0x22
000278  cc0000ff          DCB      0xcc,0x00,0x00,0xff
00027c  00000006          DCB      0x00,0x00,0x00,0x06
000280  01ff0001          DCB      0x01,0xff,0x00,0x01
000284  04040404          DCB      0x04,0x04,0x04,0x04
000288  04ff0202          DCB      0x04,0xff,0x02,0x02
00028c  021010ff          DCB      0x02,0x10,0x10,0xff
000290  10900888          DCB      0x10,0x90,0x08,0x88
000294  8888ff88          DCB      0x88,0x88,0xff,0x88
000298  88880844          DCB      0x88,0x88,0x08,0x44
00029c  827f0180          DCB      0x82,0x7f,0x01,0x80
0002a0  8040432c          DCB      0x80,0x40,0x43,0x2c
0002a4  10284681          DCB      0x10,0x28,0x46,0x81
0002a8  8000f888          DCB      0x80,0x00,0xf8,0x88
0002ac  888888ff          DCB      0x88,0x88,0x88,0xff
0002b0  88888888          DCB      0x88,0x88,0x88,0x88
0002b4  f8000000          DCB      0xf8,0x00,0x00,0x00
0002b8  1f080808          DCB      0x1f,0x08,0x08,0x08
0002bc  087f8888          DCB      0x08,0x7f,0x88,0x88
0002c0  88889f80          DCB      0x88,0x88,0x9f,0x80
0002c4  f042cc00          DCB      0xf0,0x42,0xcc,0x00
0002c8  00fe8292          DCB      0x00,0xfe,0x82,0x92
0002cc  92fe9292          DCB      0x92,0xfe,0x92,0x92
0002d0  82fe0000          DCB      0x82,0xfe,0x00,0x00
0002d4  3f10887f          DCB      0x3f,0x10,0x88,0x7f
0002d8  001e1212          DCB      0x00,0x1e,0x12,0x12
0002dc  125e807f          DCB      0x12,0x5e,0x80,0x7f
0002e0  0010d0ff          DCB      0x00,0x10,0xd0,0xff
0002e4  90108048          DCB      0x90,0x10,0x80,0x48
0002e8  28090e08          DCB      0x28,0x09,0x0e,0x08
0002ec  28488803          DCB      0x28,0x48,0x88,0x03
0002f0  00ff0001          DCB      0x00,0xff,0x00,0x01
0002f4  8080432c          DCB      0x80,0x80,0x43,0x2c
0002f8  102c4380          DCB      0x10,0x2c,0x43,0x80
0002fc  80020ce0          DCB      0x80,0x02,0x0c,0xe0
000300  4020f84f          DCB      0x40,0x20,0xf8,0x4f
000304  4849fe48          DCB      0x48,0x49,0xfe,0x48
000308  48480804          DCB      0x48,0x48,0x08,0x04
00030c  7f000000          DCB      0x7f,0x00,0x00,0x00
000310  ff222222          DCB      0xff,0x22,0x22,0x22
000314  3f222222          DCB      0x3f,0x22,0x22,0x22
000318  20                DCB      0x20
                  F8X16
000319  000000            DCB      0x00,0x00,0x00
00031c  00000000          DCB      0x00,0x00,0x00,0x00
000320  00000000          DCB      0x00,0x00,0x00,0x00
000324  00000000          DCB      0x00,0x00,0x00,0x00
000328  00000000          DCB      0x00,0x00,0x00,0x00
00032c  f8000000          DCB      0xf8,0x00,0x00,0x00
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  33300000          DCB      0x33,0x30,0x00,0x00
000338  0000100c          DCB      0x00,0x00,0x10,0x0c
00033c  06100c06          DCB      0x06,0x10,0x0c,0x06
000340  00000000          DCB      0x00,0x00,0x00,0x00
000344  00000000          DCB      0x00,0x00,0x00,0x00
000348  0040c078          DCB      0x00,0x40,0xc0,0x78
00034c  40c07840          DCB      0x40,0xc0,0x78,0x40
000350  00043f04          DCB      0x00,0x04,0x3f,0x04
000354  043f0404          DCB      0x04,0x3f,0x04,0x04
000358  00007088          DCB      0x00,0x00,0x70,0x88
00035c  fc083000          DCB      0xfc,0x08,0x30,0x00
000360  00001820          DCB      0x00,0x00,0x18,0x20
000364  ff211e00          DCB      0xff,0x21,0x1e,0x00
000368  00f008f0          DCB      0x00,0xf0,0x08,0xf0
00036c  00e01800          DCB      0x00,0xe0,0x18,0x00
000370  0000211c          DCB      0x00,0x00,0x21,0x1c
000374  031e211e          DCB      0x03,0x1e,0x21,0x1e
000378  0000f008          DCB      0x00,0x00,0xf0,0x08
00037c  88700000          DCB      0x88,0x70,0x00,0x00
000380  001e2123          DCB      0x00,0x1e,0x21,0x23
000384  24192721          DCB      0x24,0x19,0x27,0x21
000388  1010160e          DCB      0x10,0x10,0x16,0x0e
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  00000000          DCB      0x00,0x00,0x00,0x00
00039c  e0180402          DCB      0xe0,0x18,0x04,0x02
0003a0  00000000          DCB      0x00,0x00,0x00,0x00
0003a4  07182040          DCB      0x07,0x18,0x20,0x40
0003a8  00000204          DCB      0x00,0x00,0x02,0x04
0003ac  18e00000          DCB      0x18,0xe0,0x00,0x00
0003b0  00004020          DCB      0x00,0x00,0x40,0x20
0003b4  18070000          DCB      0x18,0x07,0x00,0x00
0003b8  00404080          DCB      0x00,0x40,0x40,0x80
0003bc  f0804040          DCB      0xf0,0x80,0x40,0x40
0003c0  00020201          DCB      0x00,0x02,0x02,0x01
0003c4  0f010202          DCB      0x0f,0x01,0x02,0x02
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  f0000000          DCB      0xf0,0x00,0x00,0x00
0003d0  00010101          DCB      0x00,0x01,0x01,0x01
0003d4  1f010101          DCB      0x1f,0x01,0x01,0x01
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  0080b070          DCB      0x00,0x80,0xb0,0x70
0003e4  00000000          DCB      0x00,0x00,0x00,0x00
0003e8  00000000          DCB      0x00,0x00,0x00,0x00
0003ec  00000000          DCB      0x00,0x00,0x00,0x00
0003f0  00000101          DCB      0x00,0x00,0x01,0x01
0003f4  01010101          DCB      0x01,0x01,0x01,0x01
0003f8  01000000          DCB      0x01,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  00003030          DCB      0x00,0x00,0x30,0x30
000404  00000000          DCB      0x00,0x00,0x00,0x00
000408  00000000          DCB      0x00,0x00,0x00,0x00
00040c  00806018          DCB      0x00,0x80,0x60,0x18
000410  04006018          DCB      0x04,0x00,0x60,0x18
000414  06010000          DCB      0x06,0x01,0x00,0x00
000418  0000e010          DCB      0x00,0x00,0xe0,0x10
00041c  080810e0          DCB      0x08,0x08,0x10,0xe0
000420  00000f10          DCB      0x00,0x00,0x0f,0x10
000424  2020100f          DCB      0x20,0x20,0x10,0x0f
000428  00001010          DCB      0x00,0x00,0x10,0x10
00042c  f8000000          DCB      0xf8,0x00,0x00,0x00
000430  00002020          DCB      0x00,0x00,0x20,0x20
000434  3f202000          DCB      0x3f,0x20,0x20,0x00
000438  00007008          DCB      0x00,0x00,0x70,0x08
00043c  08088870          DCB      0x08,0x08,0x88,0x70
000440  00003028          DCB      0x00,0x00,0x30,0x28
000444  24222130          DCB      0x24,0x22,0x21,0x30
000448  00003008          DCB      0x00,0x00,0x30,0x08
00044c  88884830          DCB      0x88,0x88,0x48,0x30
000450  00001820          DCB      0x00,0x00,0x18,0x20
000454  2020110e          DCB      0x20,0x20,0x11,0x0e
000458  000000c0          DCB      0x00,0x00,0x00,0xc0
00045c  2010f800          DCB      0x20,0x10,0xf8,0x00
000460  00000704          DCB      0x00,0x00,0x07,0x04
000464  24243f24          DCB      0x24,0x24,0x3f,0x24
000468  0000f808          DCB      0x00,0x00,0xf8,0x08
00046c  88880808          DCB      0x88,0x88,0x08,0x08
000470  00001921          DCB      0x00,0x00,0x19,0x21
000474  2020110e          DCB      0x20,0x20,0x11,0x0e
000478  0000e010          DCB      0x00,0x00,0xe0,0x10
00047c  88881800          DCB      0x88,0x88,0x18,0x00
000480  00000f11          DCB      0x00,0x00,0x0f,0x11
000484  2020110e          DCB      0x20,0x20,0x11,0x0e
000488  00003808          DCB      0x00,0x00,0x38,0x08
00048c  08c83808          DCB      0x08,0xc8,0x38,0x08
000490  00000000          DCB      0x00,0x00,0x00,0x00
000494  3f000000          DCB      0x3f,0x00,0x00,0x00
000498  00007088          DCB      0x00,0x00,0x70,0x88
00049c  08088870          DCB      0x08,0x08,0x88,0x70
0004a0  00001c22          DCB      0x00,0x00,0x1c,0x22
0004a4  2121221c          DCB      0x21,0x21,0x22,0x1c
0004a8  0000e010          DCB      0x00,0x00,0xe0,0x10
0004ac  080810e0          DCB      0x08,0x08,0x10,0xe0
0004b0  00000031          DCB      0x00,0x00,0x00,0x31
0004b4  2222110f          DCB      0x22,0x22,0x11,0x0f
0004b8  00000000          DCB      0x00,0x00,0x00,0x00
0004bc  c0c00000          DCB      0xc0,0xc0,0x00,0x00
0004c0  00000000          DCB      0x00,0x00,0x00,0x00
0004c4  30300000          DCB      0x30,0x30,0x00,0x00
0004c8  00000000          DCB      0x00,0x00,0x00,0x00
0004cc  80000000          DCB      0x80,0x00,0x00,0x00
0004d0  00000080          DCB      0x00,0x00,0x00,0x80
0004d4  60000000          DCB      0x60,0x00,0x00,0x00
0004d8  00000080          DCB      0x00,0x00,0x00,0x80
0004dc  40201008          DCB      0x40,0x20,0x10,0x08
0004e0  00000102          DCB      0x00,0x00,0x01,0x02
0004e4  04081020          DCB      0x04,0x08,0x10,0x20
0004e8  00404040          DCB      0x00,0x40,0x40,0x40
0004ec  40404040          DCB      0x40,0x40,0x40,0x40
0004f0  00040404          DCB      0x00,0x04,0x04,0x04
0004f4  04040404          DCB      0x04,0x04,0x04,0x04
0004f8  00000810          DCB      0x00,0x00,0x08,0x10
0004fc  20408000          DCB      0x20,0x40,0x80,0x00
000500  00002010          DCB      0x00,0x00,0x20,0x10
000504  08040201          DCB      0x08,0x04,0x02,0x01
000508  00007048          DCB      0x00,0x00,0x70,0x48
00050c  080808f0          DCB      0x08,0x08,0x08,0xf0
000510  00000000          DCB      0x00,0x00,0x00,0x00
000514  30360100          DCB      0x30,0x36,0x01,0x00
000518  00c030c8          DCB      0x00,0xc0,0x30,0xc8
00051c  28e810e0          DCB      0x28,0xe8,0x10,0xe0
000520  00071827          DCB      0x00,0x07,0x18,0x27
000524  2423140b          DCB      0x24,0x23,0x14,0x0b
000528  000000c0          DCB      0x00,0x00,0x00,0xc0
00052c  38e00000          DCB      0x38,0xe0,0x00,0x00
000530  00203c23          DCB      0x00,0x20,0x3c,0x23
000534  02022738          DCB      0x02,0x02,0x27,0x38
000538  2008f888          DCB      0x20,0x08,0xf8,0x88
00053c  88887000          DCB      0x88,0x88,0x70,0x00
000540  00203f20          DCB      0x00,0x20,0x3f,0x20
000544  2020110e          DCB      0x20,0x20,0x11,0x0e
000548  00c03008          DCB      0x00,0xc0,0x30,0x08
00054c  08080838          DCB      0x08,0x08,0x08,0x38
000550  00071820          DCB      0x00,0x07,0x18,0x20
000554  20201008          DCB      0x20,0x20,0x10,0x08
000558  0008f808          DCB      0x00,0x08,0xf8,0x08
00055c  080810e0          DCB      0x08,0x08,0x10,0xe0
000560  00203f20          DCB      0x00,0x20,0x3f,0x20
000564  2020100f          DCB      0x20,0x20,0x10,0x0f
000568  0008f888          DCB      0x00,0x08,0xf8,0x88
00056c  88e80810          DCB      0x88,0xe8,0x08,0x10
000570  00203f20          DCB      0x00,0x20,0x3f,0x20
000574  20232018          DCB      0x20,0x23,0x20,0x18
000578  0008f888          DCB      0x00,0x08,0xf8,0x88
00057c  88e80810          DCB      0x88,0xe8,0x08,0x10
000580  00203f20          DCB      0x00,0x20,0x3f,0x20
000584  00030000          DCB      0x00,0x03,0x00,0x00
000588  00c03008          DCB      0x00,0xc0,0x30,0x08
00058c  08083800          DCB      0x08,0x08,0x38,0x00
000590  00071820          DCB      0x00,0x07,0x18,0x20
000594  20221e02          DCB      0x20,0x22,0x1e,0x02
000598  0008f808          DCB      0x00,0x08,0xf8,0x08
00059c  000008f8          DCB      0x00,0x00,0x08,0xf8
0005a0  08203f21          DCB      0x08,0x20,0x3f,0x21
0005a4  0101213f          DCB      0x01,0x01,0x21,0x3f
0005a8  20000808          DCB      0x20,0x00,0x08,0x08
0005ac  f8080800          DCB      0xf8,0x08,0x08,0x00
0005b0  00002020          DCB      0x00,0x00,0x20,0x20
0005b4  3f202000          DCB      0x3f,0x20,0x20,0x00
0005b8  00000008          DCB      0x00,0x00,0x00,0x08
0005bc  08f80808          DCB      0x08,0xf8,0x08,0x08
0005c0  00c08080          DCB      0x00,0xc0,0x80,0x80
0005c4  807f0000          DCB      0x80,0x7f,0x00,0x00
0005c8  0008f888          DCB      0x00,0x08,0xf8,0x88
0005cc  c0281808          DCB      0xc0,0x28,0x18,0x08
0005d0  00203f20          DCB      0x00,0x20,0x3f,0x20
0005d4  01263820          DCB      0x01,0x26,0x38,0x20
0005d8  0008f808          DCB      0x00,0x08,0xf8,0x08
0005dc  00000000          DCB      0x00,0x00,0x00,0x00
0005e0  00203f20          DCB      0x00,0x20,0x3f,0x20
0005e4  20202030          DCB      0x20,0x20,0x20,0x30
0005e8  0008f8f8          DCB      0x00,0x08,0xf8,0xf8
0005ec  00f8f808          DCB      0x00,0xf8,0xf8,0x08
0005f0  00203f00          DCB      0x00,0x20,0x3f,0x00
0005f4  3f003f20          DCB      0x3f,0x00,0x3f,0x20
0005f8  0008f830          DCB      0x00,0x08,0xf8,0x30
0005fc  c00008f8          DCB      0xc0,0x00,0x08,0xf8
000600  08203f20          DCB      0x08,0x20,0x3f,0x20
000604  0007183f          DCB      0x00,0x07,0x18,0x3f
000608  00e01008          DCB      0x00,0xe0,0x10,0x08
00060c  080810e0          DCB      0x08,0x08,0x10,0xe0
000610  000f1020          DCB      0x00,0x0f,0x10,0x20
000614  2020100f          DCB      0x20,0x20,0x10,0x0f
000618  0008f808          DCB      0x00,0x08,0xf8,0x08
00061c  080808f0          DCB      0x08,0x08,0x08,0xf0
000620  00203f21          DCB      0x00,0x20,0x3f,0x21
000624  01010100          DCB      0x01,0x01,0x01,0x00
000628  00e01008          DCB      0x00,0xe0,0x10,0x08
00062c  080810e0          DCB      0x08,0x08,0x10,0xe0
000630  000f1824          DCB      0x00,0x0f,0x18,0x24
000634  2438504f          DCB      0x24,0x38,0x50,0x4f
000638  0008f888          DCB      0x00,0x08,0xf8,0x88
00063c  88888870          DCB      0x88,0x88,0x88,0x70
000640  00203f20          DCB      0x00,0x20,0x3f,0x20
000644  00030c30          DCB      0x00,0x03,0x0c,0x30
000648  20007088          DCB      0x20,0x00,0x70,0x88
00064c  08080838          DCB      0x08,0x08,0x08,0x38
000650  00003820          DCB      0x00,0x00,0x38,0x20
000654  2121221c          DCB      0x21,0x21,0x22,0x1c
000658  00180808          DCB      0x00,0x18,0x08,0x08
00065c  f8080818          DCB      0xf8,0x08,0x08,0x18
000660  00000020          DCB      0x00,0x00,0x00,0x20
000664  3f200000          DCB      0x3f,0x20,0x00,0x00
000668  0008f808          DCB      0x00,0x08,0xf8,0x08
00066c  000008f8          DCB      0x00,0x00,0x08,0xf8
000670  08001f20          DCB      0x08,0x00,0x1f,0x20
000674  2020201f          DCB      0x20,0x20,0x20,0x1f
000678  00087888          DCB      0x00,0x08,0x78,0x88
00067c  0000c838          DCB      0x00,0x00,0xc8,0x38
000680  08000007          DCB      0x08,0x00,0x00,0x07
000684  380e0100          DCB      0x38,0x0e,0x01,0x00
000688  00f80800          DCB      0x00,0xf8,0x08,0x00
00068c  f80008f8          DCB      0xf8,0x00,0x08,0xf8
000690  00033c07          DCB      0x00,0x03,0x3c,0x07
000694  00073c03          DCB      0x00,0x07,0x3c,0x03
000698  00081868          DCB      0x00,0x08,0x18,0x68
00069c  80806818          DCB      0x80,0x80,0x68,0x18
0006a0  0820302c          DCB      0x08,0x20,0x30,0x2c
0006a4  03032c30          DCB      0x03,0x03,0x2c,0x30
0006a8  200838c8          DCB      0x20,0x08,0x38,0xc8
0006ac  00c83808          DCB      0x00,0xc8,0x38,0x08
0006b0  00000020          DCB      0x00,0x00,0x00,0x20
0006b4  3f200000          DCB      0x3f,0x20,0x00,0x00
0006b8  00100808          DCB      0x00,0x10,0x08,0x08
0006bc  08c83808          DCB      0x08,0xc8,0x38,0x08
0006c0  00203826          DCB      0x00,0x20,0x38,0x26
0006c4  21202018          DCB      0x21,0x20,0x20,0x18
0006c8  00000000          DCB      0x00,0x00,0x00,0x00
0006cc  fe020202          DCB      0xfe,0x02,0x02,0x02
0006d0  00000000          DCB      0x00,0x00,0x00,0x00
0006d4  7f404040          DCB      0x7f,0x40,0x40,0x40
0006d8  00000c30          DCB      0x00,0x00,0x0c,0x30
0006dc  c0000000          DCB      0xc0,0x00,0x00,0x00
0006e0  00000000          DCB      0x00,0x00,0x00,0x00
0006e4  010638c0          DCB      0x01,0x06,0x38,0xc0
0006e8  00000202          DCB      0x00,0x00,0x02,0x02
0006ec  02fe0000          DCB      0x02,0xfe,0x00,0x00
0006f0  00004040          DCB      0x00,0x00,0x40,0x40
0006f4  407f0000          DCB      0x40,0x7f,0x00,0x00
0006f8  00000004          DCB      0x00,0x00,0x00,0x04
0006fc  02020204          DCB      0x02,0x02,0x02,0x04
000700  00000000          DCB      0x00,0x00,0x00,0x00
000704  00000000          DCB      0x00,0x00,0x00,0x00
000708  00000000          DCB      0x00,0x00,0x00,0x00
00070c  00000000          DCB      0x00,0x00,0x00,0x00
000710  00808080          DCB      0x00,0x80,0x80,0x80
000714  80808080          DCB      0x80,0x80,0x80,0x80
000718  80000202          DCB      0x80,0x00,0x02,0x02
00071c  04000000          DCB      0x04,0x00,0x00,0x00
000720  00000000          DCB      0x00,0x00,0x00,0x00
000724  00000000          DCB      0x00,0x00,0x00,0x00
000728  00000080          DCB      0x00,0x00,0x00,0x80
00072c  80808000          DCB      0x80,0x80,0x80,0x00
000730  00001924          DCB      0x00,0x00,0x19,0x24
000734  2222223f          DCB      0x22,0x22,0x22,0x3f
000738  2008f800          DCB      0x20,0x08,0xf8,0x00
00073c  80800000          DCB      0x80,0x80,0x00,0x00
000740  00003f11          DCB      0x00,0x00,0x3f,0x11
000744  2020110e          DCB      0x20,0x20,0x11,0x0e
000748  00000000          DCB      0x00,0x00,0x00,0x00
00074c  80808000          DCB      0x80,0x80,0x80,0x00
000750  00000e11          DCB      0x00,0x00,0x0e,0x11
000754  20202011          DCB      0x20,0x20,0x20,0x11
000758  00000000          DCB      0x00,0x00,0x00,0x00
00075c  808088f8          DCB      0x80,0x80,0x88,0xf8
000760  00000e11          DCB      0x00,0x00,0x0e,0x11
000764  2020103f          DCB      0x20,0x20,0x10,0x3f
000768  20000080          DCB      0x20,0x00,0x00,0x80
00076c  80808000          DCB      0x80,0x80,0x80,0x00
000770  00001f22          DCB      0x00,0x00,0x1f,0x22
000774  22222213          DCB      0x22,0x22,0x22,0x13
000778  00008080          DCB      0x00,0x00,0x80,0x80
00077c  f0888888          DCB      0xf0,0x88,0x88,0x88
000780  18002020          DCB      0x18,0x00,0x20,0x20
000784  3f202000          DCB      0x3f,0x20,0x20,0x00
000788  00000080          DCB      0x00,0x00,0x00,0x80
00078c  80808080          DCB      0x80,0x80,0x80,0x80
000790  00006b94          DCB      0x00,0x00,0x6b,0x94
000794  94949360          DCB      0x94,0x94,0x93,0x60
000798  0008f800          DCB      0x00,0x08,0xf8,0x00
00079c  80808000          DCB      0x80,0x80,0x80,0x00
0007a0  00203f21          DCB      0x00,0x20,0x3f,0x21
0007a4  0000203f          DCB      0x00,0x00,0x20,0x3f
0007a8  20008098          DCB      0x20,0x00,0x80,0x98
0007ac  98000000          DCB      0x98,0x00,0x00,0x00
0007b0  00002020          DCB      0x00,0x00,0x20,0x20
0007b4  3f202000          DCB      0x3f,0x20,0x20,0x00
0007b8  00000000          DCB      0x00,0x00,0x00,0x00
0007bc  80989800          DCB      0x80,0x98,0x98,0x00
0007c0  0000c080          DCB      0x00,0x00,0xc0,0x80
0007c4  80807f00          DCB      0x80,0x80,0x7f,0x00
0007c8  0008f800          DCB      0x00,0x08,0xf8,0x00
0007cc  00808080          DCB      0x00,0x80,0x80,0x80
0007d0  00203f24          DCB      0x00,0x20,0x3f,0x24
0007d4  022d3020          DCB      0x02,0x2d,0x30,0x20
0007d8  00000808          DCB      0x00,0x00,0x08,0x08
0007dc  f8000000          DCB      0xf8,0x00,0x00,0x00
0007e0  00002020          DCB      0x00,0x00,0x20,0x20
0007e4  3f202000          DCB      0x3f,0x20,0x20,0x00
0007e8  00808080          DCB      0x00,0x80,0x80,0x80
0007ec  80808080          DCB      0x80,0x80,0x80,0x80
0007f0  00203f20          DCB      0x00,0x20,0x3f,0x20
0007f4  003f2000          DCB      0x00,0x3f,0x20,0x00
0007f8  3f808000          DCB      0x3f,0x80,0x80,0x00
0007fc  80808000          DCB      0x80,0x80,0x80,0x00
000800  00203f21          DCB      0x00,0x20,0x3f,0x21
000804  0000203f          DCB      0x00,0x00,0x20,0x3f
000808  20000080          DCB      0x20,0x00,0x00,0x80
00080c  80808000          DCB      0x80,0x80,0x80,0x00
000810  00001f20          DCB      0x00,0x00,0x1f,0x20
000814  2020201f          DCB      0x20,0x20,0x20,0x1f
000818  00808000          DCB      0x00,0x80,0x80,0x00
00081c  80800000          DCB      0x80,0x80,0x00,0x00
000820  0080ffa1          DCB      0x00,0x80,0xff,0xa1
000824  2020110e          DCB      0x20,0x20,0x11,0x0e
000828  00000000          DCB      0x00,0x00,0x00,0x00
00082c  80808080          DCB      0x80,0x80,0x80,0x80
000830  00000e11          DCB      0x00,0x00,0x0e,0x11
000834  2020a0ff          DCB      0x20,0x20,0xa0,0xff
000838  80808080          DCB      0x80,0x80,0x80,0x80
00083c  00808080          DCB      0x00,0x80,0x80,0x80
000840  0020203f          DCB      0x00,0x20,0x20,0x3f
000844  21200001          DCB      0x21,0x20,0x00,0x01
000848  00000080          DCB      0x00,0x00,0x00,0x80
00084c  80808080          DCB      0x80,0x80,0x80,0x80
000850  00003324          DCB      0x00,0x00,0x33,0x24
000854  24242419          DCB      0x24,0x24,0x24,0x19
000858  00008080          DCB      0x00,0x00,0x80,0x80
00085c  e0808000          DCB      0xe0,0x80,0x80,0x00
000860  00000000          DCB      0x00,0x00,0x00,0x00
000864  1f202000          DCB      0x1f,0x20,0x20,0x00
000868  00808000          DCB      0x00,0x80,0x80,0x00
00086c  00008080          DCB      0x00,0x00,0x80,0x80
000870  00001f20          DCB      0x00,0x00,0x1f,0x20
000874  2020103f          DCB      0x20,0x20,0x10,0x3f
000878  20808080          DCB      0x20,0x80,0x80,0x80
00087c  00008080          DCB      0x00,0x00,0x80,0x80
000880  8000010e          DCB      0x80,0x00,0x01,0x0e
000884  30080601          DCB      0x30,0x08,0x06,0x01
000888  00808000          DCB      0x00,0x80,0x80,0x00
00088c  80008080          DCB      0x80,0x00,0x80,0x80
000890  800f300c          DCB      0x80,0x0f,0x30,0x0c
000894  030c300f          DCB      0x03,0x0c,0x30,0x0f
000898  00008080          DCB      0x00,0x00,0x80,0x80
00089c  00808080          DCB      0x00,0x80,0x80,0x80
0008a0  00002031          DCB      0x00,0x00,0x20,0x31
0008a4  2e0e3120          DCB      0x2e,0x0e,0x31,0x20
0008a8  00808080          DCB      0x00,0x80,0x80,0x80
0008ac  00008080          DCB      0x00,0x00,0x80,0x80
0008b0  8080818e          DCB      0x80,0x80,0x81,0x8e
0008b4  70180601          DCB      0x70,0x18,0x06,0x01
0008b8  00008080          DCB      0x00,0x00,0x80,0x80
0008bc  80808080          DCB      0x80,0x80,0x80,0x80
0008c0  00002130          DCB      0x00,0x00,0x21,0x30
0008c4  2c222130          DCB      0x2c,0x22,0x21,0x30
0008c8  00000000          DCB      0x00,0x00,0x00,0x00
0008cc  00807c02          DCB      0x00,0x80,0x7c,0x02
0008d0  02000000          DCB      0x02,0x00,0x00,0x00
0008d4  00003f40          DCB      0x00,0x00,0x3f,0x40
0008d8  40000000          DCB      0x40,0x00,0x00,0x00
0008dc  00ff0000          DCB      0x00,0xff,0x00,0x00
0008e0  00000000          DCB      0x00,0x00,0x00,0x00
0008e4  00ff0000          DCB      0x00,0xff,0x00,0x00
0008e8  00000202          DCB      0x00,0x00,0x02,0x02
0008ec  7c800000          DCB      0x7c,0x80,0x00,0x00
0008f0  00004040          DCB      0x00,0x00,0x40,0x40
0008f4  3f000000          DCB      0x3f,0x00,0x00,0x00
0008f8  00000000          DCB      0x00,0x00,0x00,0x00
0008fc  00000080          DCB      0x00,0x00,0x00,0x80
000900  80000000          DCB      0x80,0x00,0x00,0x00
000904  00000001          DCB      0x00,0x00,0x00,0x01
000908  01                DCB      0x01
                  LOGO128x64
000909  000000            DCB      0x00,0x00,0x00
00090c  00000000          DCB      0x00,0x00,0x00,0x00
000910  00000000          DCB      0x00,0x00,0x00,0x00
000914  00000000          DCB      0x00,0x00,0x00,0x00
000918  00000000          DCB      0x00,0x00,0x00,0x00
00091c  00000000          DCB      0x00,0x00,0x00,0x00
000920  00000000          DCB      0x00,0x00,0x00,0x00
000924  00000000          DCB      0x00,0x00,0x00,0x00
000928  00000000          DCB      0x00,0x00,0x00,0x00
00092c  00000000          DCB      0x00,0x00,0x00,0x00
000930  00000000          DCB      0x00,0x00,0x00,0x00
000934  00000000          DCB      0x00,0x00,0x00,0x00
000938  00181c3c          DCB      0x00,0x18,0x1c,0x3c
00093c  3c7cfc3c          DCB      0x3c,0x7c,0xfc,0x3c
000940  3c7cd800          DCB      0x3c,0x7c,0xd8,0x00
000944  00000000          DCB      0x00,0x00,0x00,0x00
000948  00000000          DCB      0x00,0x00,0x00,0x00
00094c  00000000          DCB      0x00,0x00,0x00,0x00
000950  00000000          DCB      0x00,0x00,0x00,0x00
000954  00000000          DCB      0x00,0x00,0x00,0x00
000958  00000000          DCB      0x00,0x00,0x00,0x00
00095c  00000000          DCB      0x00,0x00,0x00,0x00
000960  00000000          DCB      0x00,0x00,0x00,0x00
000964  00000000          DCB      0x00,0x00,0x00,0x00
000968  00000000          DCB      0x00,0x00,0x00,0x00
00096c  00000000          DCB      0x00,0x00,0x00,0x00
000970  00000000          DCB      0x00,0x00,0x00,0x00
000974  00000000          DCB      0x00,0x00,0x00,0x00
000978  00000000          DCB      0x00,0x00,0x00,0x00
00097c  00000000          DCB      0x00,0x00,0x00,0x00
000980  00000000          DCB      0x00,0x00,0x00,0x00
000984  00000000          DCB      0x00,0x00,0x00,0x00
000988  00000000          DCB      0x00,0x00,0x00,0x00
00098c  00000000          DCB      0x00,0x00,0x00,0x00
000990  00000000          DCB      0x00,0x00,0x00,0x00
000994  00000000          DCB      0x00,0x00,0x00,0x00
000998  00000000          DCB      0x00,0x00,0x00,0x00
00099c  00000000          DCB      0x00,0x00,0x00,0x00
0009a0  00000000          DCB      0x00,0x00,0x00,0x00
0009a4  00000020          DCB      0x00,0x00,0x00,0x20
0009a8  60e0c0c0          DCB      0x60,0xe0,0xc0,0xc0
0009ac  c0c080c0          DCB      0xc0,0xc0,0x80,0xc0
0009b0  80000000          DCB      0x80,0x00,0x00,0x00
0009b4  00000000          DCB      0x00,0x00,0x00,0x00
0009b8  00000000          DCB      0x00,0x00,0x00,0x00
0009bc  0000ff80          DCB      0x00,0x00,0xff,0x80
0009c0  40201f00          DCB      0x40,0x20,0x1f,0x00
0009c4  00000000          DCB      0x00,0x00,0x00,0x00
0009c8  00000000          DCB      0x00,0x00,0x00,0x00
0009cc  00000000          DCB      0x00,0x00,0x00,0x00
0009d0  00000000          DCB      0x00,0x00,0x00,0x00
0009d4  00000000          DCB      0x00,0x00,0x00,0x00
0009d8  00000000          DCB      0x00,0x00,0x00,0x00
0009dc  0080c080          DCB      0x00,0x80,0xc0,0x80
0009e0  80c0c0c0          DCB      0x80,0xc0,0xc0,0xc0
0009e4  c0606000          DCB      0xc0,0x60,0x60,0x00
0009e8  00000000          DCB      0x00,0x00,0x00,0x00
0009ec  00000000          DCB      0x00,0x00,0x00,0x00
0009f0  00000000          DCB      0x00,0x00,0x00,0x00
0009f4  00000000          DCB      0x00,0x00,0x00,0x00
0009f8  00000000          DCB      0x00,0x00,0x00,0x00
0009fc  00000000          DCB      0x00,0x00,0x00,0x00
000a00  00000000          DCB      0x00,0x00,0x00,0x00
000a04  00000000          DCB      0x00,0x00,0x00,0x00
000a08  00000000          DCB      0x00,0x00,0x00,0x00
000a0c  00000000          DCB      0x00,0x00,0x00,0x00
000a10  00000000          DCB      0x00,0x00,0x00,0x00
000a14  00000000          DCB      0x00,0x00,0x00,0x00
000a18  00000000          DCB      0x00,0x00,0x00,0x00
000a1c  00000000          DCB      0x00,0x00,0x00,0x00
000a20  00000000          DCB      0x00,0x00,0x00,0x00
000a24  00000000          DCB      0x00,0x00,0x00,0x00
000a28  00000001          DCB      0x00,0x00,0x00,0x01
000a2c  0119ffff          DCB      0x01,0x19,0xff,0xff
000a30  ffff73f2          DCB      0xff,0xff,0x73,0xf2
000a34  f6e4e4ec          DCB      0xf6,0xe4,0xe4,0xec
000a38  c8c8c0c0          DCB      0xc8,0xc8,0xc0,0xc0
000a3c  80f0fff0          DCB      0x80,0xf0,0xff,0xf0
000a40  e0f0d0d8          DCB      0xe0,0xf0,0xd0,0xd8
000a44  fcfeffff          DCB      0xfc,0xfe,0xff,0xff
000a48  fffffcc0          DCB      0xff,0xff,0xfc,0xc0
000a4c  c0c0e0e0          DCB      0xc0,0xc0,0xe0,0xe0
000a50  f0f0e0c0          DCB      0xf0,0xf0,0xe0,0xc0
000a54  c0c4e4e4          DCB      0xc0,0xc4,0xe4,0xe4
000a58  e2f2727b          DCB      0xe2,0xf2,0x72,0x7b
000a5c  ffffffff          DCB      0xff,0xff,0xff,0xff
000a60  19010101          DCB      0x19,0x01,0x01,0x01
000a64  00000000          DCB      0x00,0x00,0x00,0x00
000a68  00000000          DCB      0x00,0x00,0x00,0x00
000a6c  00000000          DCB      0x00,0x00,0x00,0x00
000a70  00000000          DCB      0x00,0x00,0x00,0x00
000a74  00000000          DCB      0x00,0x00,0x00,0x00
000a78  00000000          DCB      0x00,0x00,0x00,0x00
000a7c  00000000          DCB      0x00,0x00,0x00,0x00
000a80  00000000          DCB      0x00,0x00,0x00,0x00
000a84  00000000          DCB      0x00,0x00,0x00,0x00
000a88  00000000          DCB      0x00,0x00,0x00,0x00
000a8c  00000000          DCB      0x00,0x00,0x00,0x00
000a90  00000000          DCB      0x00,0x00,0x00,0x00
000a94  00808080          DCB      0x00,0x80,0x80,0x80
000a98  80808080          DCB      0x80,0x80,0x80,0x80
000a9c  c040c0f0          DCB      0xc0,0x40,0xc0,0xf0
000aa0  f8f0f0e0          DCB      0xf8,0xf0,0xf0,0xe0
000aa4  60f0f070          DCB      0x60,0xf0,0xf0,0x70
000aa8  70707030          DCB      0x70,0x70,0x70,0x30
000aac  30303fbf          DCB      0x30,0x30,0x3f,0xbf
000ab0  9f989888          DCB      0x9f,0x98,0x98,0x88
000ab4  88c9c9c3          DCB      0x88,0xc9,0xc9,0xc3
000ab8  c3e7efff          DCB      0xc3,0xe7,0xef,0xff
000abc  ffffffff          DCB      0xff,0xff,0xff,0xff
000ac0  ffffffff          DCB      0xff,0xff,0xff,0xff
000ac4  ffffffff          DCB      0xff,0xff,0xff,0xff
000ac8  ffffffff          DCB      0xff,0xff,0xff,0xff
000acc  ffffffff          DCB      0xff,0xff,0xff,0xff
000ad0  ffffffff          DCB      0xff,0xff,0xff,0xff
000ad4  f7e3e3c1          DCB      0xf7,0xe3,0xe3,0xc1
000ad8  c9c8c8c8          DCB      0xc9,0xc8,0xc8,0xc8
000adc  999f9f9f          DCB      0x99,0x9f,0x9f,0x9f
000ae0  b8383830          DCB      0xb8,0x38,0x38,0x30
000ae4  30307070          DCB      0x30,0x30,0x70,0x70
000ae8  707070f0          DCB      0x70,0x70,0x70,0xf0
000aec  f8f8f8f0          DCB      0xf8,0xf8,0xf8,0xf0
000af0  e0604040          DCB      0xe0,0x60,0x40,0x40
000af4  404040c0          DCB      0x40,0x40,0x40,0xc0
000af8  c0c08080          DCB      0xc0,0xc0,0x80,0x80
000afc  80808080          DCB      0x80,0x80,0x80,0x80
000b00  80800000          DCB      0x80,0x80,0x00,0x00
000b04  00000000          DCB      0x00,0x00,0x00,0x00
000b08  00060202          DCB      0x00,0x06,0x02,0x02
000b0c  02020303          DCB      0x02,0x02,0x03,0x03
000b10  03010101          DCB      0x03,0x01,0x01,0x01
000b14  01010101          DCB      0x01,0x01,0x01,0x01
000b18  01010000          DCB      0x01,0x01,0x00,0x00
000b1c  2070ffff          DCB      0x20,0x70,0xff,0xff
000b20  ffffffff          DCB      0xff,0xff,0xff,0xff
000b24  fe7e3e3e          DCB      0xfe,0x7e,0x3e,0x3e
000b28  3e3e3f1f          DCB      0x3e,0x3e,0x3f,0x1f
000b2c  1f1f1f1f          DCB      0x1f,0x1f,0x1f,0x1f
000b30  1f1f0f0f          DCB      0x1f,0x1f,0x0f,0x0f
000b34  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000b38  07030101          DCB      0x07,0x03,0x01,0x01
000b3c  01010387          DCB      0x01,0x01,0x03,0x87
000b40  8f8f8f87          DCB      0x8f,0x8f,0x8f,0x87
000b44  bfffffff          DCB      0xbf,0xff,0xff,0xff
000b48  ffffffdf          DCB      0xff,0xff,0xff,0xdf
000b4c  87878f87          DCB      0x87,0x87,0x8f,0x87
000b50  81030301          DCB      0x81,0x03,0x03,0x01
000b54  01010107          DCB      0x01,0x01,0x01,0x07
000b58  070f0f0f          DCB      0x07,0x0f,0x0f,0x0f
000b5c  0f1f1f1f          DCB      0x0f,0x1f,0x1f,0x1f
000b60  1f1f1f1f          DCB      0x1f,0x1f,0x1f,0x1f
000b64  1f3f3f3e          DCB      0x1f,0x3f,0x3f,0x3e
000b68  3e3c7fff          DCB      0x3e,0x3c,0x7f,0xff
000b6c  ffffffff          DCB      0xff,0xff,0xff,0xff
000b70  ff381000          DCB      0xff,0x38,0x10,0x00
000b74  00000000          DCB      0x00,0x00,0x00,0x00
000b78  00000000          DCB      0x00,0x00,0x00,0x00
000b7c  00000001          DCB      0x00,0x00,0x00,0x01
000b80  01010101          DCB      0x01,0x01,0x01,0x01
000b84  01010101          DCB      0x01,0x01,0x01,0x01
000b88  01000000          DCB      0x01,0x00,0x00,0x00
000b8c  00000000          DCB      0x00,0x00,0x00,0x00
000b90  00000000          DCB      0x00,0x00,0x00,0x00
000b94  00000000          DCB      0x00,0x00,0x00,0x00
000b98  00000000          DCB      0x00,0x00,0x00,0x00
000b9c  000003ff          DCB      0x00,0x00,0x03,0xff
000ba0  ffffff1f          DCB      0xff,0xff,0xff,0x1f
000ba4  01000000          DCB      0x01,0x00,0x00,0x00
000ba8  00000000          DCB      0x00,0x00,0x00,0x00
000bac  00000000          DCB      0x00,0x00,0x00,0x00
000bb0  00000000          DCB      0x00,0x00,0x00,0x00
000bb4  00000000          DCB      0x00,0x00,0x00,0x00
000bb8  00000000          DCB      0x00,0x00,0x00,0x00
000bbc  0000003f          DCB      0x00,0x00,0x00,0x3f
000bc0  3f3f3f3f          DCB      0x3f,0x3f,0x3f,0x3f
000bc4  3f7fffff          DCB      0x3f,0x7f,0xff,0xff
000bc8  ffffffff          DCB      0xff,0xff,0xff,0xff
000bcc  ffffffff          DCB      0xff,0xff,0xff,0xff
000bd0  ff1f0000          DCB      0xff,0x1f,0x00,0x00
000bd4  00000000          DCB      0x00,0x00,0x00,0x00
000bd8  00000000          DCB      0x00,0x00,0x00,0x00
000bdc  00000000          DCB      0x00,0x00,0x00,0x00
000be0  00000000          DCB      0x00,0x00,0x00,0x00
000be4  00000000          DCB      0x00,0x00,0x00,0x00
000be8  00000003          DCB      0x00,0x00,0x00,0x03
000bec  ffffffff          DCB      0xff,0xff,0xff,0xff
000bf0  03000000          DCB      0x03,0x00,0x00,0x00
000bf4  00000000          DCB      0x00,0x00,0x00,0x00
000bf8  00000000          DCB      0x00,0x00,0x00,0x00
000bfc  00000000          DCB      0x00,0x00,0x00,0x00
000c00  00000000          DCB      0x00,0x00,0x00,0x00
000c04  00000000          DCB      0x00,0x00,0x00,0x00
000c08  00000000          DCB      0x00,0x00,0x00,0x00
000c0c  00000000          DCB      0x00,0x00,0x00,0x00
000c10  00000000          DCB      0x00,0x00,0x00,0x00
000c14  00000000          DCB      0x00,0x00,0x00,0x00
000c18  00000000          DCB      0x00,0x00,0x00,0x00
000c1c  00000007          DCB      0x00,0x00,0x00,0x07
000c20  ffffff00          DCB      0xff,0xff,0xff,0x00
000c24  00000000          DCB      0x00,0x00,0x00,0x00
000c28  00000000          DCB      0x00,0x00,0x00,0x00
000c2c  00000000          DCB      0x00,0x00,0x00,0x00
000c30  00000000          DCB      0x00,0x00,0x00,0x00
000c34  00000000          DCB      0x00,0x00,0x00,0x00
000c38  00000000          DCB      0x00,0x00,0x00,0x00
000c3c  00000000          DCB      0x00,0x00,0x00,0x00
000c40  00000000          DCB      0x00,0x00,0x00,0x00
000c44  00000000          DCB      0x00,0x00,0x00,0x00
000c48  00000000          DCB      0x00,0x00,0x00,0x00
000c4c  00000000          DCB      0x00,0x00,0x00,0x00
000c50  00000000          DCB      0x00,0x00,0x00,0x00
000c54  00000000          DCB      0x00,0x00,0x00,0x00
000c58  00000000          DCB      0x00,0x00,0x00,0x00
000c5c  00000000          DCB      0x00,0x00,0x00,0x00
000c60  00000000          DCB      0x00,0x00,0x00,0x00
000c64  00000000          DCB      0x00,0x00,0x00,0x00
000c68  00000000          DCB      0x00,0x00,0x00,0x00
000c6c  03ffff03          DCB      0x03,0xff,0xff,0x03
000c70  00000000          DCB      0x00,0x00,0x00,0x00
000c74  00000000          DCB      0x00,0x00,0x00,0x00
000c78  00000000          DCB      0x00,0x00,0x00,0x00
000c7c  00000000          DCB      0x00,0x00,0x00,0x00
000c80  00000000          DCB      0x00,0x00,0x00,0x00
000c84  00000000          DCB      0x00,0x00,0x00,0x00
000c88  00000000          DCB      0x00,0x00,0x00,0x00
000c8c  00000000          DCB      0x00,0x00,0x00,0x00
000c90  00000000          DCB      0x00,0x00,0x00,0x00
000c94  00000000          DCB      0x00,0x00,0x00,0x00
000c98  00000000          DCB      0x00,0x00,0x00,0x00
000c9c  00000000          DCB      0x00,0x00,0x00,0x00
000ca0  f0fffff0          DCB      0xf0,0xff,0xff,0xf0
000ca4  c0000000          DCB      0xc0,0x00,0x00,0x00
000ca8  00000000          DCB      0x00,0x00,0x00,0x00
000cac  00000000          DCB      0x00,0x00,0x00,0x00
000cb0  00000000          DCB      0x00,0x00,0x00,0x00
000cb4  00000000          DCB      0x00,0x00,0x00,0x00
000cb8  00000000          DCB      0x00,0x00,0x00,0x00
000cbc  00000000          DCB      0x00,0x00,0x00,0x00
000cc0  00000000          DCB      0x00,0x00,0x00,0x00
000cc4  00000000          DCB      0x00,0x00,0x00,0x00
000cc8  00000000          DCB      0x00,0x00,0x00,0x00
000ccc  00000000          DCB      0x00,0x00,0x00,0x00
000cd0  00000000          DCB      0x00,0x00,0x00,0x00
000cd4  00000000          DCB      0x00,0x00,0x00,0x00
000cd8  00000000          DCB      0x00,0x00,0x00,0x00
000cdc  00000000          DCB      0x00,0x00,0x00,0x00
000ce0  00000000          DCB      0x00,0x00,0x00,0x00
000ce4  00000000          DCB      0x00,0x00,0x00,0x00
000ce8  00000000          DCB      0x00,0x00,0x00,0x00
000cec  7c7f7f78          DCB      0x7c,0x7f,0x7f,0x78
000cf0  00000000          DCB      0x00,0x00,0x00,0x00
000cf4  00000000          DCB      0x00,0x00,0x00,0x00
000cf8  00000000          DCB      0x00,0x00,0x00,0x00
000cfc  00000000          DCB      0x00,0x00,0x00,0x00
000d00  00000000          DCB      0x00,0x00,0x00,0x00
000d04  00000000          DCB      0x00,0x00,0x00,0x00
000d08  00                DCB      0x00
