; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\multirotor_rc.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\multirotor_rc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Driver\STMFLASH -I..\..\User\Function\MultiRotor_altitute -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\ANO_DT -I..\..\User\Driver\Modules_hmc5883 -I..\..\User\Driver\Modules_mpu6050 -I..\..\User\Driver\Modules_ms5611 -I..\..\User\Driver\Modules_oled -I..\..\User\Driver\Modules_ultrasonic -I..\..\User\Function\Heigh -I"C:\Users\Administrator\Desktop\机器人课飞控\机器人课无人机原始程序 - 副本\Project\MDK-ARM(uV5)\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\multirotor_rc.crf ..\..\User\Function\MultiRotor_rc\MultiRotor_rc.c]
                          THUMB

                          AREA ||i.ECS_Calibrate||, CODE, READONLY, ALIGN=2

                  ECS_Calibrate PROC
;;;172    /*====================================================================================================*/
;;;173    void ECS_Calibrate(void)
000000  b510              PUSH     {r4,lr}
;;;174    {
;;;175    	static vs8 ECS_Calibrate_FLAG=0;
;;;176    	static vs16 time=2000;
;;;177    	while(time--)
000002  e001              B        |L1.8|
                  |L1.4|
;;;178    	  RDAU();
000004  f7fffffe          BL       RDAU
                  |L1.8|
000008  4915              LDR      r1,|L1.96|
00000a  f9b10000          LDRSH    r0,[r1,#0]            ;177  ; time
00000e  1e41              SUBS     r1,r0,#1              ;177
000010  b209              SXTH     r1,r1                 ;177
000012  4a13              LDR      r2,|L1.96|
000014  8011              STRH     r1,[r2,#0]            ;177
000016  2800              CMP      r0,#0                 ;177
000018  d1f4              BNE      |L1.4|
;;;179      while(RC_Data.THROTTLE >= 1850 || ECS_Calibrate_FLAG)
00001a  e015              B        |L1.72|
                  |L1.28|
;;;180      {   
;;;181    		LED_ALLON();//白色LED常亮
00001c  2107              MOVS     r1,#7
00001e  4811              LDR      r0,|L1.100|
000020  f7fffffe          BL       GPIO_ResetBits
;;;182    		ECS_Calibrate_FLAG=1;//油门行程标志位置1
000024  2001              MOVS     r0,#1
000026  4910              LDR      r1,|L1.104|
000028  7008              STRB     r0,[r1,#0]
;;;183        RDAU();	
00002a  f7fffffe          BL       RDAU
;;;184    			
;;;185    		#ifdef QUADROTOR 
;;;186         Moto_duty[0] = Moto_duty[1] = Moto_duty[2] = Moto_duty[3] = RC_Data.THROTTLE-1000;
00002e  480f              LDR      r0,|L1.108|
000030  8a80              LDRH     r0,[r0,#0x14]  ; RC_Data
000032  f5a0707a          SUB      r0,r0,#0x3e8
000036  b280              UXTH     r0,r0
000038  490d              LDR      r1,|L1.112|
00003a  80c8              STRH     r0,[r1,#6]
00003c  8088              STRH     r0,[r1,#4]
00003e  8048              STRH     r0,[r1,#2]
000040  8008              STRH     r0,[r1,#0]
;;;187    		#elif defined HEXRCOPTER
;;;188          Moto_duty[0] = Moto_duty[1] = Moto_duty[2] = Moto_duty[3] = Moto_duty[4] = Moto_duty[5] = RC_Data.THROTTLE-1000;
;;;189    		#endif 
;;;190    	  moto_PwmRflash(&Moto_duty[0]);//马达输出刷新，直接写PWM输出寄存器
000042  4608              MOV      r0,r1
000044  f7fffffe          BL       moto_PwmRflash
                  |L1.72|
000048  4808              LDR      r0,|L1.108|
00004a  f9b00014          LDRSH    r0,[r0,#0x14]         ;179  ; RC_Data
00004e  f240713a          MOV      r1,#0x73a             ;179
000052  4288              CMP      r0,r1                 ;179
000054  dae2              BGE      |L1.28|
000056  4804              LDR      r0,|L1.104|
000058  7800              LDRB     r0,[r0,#0]            ;179  ; ECS_Calibrate_FLAG
00005a  2800              CMP      r0,#0                 ;179
00005c  d1de              BNE      |L1.28|
;;;191      }
;;;192    }
00005e  bd10              POP      {r4,pc}
                          ENDP

                  |L1.96|
                          DCD      time
                  |L1.100|
                          DCD      0x40011400
                  |L1.104|
                          DCD      ECS_Calibrate_FLAG
                  |L1.108|
                          DCD      RC_Data
                  |L1.112|
                          DCD      Moto_duty

                          AREA ||i.RC_Data_Refine||, CODE, READONLY, ALIGN=2

                  RC_Data_Refine PROC
;;;116    /*====================================================================================================*/
;;;117    void RC_Data_Refine(void)
000000  b530              PUSH     {r4,r5,lr}
;;;118    {
000002  b088              SUB      sp,sp,#0x20
;;;119      u8 chan,a;	
;;;120    
;;;121    	u16 rcDataMax[8], rcDataMin[8];
;;;122    	static int16_t rcDataCache[8][4], rcDataMean[8];
;;;123    	static uint8_t rcValuesIndex = 0;
;;;124    
;;;125    	rcValuesIndex++;
000004  4a52              LDR      r2,|L2.336|
000006  7812              LDRB     r2,[r2,#0]  ; rcValuesIndex
000008  1c52              ADDS     r2,r2,#1
00000a  4b51              LDR      r3,|L2.336|
00000c  701a              STRB     r2,[r3,#0]
;;;126    	for (chan = 0; chan < 8; chan++) {
00000e  2000              MOVS     r0,#0
000010  e07c              B        |L2.268|
                  |L2.18|
;;;127    		  //滑动平均值滤波，4次
;;;128    		  if(RC_Pwm_In[chan]>2800 || RC_Pwm_In[chan]<800)  RC_Pwm_In[chan] = RC_Pwm_In_his[chan];
000012  4a50              LDR      r2,|L2.340|
000014  f8322010          LDRH     r2,[r2,r0,LSL #1]
000018  f5b26f2f          CMP      r2,#0xaf0
00001c  dc05              BGT      |L2.42|
00001e  4a4d              LDR      r2,|L2.340|
000020  f8322010          LDRH     r2,[r2,r0,LSL #1]
000024  f5b27f48          CMP      r2,#0x320
000028  da05              BGE      |L2.54|
                  |L2.42|
00002a  4a4b              LDR      r2,|L2.344|
00002c  f8322010          LDRH     r2,[r2,r0,LSL #1]
000030  4b48              LDR      r3,|L2.340|
000032  f8232010          STRH     r2,[r3,r0,LSL #1]
                  |L2.54|
;;;129    			rcDataCache[chan][rcValuesIndex % 4] = RC_Pwm_In[chan] ;		
000036  4b47              LDR      r3,|L2.340|
000038  f8333010          LDRH     r3,[r3,r0,LSL #1]
00003c  b21b              SXTH     r3,r3
00003e  4c44              LDR      r4,|L2.336|
000040  7822              LDRB     r2,[r4,#0]  ; rcValuesIndex
000042  17d4              ASRS     r4,r2,#31
000044  eb027494          ADD      r4,r2,r4,LSR #30
000048  10a4              ASRS     r4,r4,#2
00004a  eba20484          SUB      r4,r2,r4,LSL #2
00004e  4d43              LDR      r5,|L2.348|
000050  eb0505c0          ADD      r5,r5,r0,LSL #3
000054  f8253014          STRH     r3,[r5,r4,LSL #1]
;;;130    		  RC_Pwm_In_his[chan] = RC_Pwm_In[chan];
000058  4a3e              LDR      r2,|L2.340|
00005a  f8322010          LDRH     r2,[r2,r0,LSL #1]
00005e  4b3e              LDR      r3,|L2.344|
000060  f8232010          STRH     r2,[r3,r0,LSL #1]
;;;131    			
;;;132    			rcDataMean[chan] = 0;
000064  2200              MOVS     r2,#0
000066  4b3e              LDR      r3,|L2.352|
000068  f8232010          STRH     r2,[r3,r0,LSL #1]
;;;133    		  rcDataMax[chan]  = 0;
00006c  ab04              ADD      r3,sp,#0x10
00006e  f8232010          STRH     r2,[r3,r0,LSL #1]
;;;134    		  rcDataMin[chan]  = 25000;
000072  f24612a8          MOV      r2,#0x61a8
000076  f82d2010          STRH     r2,[sp,r0,LSL #1]
;;;135    		
;;;136    			for (a = 0; a < 4; a++) {
00007a  2100              MOVS     r1,#0
00007c  e031              B        |L2.226|
                  |L2.126|
;;;137    				  // 记录缓存中最大值 && 最小值
;;;138    				  if(rcDataCache[chan][a] > rcDataMax[chan])  rcDataMax[chan] = rcDataCache[chan][a];     
00007e  4a37              LDR      r2,|L2.348|
000080  eb0202c0          ADD      r2,r2,r0,LSL #3
000084  f9322011          LDRSH    r2,[r2,r1,LSL #1]
000088  ab04              ADD      r3,sp,#0x10
00008a  f8333010          LDRH     r3,[r3,r0,LSL #1]
00008e  429a              CMP      r2,r3
000090  dd07              BLE      |L2.162|
000092  4a32              LDR      r2,|L2.348|
000094  eb0202c0          ADD      r2,r2,r0,LSL #3
000098  f8322011          LDRH     r2,[r2,r1,LSL #1]
00009c  ab04              ADD      r3,sp,#0x10
00009e  f8232010          STRH     r2,[r3,r0,LSL #1]
                  |L2.162|
;;;139    					if(rcDataCache[chan][a] < rcDataMin[chan])	rcDataMin[chan] = rcDataCache[chan][a]; 
0000a2  4a2e              LDR      r2,|L2.348|
0000a4  eb0202c0          ADD      r2,r2,r0,LSL #3
0000a8  f9322011          LDRSH    r2,[r2,r1,LSL #1]
0000ac  f83d3010          LDRH     r3,[sp,r0,LSL #1]
0000b0  429a              CMP      r2,r3
0000b2  da07              BGE      |L2.196|
0000b4  4a29              LDR      r2,|L2.348|
0000b6  eb0202c0          ADD      r2,r2,r0,LSL #3
0000ba  f8322011          LDRH     r2,[r2,r1,LSL #1]
0000be  b292              UXTH     r2,r2
0000c0  f82d2010          STRH     r2,[sp,r0,LSL #1]
                  |L2.196|
;;;140    				  // 求和
;;;141    					rcDataMean[chan] += rcDataCache[chan][a];  
0000c4  4a25              LDR      r2,|L2.348|
0000c6  eb0202c0          ADD      r2,r2,r0,LSL #3
0000ca  f8322011          LDRH     r2,[r2,r1,LSL #1]
0000ce  4b24              LDR      r3,|L2.352|
0000d0  f8333010          LDRH     r3,[r3,r0,LSL #1]
0000d4  441a              ADD      r2,r2,r3
0000d6  b212              SXTH     r2,r2
0000d8  4b21              LDR      r3,|L2.352|
0000da  f8232010          STRH     r2,[r3,r0,LSL #1]
0000de  1c4a              ADDS     r2,r1,#1              ;136
0000e0  b2d1              UXTB     r1,r2                 ;136
                  |L2.226|
0000e2  2904              CMP      r1,#4                 ;136
0000e4  dbcb              BLT      |L2.126|
;;;142          }
;;;143    			// 剔除缓存中 最大值 && 最小值 
;;;144    			rcDataMean[chan] = (rcDataMean[chan] - (rcDataMax[chan] + rcDataMin[chan])) / 2;
0000e6  ab04              ADD      r3,sp,#0x10
0000e8  f8333010          LDRH     r3,[r3,r0,LSL #1]
0000ec  f83d4010          LDRH     r4,[sp,r0,LSL #1]
0000f0  4423              ADD      r3,r3,r4
0000f2  4c1b              LDR      r4,|L2.352|
0000f4  f9344010          LDRSH    r4,[r4,r0,LSL #1]
0000f8  1ae2              SUBS     r2,r4,r3
0000fa  eb0273d2          ADD      r3,r2,r2,LSR #31
0000fe  105b              ASRS     r3,r3,#1
000100  b21b              SXTH     r3,r3
000102  4c17              LDR      r4,|L2.352|
000104  f8243010          STRH     r3,[r4,r0,LSL #1]
000108  1c42              ADDS     r2,r0,#1              ;126
00010a  b2d0              UXTB     r0,r2                 ;126
                  |L2.268|
00010c  2808              CMP      r0,#8                 ;126
00010e  db80              BLT      |L2.18|
;;;145    	} 
;;;146    
;;;147    	 RC_Data.ROLL     = RC_Data.rc_data[0] = rcDataMean[0];
000110  4a13              LDR      r2,|L2.352|
000112  f9b22000          LDRSH    r2,[r2,#0]  ; rcDataMean
000116  4b13              LDR      r3,|L2.356|
000118  801a              STRH     r2,[r3,#0]
00011a  821a              STRH     r2,[r3,#0x10]
;;;148    	 RC_Data.PITCH    = RC_Data.rc_data[1] = rcDataMean[1];
00011c  4a10              LDR      r2,|L2.352|
00011e  f9b22002          LDRSH    r2,[r2,#2]  ; rcDataMean
000122  805a              STRH     r2,[r3,#2]
000124  825a              STRH     r2,[r3,#0x12]
;;;149    	 RC_Data.THROTTLE = RC_Data.rc_data[3] = rcDataMean[2]; 
000126  4a0e              LDR      r2,|L2.352|
000128  f9b22004          LDRSH    r2,[r2,#4]  ; rcDataMean
00012c  80da              STRH     r2,[r3,#6]
00012e  829a              STRH     r2,[r3,#0x14]
;;;150    	 RC_Data.YAW      = RC_Data.rc_data[2] = rcDataMean[3];
000130  4a0b              LDR      r2,|L2.352|
000132  f9b22006          LDRSH    r2,[r2,#6]  ; rcDataMean
000136  809a              STRH     r2,[r3,#4]
000138  82da              STRH     r2,[r3,#0x16]
;;;151    	 RC_Data.rc_data[4] = rcDataMean[4];
00013a  4a09              LDR      r2,|L2.352|
00013c  8912              LDRH     r2,[r2,#8]  ; rcDataMean
00013e  811a              STRH     r2,[r3,#8]
;;;152    	 RC_Data.rc_data[5] = rcDataMean[5];
000140  4a07              LDR      r2,|L2.352|
000142  8952              LDRH     r2,[r2,#0xa]  ; rcDataMean
000144  815a              STRH     r2,[r3,#0xa]
;;;153    	 RC_Data.rc_data[6] = rcDataMean[6];
000146  4a06              LDR      r2,|L2.352|
000148  8992              LDRH     r2,[r2,#0xc]  ; rcDataMean
00014a  819a              STRH     r2,[r3,#0xc]
;;;154    }
00014c  b008              ADD      sp,sp,#0x20
00014e  bd30              POP      {r4,r5,pc}
;;;155    
                          ENDP

                  |L2.336|
                          DCD      rcValuesIndex
                  |L2.340|
                          DCD      RC_Pwm_In
                  |L2.344|
                          DCD      RC_Pwm_In_his
                  |L2.348|
                          DCD      rcDataCache
                  |L2.352|
                          DCD      rcDataMean
                  |L2.356|
                          DCD      RC_Data

                          AREA ||i.RC_directive||, CODE, READONLY, ALIGN=2

                  RC_directive PROC
;;;23     /*====================================================================================================*/
;;;24     void RC_directive(void)
000000  b570              PUSH     {r4-r6,lr}
;;;25     {
;;;26       u8 stTmp = 0,keyTemp=0,i;
000002  2500              MOVS     r5,#0
000004  2600              MOVS     r6,#0
;;;27     	static u8  rcSticks,keySticks;
;;;28     	static u8  rcDelayCommand,keyDelayCommand;
;;;29       static u16 seltLockCommend;	
;;;30     /**************************以下处理遥控控制通道数据******************************/	
;;;31     	for (i = 0; i < 4; i++) {
000006  2400              MOVS     r4,#0
000008  e012              B        |L3.48|
                  |L3.10|
;;;32     			stTmp >>= 2;
00000a  10ad              ASRS     r5,r5,#2
;;;33     			if (RC_Data.rc_data[i] > RC_MINCHECK)
00000c  4861              LDR      r0,|L3.404|
00000e  f9300014          LDRSH    r0,[r0,r4,LSL #1]
000012  f5b06f96          CMP      r0,#0x4b0
000016  dd01              BLE      |L3.28|
;;;34     					stTmp |= 0x80;  // check for MIN
000018  f0450580          ORR      r5,r5,#0x80
                  |L3.28|
;;;35     			if (RC_Data.rc_data[i] < RC_MAXCHECK)
00001c  485d              LDR      r0,|L3.404|
00001e  f9300014          LDRSH    r0,[r0,r4,LSL #1]
000022  f5b06fe1          CMP      r0,#0x708
000026  da01              BGE      |L3.44|
;;;36     					stTmp |= 0x40;  // check for MAX
000028  f0450540          ORR      r5,r5,#0x40
                  |L3.44|
00002c  1c60              ADDS     r0,r4,#1              ;31
00002e  b2c4              UXTB     r4,r0                 ;31
                  |L3.48|
000030  2c04              CMP      r4,#4                 ;31
000032  dbea              BLT      |L3.10|
;;;37     	}
;;;38     
;;;39     	if (stTmp == rcSticks) {
000034  4858              LDR      r0,|L3.408|
000036  7800              LDRB     r0,[r0,#0]  ; rcSticks
000038  4285              CMP      r5,r0
00003a  d109              BNE      |L3.80|
;;;40     			if (rcDelayCommand < 250)//250
00003c  4857              LDR      r0,|L3.412|
00003e  7800              LDRB     r0,[r0,#0]  ; rcDelayCommand
000040  28fa              CMP      r0,#0xfa
000042  da08              BGE      |L3.86|
;;;41     					rcDelayCommand++;
000044  4855              LDR      r0,|L3.412|
000046  7800              LDRB     r0,[r0,#0]  ; rcDelayCommand
000048  1c40              ADDS     r0,r0,#1
00004a  4954              LDR      r1,|L3.412|
00004c  7008              STRB     r0,[r1,#0]
00004e  e002              B        |L3.86|
                  |L3.80|
;;;42     	} else
;;;43     			rcDelayCommand = 0;
000050  2000              MOVS     r0,#0
000052  4952              LDR      r1,|L3.412|
000054  7008              STRB     r0,[r1,#0]
                  |L3.86|
;;;44     	rcSticks = stTmp;
000056  4850              LDR      r0,|L3.408|
000058  7005              STRB     r5,[r0,#0]
;;;45     	
;;;46     	if (rcDelayCommand == 250) {//150
00005a  4850              LDR      r0,|L3.412|
00005c  7800              LDRB     r0,[r0,#0]  ; rcDelayCommand
00005e  28fa              CMP      r0,#0xfa
000060  d137              BNE      |L3.210|
;;;47     		if (flag.ARMED){
000062  484f              LDR      r0,|L3.416|
000064  7940              LDRB     r0,[r0,#5]  ; flag
000066  b138              CBZ      r0,|L3.120|
;;;48     			 if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE)   //上锁 左下+中位
000068  484b              LDR      r0,|L3.408|
00006a  7800              LDRB     r0,[r0,#0]  ; rcSticks
00006c  285f              CMP      r0,#0x5f
00006e  d130              BNE      |L3.210|
;;;49     				  flag.ARMED=0;
000070  2000              MOVS     r0,#0
000072  494b              LDR      r1,|L3.416|
000074  7148              STRB     r0,[r1,#5]
000076  e02c              B        |L3.210|
                  |L3.120|
;;;50     		}
;;;51     		else{
;;;52     					if ((rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE) && flag.FlightMode==MANUAL_High)    //解锁 右下+中位 ,处于手动模式 
000078  4847              LDR      r0,|L3.408|
00007a  7800              LDRB     r0,[r0,#0]  ; rcSticks
00007c  286f              CMP      r0,#0x6f
00007e  d10b              BNE      |L3.152|
000080  4847              LDR      r0,|L3.416|
000082  7cc0              LDRB     r0,[r0,#0x13]  ; flag
000084  2801              CMP      r0,#1
000086  d107              BNE      |L3.152|
;;;53     					{
;;;54     						 flag.ARMED=1;Pressure_groud=Pressure;//解锁即记下当前的气压值作为地面气压值。
000088  4945              LDR      r1,|L3.416|
00008a  7148              STRB     r0,[r1,#5]
00008c  4845              LDR      r0,|L3.420|
00008e  6800              LDR      r0,[r0,#0]  ; Pressure
000090  f7fffffe          BL       __aeabi_ui2f
000094  4944              LDR      r1,|L3.424|
000096  6008              STR      r0,[r1,#0]  ; Pressure_groud
                  |L3.152|
;;;55     					}
;;;56     					if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)    //加速度矫正 左下+右
000098  483f              LDR      r0,|L3.408|
00009a  7800              LDRB     r0,[r0,#0]  ; rcSticks
00009c  285e              CMP      r0,#0x5e
00009e  d103              BNE      |L3.168|
;;;57     							{flag.calibratingA = 1;flag.calibratingG = 1;}
0000a0  2001              MOVS     r0,#1
0000a2  493f              LDR      r1,|L3.416|
0000a4  71c8              STRB     r0,[r1,#7]
0000a6  7288              STRB     r0,[r1,#0xa]
                  |L3.168|
;;;58     					if ((rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_HI) && flag.calibratingM_pre)//左上+右上指南针矫正 
0000a8  483b              LDR      r0,|L3.408|
0000aa  7800              LDRB     r0,[r0,#0]  ; rcSticks
0000ac  2896              CMP      r0,#0x96
0000ae  d105              BNE      |L3.188|
0000b0  483b              LDR      r0,|L3.416|
0000b2  7a40              LDRB     r0,[r0,#9]  ; flag
0000b4  b110              CBZ      r0,|L3.188|
;;;59     							flag.calibratingM = 1; 
0000b6  2001              MOVS     r0,#1
0000b8  4939              LDR      r1,|L3.416|
0000ba  7208              STRB     r0,[r1,#8]
                  |L3.188|
;;;60     					if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_LO)//右上+左上    
0000bc  4836              LDR      r0,|L3.408|
0000be  7800              LDRB     r0,[r0,#0]  ; rcSticks
0000c0  28a5              CMP      r0,#0xa5
0000c2  d103              BNE      |L3.204|
;;;61     							flag.calibratingM_pre = 1;
0000c4  2001              MOVS     r0,#1
0000c6  4936              LDR      r1,|L3.416|
0000c8  7248              STRB     r0,[r1,#9]
0000ca  e002              B        |L3.210|
                  |L3.204|
;;;62     					else flag.calibratingM_pre = 0;	
0000cc  2000              MOVS     r0,#0
0000ce  4934              LDR      r1,|L3.416|
0000d0  7248              STRB     r0,[r1,#9]
                  |L3.210|
;;;63         }
;;;64     	}
;;;65     	//解锁之后一段时间油门保持最低  则自动上锁
;;;66     	if (flag.ARMED){
0000d2  4833              LDR      r0,|L3.416|
0000d4  7940              LDRB     r0,[r0,#5]  ; flag
0000d6  b1a8              CBZ      r0,|L3.260|
;;;67     	   if (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_CE) {
0000d8  482f              LDR      r0,|L3.408|
0000da  7800              LDRB     r0,[r0,#0]  ; rcSticks
0000dc  287f              CMP      r0,#0x7f
0000de  d10e              BNE      |L3.254|
;;;68     		    if (seltLockCommend < AUTODISARMDE_TIME)
0000e0  4832              LDR      r0,|L3.428|
0000e2  8800              LDRH     r0,[r0,#0]  ; seltLockCommend
0000e4  f5b06ffa          CMP      r0,#0x7d0
0000e8  da05              BGE      |L3.246|
;;;69     					 seltLockCommend++;
0000ea  4830              LDR      r0,|L3.428|
0000ec  8800              LDRH     r0,[r0,#0]  ; seltLockCommend
0000ee  1c40              ADDS     r0,r0,#1
0000f0  492e              LDR      r1,|L3.428|
0000f2  8008              STRH     r0,[r1,#0]
0000f4  e006              B        |L3.260|
                  |L3.246|
;;;70     				else 
;;;71     					 flag.ARMED=0;
0000f6  2000              MOVS     r0,#0
0000f8  4929              LDR      r1,|L3.416|
0000fa  7148              STRB     r0,[r1,#5]
0000fc  e002              B        |L3.260|
                  |L3.254|
;;;72     		 }
;;;73     		 else 
;;;74             seltLockCommend = 0;			 
0000fe  2000              MOVS     r0,#0
000100  492a              LDR      r1,|L3.428|
000102  8008              STRH     r0,[r1,#0]
                  |L3.260|
;;;75     	}
;;;76     
;;;77     /**************************以下处理遥控开关数据******************************/
;;;78         for (i = 0; i < 4; i++) {
000104  2400              MOVS     r4,#0
000106  e014              B        |L3.306|
                  |L3.264|
;;;79                 keyTemp >>= 2;
000108  10b6              ASRS     r6,r6,#2
;;;80                 if (RC_Data.rc_data[i+4] > RC_MINCHECK)
00010a  4922              LDR      r1,|L3.404|
00010c  1d20              ADDS     r0,r4,#4
00010e  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000112  f5b06f96          CMP      r0,#0x4b0
000116  dd01              BLE      |L3.284|
;;;81                         keyTemp |= 0x80;  // check for MIN
000118  f0460680          ORR      r6,r6,#0x80
                  |L3.284|
;;;82                 if (RC_Data.rc_data[i+4] < RC_MAXCHECK)
00011c  491d              LDR      r1,|L3.404|
00011e  1d20              ADDS     r0,r4,#4
000120  f9310010          LDRSH    r0,[r1,r0,LSL #1]
000124  f5b06fe1          CMP      r0,#0x708
000128  da01              BGE      |L3.302|
;;;83                         keyTemp |= 0x40;  // check for MAX
00012a  f0460640          ORR      r6,r6,#0x40
                  |L3.302|
00012e  1c60              ADDS     r0,r4,#1              ;78
000130  b2c4              UXTB     r4,r0                 ;78
                  |L3.306|
000132  2c04              CMP      r4,#4                 ;78
000134  dbe8              BLT      |L3.264|
;;;84                 }
;;;85         if (keyTemp == keySticks) {
000136  481e              LDR      r0,|L3.432|
000138  7800              LDRB     r0,[r0,#0]  ; keySticks
00013a  4286              CMP      r6,r0
00013c  d10d              BNE      |L3.346|
;;;86                 if (keyDelayCommand < 200)//250
00013e  481d              LDR      r0,|L3.436|
000140  7800              LDRB     r0,[r0,#0]  ; keyDelayCommand
000142  28c8              CMP      r0,#0xc8
000144  da05              BGE      |L3.338|
;;;87                         keyDelayCommand++;
000146  481b              LDR      r0,|L3.436|
000148  7800              LDRB     r0,[r0,#0]  ; keyDelayCommand
00014a  1c40              ADDS     r0,r0,#1
00014c  4919              LDR      r1,|L3.436|
00014e  7008              STRB     r0,[r1,#0]
000150  e006              B        |L3.352|
                  |L3.338|
;;;88                 else keyDelayCommand = 0;
000152  2000              MOVS     r0,#0
000154  4917              LDR      r1,|L3.436|
000156  7008              STRB     r0,[r1,#0]
000158  e002              B        |L3.352|
                  |L3.346|
;;;89         } else
;;;90                 keyDelayCommand = 0;
00015a  2000              MOVS     r0,#0
00015c  4915              LDR      r1,|L3.436|
00015e  7008              STRB     r0,[r1,#0]
                  |L3.352|
;;;91         keySticks = keyTemp;
000160  4813              LDR      r0,|L3.432|
000162  7006              STRB     r6,[r0,#0]
;;;92     
;;;93         if (keyDelayCommand==120) {
000164  4813              LDR      r0,|L3.436|
000166  7800              LDRB     r0,[r0,#0]  ; keyDelayCommand
000168  2878              CMP      r0,#0x78
00016a  d111              BNE      |L3.400|
;;;94            // if (flag.ARMED) {
;;;95                 if ((keySticks&0X03)==CH5_LO) {//CH5处于低位时，正常模式
00016c  4810              LDR      r0,|L3.432|
00016e  7800              LDRB     r0,[r0,#0]  ; keySticks
000170  f0000003          AND      r0,r0,#3
000174  2801              CMP      r0,#1
000176  d102              BNE      |L3.382|
;;;96                     flag.FlightMode=MANUAL_High;
000178  4909              LDR      r1,|L3.416|
00017a  74c8              STRB     r0,[r1,#0x13]
;;;97     							  flag.HUDMode=STABILIZE_MODE;
00017c  7508              STRB     r0,[r1,#0x14]
                  |L3.382|
;;;98     							//keephigh=0;
;;;99                 }
;;;100                if ((keySticks&0X03)==CH5_HI) {//CH5处于高位时，超声波定高模式
00017e  480c              LDR      r0,|L3.432|
000180  7800              LDRB     r0,[r0,#0]  ; keySticks
000182  f0000003          AND      r0,r0,#3
000186  2802              CMP      r0,#2
000188  d102              BNE      |L3.400|
;;;101                  //gps_flag=1;
;;;102    							  flag.FlightMode=ULTRASONIC_High;//ULTRASONIC_High;ACC_High;// 
00018a  4905              LDR      r1,|L3.416|
00018c  74c8              STRB     r0,[r1,#0x13]
;;;103    							  flag.HUDMode=ALTHOLD_MODE;
00018e  7508              STRB     r0,[r1,#0x14]
                  |L3.400|
;;;104    			}
;;;105            //}
;;;106        }
;;;107    }
000190  bd70              POP      {r4-r6,pc}
;;;108    /*====================================================================================================*/
                          ENDP

000192  0000              DCW      0x0000
                  |L3.404|
                          DCD      RC_Data
                  |L3.408|
                          DCD      rcSticks
                  |L3.412|
                          DCD      rcDelayCommand
                  |L3.416|
                          DCD      flag
                  |L3.420|
                          DCD      Pressure
                  |L3.424|
                          DCD      Pressure_groud
                  |L3.428|
                          DCD      seltLockCommend
                  |L3.432|
                          DCD      keySticks
                  |L3.436|
                          DCD      keyDelayCommand

                          AREA ||i.RDAU||, CODE, READONLY, ALIGN=2

                  RDAU PROC
;;;8      
;;;9      void RDAU(void)
000000  b510              PUSH     {r4,lr}
;;;10     {
;;;11     	RC_directive();
000002  f7fffffe          BL       RC_directive
;;;12     	rcReadRawFunc();
000006  4802              LDR      r0,|L4.16|
000008  6800              LDR      r0,[r0,#0]  ; rcReadRawFunc
00000a  4780              BLX      r0
;;;13     }
00000c  bd10              POP      {r4,pc}
;;;14     
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      rcReadRawFunc

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  RC_Data
                          %        28
                  rcDataCache
                          %        64
                  rcDataMean
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  rcReadRawFunc
                          DCD      RC_Data_Refine
                  rcSticks
000004  00                DCB      0x00
                  keySticks
000005  00                DCB      0x00
                  rcDelayCommand
000006  00                DCB      0x00
                  keyDelayCommand
000007  00                DCB      0x00
                  seltLockCommend
000008  0000              DCB      0x00,0x00
                  rcValuesIndex
00000a  00                DCB      0x00
                  ECS_Calibrate_FLAG
00000b  00                DCB      0x00
                  time
00000c  07d0              DCW      0x07d0
